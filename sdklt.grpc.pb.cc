// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sdklt.proto

#include "sdklt.pb.h"
#include "sdklt.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sdklt {

static const char* Api_method_names[] = {
  "/sdklt.Api/bcmInit",
  "/sdklt.Api/bcmShell",
  "/sdklt.Api/bcmShutdown",
  "/sdklt.Api/openWrite",
  "/sdklt.Api/openRead",
};

std::unique_ptr< Api::Stub> Api::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Api::Stub> stub(new Api::Stub(channel));
  return stub;
}

Api::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_bcmInit_(Api_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_bcmShell_(Api_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_bcmShutdown_(Api_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_openWrite_(Api_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_openRead_(Api_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Api::Stub::bcmInit(::grpc::ClientContext* context, const ::sdklt::InitRequest& request, ::sdklt::InitState* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_bcmInit_, context, request, response);
}

void Api::Stub::experimental_async::bcmInit(::grpc::ClientContext* context, const ::sdklt::InitRequest* request, ::sdklt::InitState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_bcmInit_, context, request, response, std::move(f));
}

void Api::Stub::experimental_async::bcmInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sdklt::InitState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_bcmInit_, context, request, response, std::move(f));
}

void Api::Stub::experimental_async::bcmInit(::grpc::ClientContext* context, const ::sdklt::InitRequest* request, ::sdklt::InitState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_bcmInit_, context, request, response, reactor);
}

void Api::Stub::experimental_async::bcmInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sdklt::InitState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_bcmInit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sdklt::InitState>* Api::Stub::AsyncbcmInitRaw(::grpc::ClientContext* context, const ::sdklt::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sdklt::InitState>::Create(channel_.get(), cq, rpcmethod_bcmInit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sdklt::InitState>* Api::Stub::PrepareAsyncbcmInitRaw(::grpc::ClientContext* context, const ::sdklt::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sdklt::InitState>::Create(channel_.get(), cq, rpcmethod_bcmInit_, context, request, false);
}

::grpc::Status Api::Stub::bcmShell(::grpc::ClientContext* context, const ::sdklt::ShellRequest& request, ::sdklt::ShellState* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_bcmShell_, context, request, response);
}

void Api::Stub::experimental_async::bcmShell(::grpc::ClientContext* context, const ::sdklt::ShellRequest* request, ::sdklt::ShellState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_bcmShell_, context, request, response, std::move(f));
}

void Api::Stub::experimental_async::bcmShell(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sdklt::ShellState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_bcmShell_, context, request, response, std::move(f));
}

void Api::Stub::experimental_async::bcmShell(::grpc::ClientContext* context, const ::sdklt::ShellRequest* request, ::sdklt::ShellState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_bcmShell_, context, request, response, reactor);
}

void Api::Stub::experimental_async::bcmShell(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sdklt::ShellState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_bcmShell_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sdklt::ShellState>* Api::Stub::AsyncbcmShellRaw(::grpc::ClientContext* context, const ::sdklt::ShellRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sdklt::ShellState>::Create(channel_.get(), cq, rpcmethod_bcmShell_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sdklt::ShellState>* Api::Stub::PrepareAsyncbcmShellRaw(::grpc::ClientContext* context, const ::sdklt::ShellRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sdklt::ShellState>::Create(channel_.get(), cq, rpcmethod_bcmShell_, context, request, false);
}

::grpc::Status Api::Stub::bcmShutdown(::grpc::ClientContext* context, const ::sdklt::ShutDownRequest& request, ::sdklt::ShutDownState* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_bcmShutdown_, context, request, response);
}

void Api::Stub::experimental_async::bcmShutdown(::grpc::ClientContext* context, const ::sdklt::ShutDownRequest* request, ::sdklt::ShutDownState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_bcmShutdown_, context, request, response, std::move(f));
}

void Api::Stub::experimental_async::bcmShutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sdklt::ShutDownState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_bcmShutdown_, context, request, response, std::move(f));
}

void Api::Stub::experimental_async::bcmShutdown(::grpc::ClientContext* context, const ::sdklt::ShutDownRequest* request, ::sdklt::ShutDownState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_bcmShutdown_, context, request, response, reactor);
}

void Api::Stub::experimental_async::bcmShutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sdklt::ShutDownState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_bcmShutdown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sdklt::ShutDownState>* Api::Stub::AsyncbcmShutdownRaw(::grpc::ClientContext* context, const ::sdklt::ShutDownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sdklt::ShutDownState>::Create(channel_.get(), cq, rpcmethod_bcmShutdown_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sdklt::ShutDownState>* Api::Stub::PrepareAsyncbcmShutdownRaw(::grpc::ClientContext* context, const ::sdklt::ShutDownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sdklt::ShutDownState>::Create(channel_.get(), cq, rpcmethod_bcmShutdown_, context, request, false);
}

::grpc::Status Api::Stub::openWrite(::grpc::ClientContext* context, const ::sdklt::WriteRequest& request, ::sdklt::WriteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_openWrite_, context, request, response);
}

void Api::Stub::experimental_async::openWrite(::grpc::ClientContext* context, const ::sdklt::WriteRequest* request, ::sdklt::WriteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_openWrite_, context, request, response, std::move(f));
}

void Api::Stub::experimental_async::openWrite(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sdklt::WriteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_openWrite_, context, request, response, std::move(f));
}

void Api::Stub::experimental_async::openWrite(::grpc::ClientContext* context, const ::sdklt::WriteRequest* request, ::sdklt::WriteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_openWrite_, context, request, response, reactor);
}

void Api::Stub::experimental_async::openWrite(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sdklt::WriteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_openWrite_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sdklt::WriteResponse>* Api::Stub::AsyncopenWriteRaw(::grpc::ClientContext* context, const ::sdklt::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sdklt::WriteResponse>::Create(channel_.get(), cq, rpcmethod_openWrite_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sdklt::WriteResponse>* Api::Stub::PrepareAsyncopenWriteRaw(::grpc::ClientContext* context, const ::sdklt::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sdklt::WriteResponse>::Create(channel_.get(), cq, rpcmethod_openWrite_, context, request, false);
}

::grpc::Status Api::Stub::openRead(::grpc::ClientContext* context, const ::sdklt::ReadRequest& request, ::sdklt::ReadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_openRead_, context, request, response);
}

void Api::Stub::experimental_async::openRead(::grpc::ClientContext* context, const ::sdklt::ReadRequest* request, ::sdklt::ReadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_openRead_, context, request, response, std::move(f));
}

void Api::Stub::experimental_async::openRead(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sdklt::ReadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_openRead_, context, request, response, std::move(f));
}

void Api::Stub::experimental_async::openRead(::grpc::ClientContext* context, const ::sdklt::ReadRequest* request, ::sdklt::ReadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_openRead_, context, request, response, reactor);
}

void Api::Stub::experimental_async::openRead(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sdklt::ReadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_openRead_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sdklt::ReadResponse>* Api::Stub::AsyncopenReadRaw(::grpc::ClientContext* context, const ::sdklt::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sdklt::ReadResponse>::Create(channel_.get(), cq, rpcmethod_openRead_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sdklt::ReadResponse>* Api::Stub::PrepareAsyncopenReadRaw(::grpc::ClientContext* context, const ::sdklt::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sdklt::ReadResponse>::Create(channel_.get(), cq, rpcmethod_openRead_, context, request, false);
}

Api::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::sdklt::InitRequest, ::sdklt::InitState>(
          std::mem_fn(&Api::Service::bcmInit), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::sdklt::ShellRequest, ::sdklt::ShellState>(
          std::mem_fn(&Api::Service::bcmShell), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::sdklt::ShutDownRequest, ::sdklt::ShutDownState>(
          std::mem_fn(&Api::Service::bcmShutdown), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::sdklt::WriteRequest, ::sdklt::WriteResponse>(
          std::mem_fn(&Api::Service::openWrite), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Api_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Api::Service, ::sdklt::ReadRequest, ::sdklt::ReadResponse>(
          std::mem_fn(&Api::Service::openRead), this)));
}

Api::Service::~Service() {
}

::grpc::Status Api::Service::bcmInit(::grpc::ServerContext* context, const ::sdklt::InitRequest* request, ::sdklt::InitState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::bcmShell(::grpc::ServerContext* context, const ::sdklt::ShellRequest* request, ::sdklt::ShellState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::bcmShutdown(::grpc::ServerContext* context, const ::sdklt::ShutDownRequest* request, ::sdklt::ShutDownState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::openWrite(::grpc::ServerContext* context, const ::sdklt::WriteRequest* request, ::sdklt::WriteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Api::Service::openRead(::grpc::ServerContext* context, const ::sdklt::ReadRequest* request, ::sdklt::ReadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sdklt

