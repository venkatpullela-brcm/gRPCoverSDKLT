// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdklt.proto

#include "sdklt.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdklt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Action_sdklt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdklt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Action_Param_sdklt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdklt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActionProfileAction_sdklt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdklt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActionProfileActionSet_sdklt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdklt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Entity_sdklt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdklt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_FieldMatch_sdklt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdklt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMatch_Exact_sdklt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdklt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMatch_LPM_sdklt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdklt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMatch_Optional_sdklt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdklt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMatch_Range_sdklt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdklt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMatch_Ternary_sdklt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdklt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TableAction_sdklt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdklt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TableEntry_sdklt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdklt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableEntry_IdleTimeout_sdklt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdklt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Uint128_sdklt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdklt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Update_sdklt_2eproto;
namespace sdklt {
class ShellRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellRequest> _instance;
} _ShellRequest_default_instance_;
class ShellStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellState> _instance;
} _ShellState_default_instance_;
class InitRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitRequest> _instance;
} _InitRequest_default_instance_;
class InitStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitState> _instance;
} _InitState_default_instance_;
class ShutDownRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShutDownRequest> _instance;
} _ShutDownRequest_default_instance_;
class ShutDownStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShutDownState> _instance;
} _ShutDownState_default_instance_;
class ReadRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadRequest> _instance;
} _ReadRequest_default_instance_;
class ReadResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadResponse> _instance;
} _ReadResponse_default_instance_;
class WriteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteRequest> _instance;
} _WriteRequest_default_instance_;
class WriteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteResponse> _instance;
} _WriteResponse_default_instance_;
class UpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Update> _instance;
} _Update_default_instance_;
class EntityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Entity> _instance;
  const ::sdklt::TableEntry* table_entry_;
} _Entity_default_instance_;
class ExternEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExternEntry> _instance;
} _ExternEntry_default_instance_;
class TableEntry_IdleTimeoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableEntry_IdleTimeout> _instance;
} _TableEntry_IdleTimeout_default_instance_;
class TableEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableEntry> _instance;
} _TableEntry_default_instance_;
class FieldMatch_ExactDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldMatch_Exact> _instance;
} _FieldMatch_Exact_default_instance_;
class FieldMatch_TernaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldMatch_Ternary> _instance;
} _FieldMatch_Ternary_default_instance_;
class FieldMatch_LPMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldMatch_LPM> _instance;
} _FieldMatch_LPM_default_instance_;
class FieldMatch_RangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldMatch_Range> _instance;
} _FieldMatch_Range_default_instance_;
class FieldMatch_OptionalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldMatch_Optional> _instance;
} _FieldMatch_Optional_default_instance_;
class FieldMatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldMatch> _instance;
  const ::sdklt::FieldMatch_Exact* exact_;
  const ::sdklt::FieldMatch_Ternary* ternary_;
  const ::sdklt::FieldMatch_LPM* lpm_;
  const ::sdklt::FieldMatch_Range* range_;
  const ::sdklt::FieldMatch_Optional* optional_;
  const PROTOBUF_NAMESPACE_ID::Any* other_;
} _FieldMatch_default_instance_;
class TableActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableAction> _instance;
  const ::sdklt::Action* action_;
  ::PROTOBUF_NAMESPACE_ID::uint32 action_profile_member_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 action_profile_group_id_;
  const ::sdklt::ActionProfileActionSet* action_profile_action_set_;
} _TableAction_default_instance_;
class Action_ParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Action_Param> _instance;
} _Action_Param_default_instance_;
class ActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Action> _instance;
} _Action_default_instance_;
class ActionProfileActionSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionProfileActionSet> _instance;
} _ActionProfileActionSet_default_instance_;
class ActionProfileActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionProfileAction> _instance;
} _ActionProfileAction_default_instance_;
class Uint128DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Uint128> _instance;
} _Uint128_default_instance_;
}  // namespace sdklt
static void InitDefaultsscc_info_Action_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_Action_default_instance_;
    new (ptr) ::sdklt::Action();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::Action::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Action_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Action_sdklt_2eproto}, {
      &scc_info_Action_Param_sdklt_2eproto.base,}};

static void InitDefaultsscc_info_Action_Param_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_Action_Param_default_instance_;
    new (ptr) ::sdklt::Action_Param();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::Action_Param::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Action_Param_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Action_Param_sdklt_2eproto}, {}};

static void InitDefaultsscc_info_ActionProfileAction_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_ActionProfileAction_default_instance_;
    new (ptr) ::sdklt::ActionProfileAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::ActionProfileAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActionProfileAction_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ActionProfileAction_sdklt_2eproto}, {
      &scc_info_Action_sdklt_2eproto.base,}};

static void InitDefaultsscc_info_ActionProfileActionSet_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_ActionProfileActionSet_default_instance_;
    new (ptr) ::sdklt::ActionProfileActionSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::ActionProfileActionSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActionProfileActionSet_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ActionProfileActionSet_sdklt_2eproto}, {
      &scc_info_ActionProfileAction_sdklt_2eproto.base,}};

static void InitDefaultsscc_info_Entity_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_Entity_default_instance_;
    new (ptr) ::sdklt::Entity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::Entity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Entity_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Entity_sdklt_2eproto}, {
      &scc_info_TableEntry_sdklt_2eproto.base,}};

static void InitDefaultsscc_info_ExternEntry_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_ExternEntry_default_instance_;
    new (ptr) ::sdklt::ExternEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::ExternEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExternEntry_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExternEntry_sdklt_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_FieldMatch_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_FieldMatch_default_instance_;
    new (ptr) ::sdklt::FieldMatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::FieldMatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_FieldMatch_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_FieldMatch_sdklt_2eproto}, {
      &scc_info_FieldMatch_Exact_sdklt_2eproto.base,
      &scc_info_FieldMatch_Ternary_sdklt_2eproto.base,
      &scc_info_FieldMatch_LPM_sdklt_2eproto.base,
      &scc_info_FieldMatch_Range_sdklt_2eproto.base,
      &scc_info_FieldMatch_Optional_sdklt_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_FieldMatch_Exact_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_FieldMatch_Exact_default_instance_;
    new (ptr) ::sdklt::FieldMatch_Exact();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::FieldMatch_Exact::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMatch_Exact_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FieldMatch_Exact_sdklt_2eproto}, {}};

static void InitDefaultsscc_info_FieldMatch_LPM_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_FieldMatch_LPM_default_instance_;
    new (ptr) ::sdklt::FieldMatch_LPM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::FieldMatch_LPM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMatch_LPM_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FieldMatch_LPM_sdklt_2eproto}, {}};

static void InitDefaultsscc_info_FieldMatch_Optional_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_FieldMatch_Optional_default_instance_;
    new (ptr) ::sdklt::FieldMatch_Optional();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::FieldMatch_Optional::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMatch_Optional_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FieldMatch_Optional_sdklt_2eproto}, {}};

static void InitDefaultsscc_info_FieldMatch_Range_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_FieldMatch_Range_default_instance_;
    new (ptr) ::sdklt::FieldMatch_Range();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::FieldMatch_Range::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMatch_Range_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FieldMatch_Range_sdklt_2eproto}, {}};

static void InitDefaultsscc_info_FieldMatch_Ternary_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_FieldMatch_Ternary_default_instance_;
    new (ptr) ::sdklt::FieldMatch_Ternary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::FieldMatch_Ternary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMatch_Ternary_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FieldMatch_Ternary_sdklt_2eproto}, {}};

static void InitDefaultsscc_info_InitRequest_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_InitRequest_default_instance_;
    new (ptr) ::sdklt::InitRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::InitRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitRequest_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InitRequest_sdklt_2eproto}, {}};

static void InitDefaultsscc_info_InitState_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_InitState_default_instance_;
    new (ptr) ::sdklt::InitState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::InitState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitState_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InitState_sdklt_2eproto}, {}};

static void InitDefaultsscc_info_ReadRequest_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_ReadRequest_default_instance_;
    new (ptr) ::sdklt::ReadRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::ReadRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadRequest_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadRequest_sdklt_2eproto}, {}};

static void InitDefaultsscc_info_ReadResponse_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_ReadResponse_default_instance_;
    new (ptr) ::sdklt::ReadResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::ReadResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadResponse_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadResponse_sdklt_2eproto}, {}};

static void InitDefaultsscc_info_ShellRequest_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_ShellRequest_default_instance_;
    new (ptr) ::sdklt::ShellRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::ShellRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellRequest_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShellRequest_sdklt_2eproto}, {}};

static void InitDefaultsscc_info_ShellState_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_ShellState_default_instance_;
    new (ptr) ::sdklt::ShellState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::ShellState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellState_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShellState_sdklt_2eproto}, {}};

static void InitDefaultsscc_info_ShutDownRequest_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_ShutDownRequest_default_instance_;
    new (ptr) ::sdklt::ShutDownRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::ShutDownRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShutDownRequest_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShutDownRequest_sdklt_2eproto}, {}};

static void InitDefaultsscc_info_ShutDownState_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_ShutDownState_default_instance_;
    new (ptr) ::sdklt::ShutDownState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::ShutDownState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShutDownState_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShutDownState_sdklt_2eproto}, {}};

static void InitDefaultsscc_info_TableAction_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_TableAction_default_instance_;
    new (ptr) ::sdklt::TableAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::TableAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TableAction_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TableAction_sdklt_2eproto}, {
      &scc_info_Action_sdklt_2eproto.base,
      &scc_info_ActionProfileActionSet_sdklt_2eproto.base,}};

static void InitDefaultsscc_info_TableEntry_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_TableEntry_default_instance_;
    new (ptr) ::sdklt::TableEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::TableEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TableEntry_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TableEntry_sdklt_2eproto}, {
      &scc_info_FieldMatch_sdklt_2eproto.base,
      &scc_info_TableAction_sdklt_2eproto.base,
      &scc_info_TableEntry_IdleTimeout_sdklt_2eproto.base,}};

static void InitDefaultsscc_info_TableEntry_IdleTimeout_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_TableEntry_IdleTimeout_default_instance_;
    new (ptr) ::sdklt::TableEntry_IdleTimeout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::TableEntry_IdleTimeout::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableEntry_IdleTimeout_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TableEntry_IdleTimeout_sdklt_2eproto}, {}};

static void InitDefaultsscc_info_Uint128_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_Uint128_default_instance_;
    new (ptr) ::sdklt::Uint128();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::Uint128::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Uint128_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Uint128_sdklt_2eproto}, {}};

static void InitDefaultsscc_info_Update_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_Update_default_instance_;
    new (ptr) ::sdklt::Update();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::Update::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Update_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Update_sdklt_2eproto}, {
      &scc_info_Entity_sdklt_2eproto.base,}};

static void InitDefaultsscc_info_WriteRequest_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_WriteRequest_default_instance_;
    new (ptr) ::sdklt::WriteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::WriteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WriteRequest_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_WriteRequest_sdklt_2eproto}, {
      &scc_info_Uint128_sdklt_2eproto.base,
      &scc_info_Update_sdklt_2eproto.base,}};

static void InitDefaultsscc_info_WriteResponse_sdklt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdklt::_WriteResponse_default_instance_;
    new (ptr) ::sdklt::WriteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdklt::WriteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteResponse_sdklt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteResponse_sdklt_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sdklt_2eproto[27];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sdklt_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sdklt_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sdklt_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::ShellRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::ShellRequest, unit_),
  PROTOBUF_FIELD_OFFSET(::sdklt::ShellRequest, cmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::ShellState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::ShellState, message_),
  PROTOBUF_FIELD_OFFSET(::sdklt::ShellState, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::InitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::InitRequest, unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::InitState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::InitState, message_),
  PROTOBUF_FIELD_OFFSET(::sdklt::InitState, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::ShutDownRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::ShutDownRequest, graceful_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::ShutDownState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::ShutDownState, message_),
  PROTOBUF_FIELD_OFFSET(::sdklt::ShutDownState, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::ReadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::ReadRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::sdklt::ReadRequest, role_id_),
  PROTOBUF_FIELD_OFFSET(::sdklt::ReadRequest, lt_name_),
  PROTOBUF_FIELD_OFFSET(::sdklt::ReadRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::ReadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::ReadResponse, message_),
  PROTOBUF_FIELD_OFFSET(::sdklt::ReadResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::WriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::WriteRequest, device_id_),
  PROTOBUF_FIELD_OFFSET(::sdklt::WriteRequest, role_id_),
  PROTOBUF_FIELD_OFFSET(::sdklt::WriteRequest, election_id_),
  PROTOBUF_FIELD_OFFSET(::sdklt::WriteRequest, updates_),
  PROTOBUF_FIELD_OFFSET(::sdklt::WriteRequest, atomicity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::WriteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::WriteResponse, message_),
  PROTOBUF_FIELD_OFFSET(::sdklt::WriteResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::Update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::Update, type_),
  PROTOBUF_FIELD_OFFSET(::sdklt::Update, entity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::Entity, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sdklt::Entity, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::sdklt::EntityDefaultTypeInternal, table_entry_),
  PROTOBUF_FIELD_OFFSET(::sdklt::Entity, entity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::ExternEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::ExternEntry, extern_type_id_),
  PROTOBUF_FIELD_OFFSET(::sdklt::ExternEntry, extern_id_),
  PROTOBUF_FIELD_OFFSET(::sdklt::ExternEntry, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::TableEntry_IdleTimeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::TableEntry_IdleTimeout, elapsed_ns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::TableEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::TableEntry, table_id_),
  PROTOBUF_FIELD_OFFSET(::sdklt::TableEntry, match_),
  PROTOBUF_FIELD_OFFSET(::sdklt::TableEntry, action_),
  PROTOBUF_FIELD_OFFSET(::sdklt::TableEntry, priority_),
  PROTOBUF_FIELD_OFFSET(::sdklt::TableEntry, controller_metadata_),
  PROTOBUF_FIELD_OFFSET(::sdklt::TableEntry, is_default_action_),
  PROTOBUF_FIELD_OFFSET(::sdklt::TableEntry, idle_timeout_ns_),
  PROTOBUF_FIELD_OFFSET(::sdklt::TableEntry, time_since_last_hit_),
  PROTOBUF_FIELD_OFFSET(::sdklt::TableEntry, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::FieldMatch_Exact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::FieldMatch_Exact, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::FieldMatch_Ternary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::FieldMatch_Ternary, value_),
  PROTOBUF_FIELD_OFFSET(::sdklt::FieldMatch_Ternary, mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::FieldMatch_LPM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::FieldMatch_LPM, value_),
  PROTOBUF_FIELD_OFFSET(::sdklt::FieldMatch_LPM, prefix_len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::FieldMatch_Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::FieldMatch_Range, low_),
  PROTOBUF_FIELD_OFFSET(::sdklt::FieldMatch_Range, high_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::FieldMatch_Optional, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::FieldMatch_Optional, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::FieldMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sdklt::FieldMatch, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::FieldMatch, field_id_),
  offsetof(::sdklt::FieldMatchDefaultTypeInternal, exact_),
  offsetof(::sdklt::FieldMatchDefaultTypeInternal, ternary_),
  offsetof(::sdklt::FieldMatchDefaultTypeInternal, lpm_),
  offsetof(::sdklt::FieldMatchDefaultTypeInternal, range_),
  offsetof(::sdklt::FieldMatchDefaultTypeInternal, optional_),
  offsetof(::sdklt::FieldMatchDefaultTypeInternal, other_),
  PROTOBUF_FIELD_OFFSET(::sdklt::FieldMatch, field_match_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::TableAction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sdklt::TableAction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::sdklt::TableActionDefaultTypeInternal, action_),
  offsetof(::sdklt::TableActionDefaultTypeInternal, action_profile_member_id_),
  offsetof(::sdklt::TableActionDefaultTypeInternal, action_profile_group_id_),
  offsetof(::sdklt::TableActionDefaultTypeInternal, action_profile_action_set_),
  PROTOBUF_FIELD_OFFSET(::sdklt::TableAction, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::Action_Param, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::Action_Param, param_id_),
  PROTOBUF_FIELD_OFFSET(::sdklt::Action_Param, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::Action, action_id_),
  PROTOBUF_FIELD_OFFSET(::sdklt::Action, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::ActionProfileActionSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::ActionProfileActionSet, action_profile_actions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::ActionProfileAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::ActionProfileAction, action_),
  PROTOBUF_FIELD_OFFSET(::sdklt::ActionProfileAction, weight_),
  PROTOBUF_FIELD_OFFSET(::sdklt::ActionProfileAction, watch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdklt::Uint128, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdklt::Uint128, high_),
  PROTOBUF_FIELD_OFFSET(::sdklt::Uint128, low_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sdklt::ShellRequest)},
  { 7, -1, sizeof(::sdklt::ShellState)},
  { 14, -1, sizeof(::sdklt::InitRequest)},
  { 20, -1, sizeof(::sdklt::InitState)},
  { 27, -1, sizeof(::sdklt::ShutDownRequest)},
  { 33, -1, sizeof(::sdklt::ShutDownState)},
  { 40, -1, sizeof(::sdklt::ReadRequest)},
  { 49, -1, sizeof(::sdklt::ReadResponse)},
  { 56, -1, sizeof(::sdklt::WriteRequest)},
  { 66, -1, sizeof(::sdklt::WriteResponse)},
  { 73, -1, sizeof(::sdklt::Update)},
  { 80, -1, sizeof(::sdklt::Entity)},
  { 87, -1, sizeof(::sdklt::ExternEntry)},
  { 95, -1, sizeof(::sdklt::TableEntry_IdleTimeout)},
  { 101, -1, sizeof(::sdklt::TableEntry)},
  { 115, -1, sizeof(::sdklt::FieldMatch_Exact)},
  { 121, -1, sizeof(::sdklt::FieldMatch_Ternary)},
  { 128, -1, sizeof(::sdklt::FieldMatch_LPM)},
  { 135, -1, sizeof(::sdklt::FieldMatch_Range)},
  { 142, -1, sizeof(::sdklt::FieldMatch_Optional)},
  { 148, -1, sizeof(::sdklt::FieldMatch)},
  { 161, -1, sizeof(::sdklt::TableAction)},
  { 171, -1, sizeof(::sdklt::Action_Param)},
  { 178, -1, sizeof(::sdklt::Action)},
  { 185, -1, sizeof(::sdklt::ActionProfileActionSet)},
  { 191, -1, sizeof(::sdklt::ActionProfileAction)},
  { 199, -1, sizeof(::sdklt::Uint128)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_ShellRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_ShellState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_InitRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_InitState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_ShutDownRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_ShutDownState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_ReadRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_ReadResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_WriteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_WriteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_Update_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_Entity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_ExternEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_TableEntry_IdleTimeout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_TableEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_FieldMatch_Exact_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_FieldMatch_Ternary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_FieldMatch_LPM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_FieldMatch_Range_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_FieldMatch_Optional_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_FieldMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_TableAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_Action_Param_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_ActionProfileActionSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_ActionProfileAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdklt::_Uint128_default_instance_),
};

const char descriptor_table_protodef_sdklt_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013sdklt.proto\022\005sdklt\032\031google/protobuf/an"
  "y.proto\")\n\014ShellRequest\022\014\n\004unit\030\001 \001(\r\022\013\n"
  "\003cmd\030\002 \001(\t\".\n\nShellState\022\017\n\007message\030\001 \001("
  "\t\022\017\n\007success\030\002 \001(\010\"\033\n\013InitRequest\022\014\n\004uni"
  "t\030\001 \001(\r\"-\n\tInitState\022\017\n\007message\030\001 \001(\t\022\017\n"
  "\007success\030\002 \001(\010\"#\n\017ShutDownRequest\022\020\n\010gra"
  "ceful\030\001 \001(\010\"1\n\rShutDownState\022\017\n\007message\030"
  "\001 \001(\t\022\017\n\007success\030\002 \001(\010\"O\n\013ReadRequest\022\021\n"
  "\tdevice_id\030\001 \001(\004\022\017\n\007role_id\030\002 \001(\004\022\017\n\007lt_"
  "name\030\003 \001(\t\022\013\n\003key\030\004 \001(\t\"0\n\014ReadResponse\022"
  "\017\n\007message\030\001 \001(\t\022\017\n\007success\030\002 \001(\010\"\372\001\n\014Wr"
  "iteRequest\022\021\n\tdevice_id\030\001 \001(\004\022\017\n\007role_id"
  "\030\002 \001(\004\022#\n\013election_id\030\003 \001(\0132\016.sdklt.Uint"
  "128\022\036\n\007updates\030\004 \003(\0132\r.sdklt.Update\0220\n\ta"
  "tomicity\030\005 \001(\0162\035.sdklt.WriteRequest.Atom"
  "icity\"O\n\tAtomicity\022\025\n\021CONTINUE_ON_ERROR\020"
  "\000\022\025\n\021ROLLBACK_ON_ERROR\020\001\022\024\n\020DATAPLANE_AT"
  "OMIC\020\002\"1\n\rWriteResponse\022\017\n\007message\030\001 \001(\t"
  "\022\017\n\007success\030\002 \001(\010\"\224\001\n\006Update\022 \n\004type\030\001 \001"
  "(\0162\022.sdklt.Update.Type\022\035\n\006entity\030\002 \001(\0132\r"
  ".sdklt.Entity\"I\n\004Type\022\017\n\013UNSPECIFIED\020\000\022\n"
  "\n\006INSERT\020\001\022\n\n\006MODIFY\020\002\022\n\n\006DELETE\020\003\022\014\n\010TR"
  "AVERSE\020\004\"<\n\006Entity\022(\n\013table_entry\030\002 \001(\0132"
  "\021.sdklt.TableEntryH\000B\010\n\006entity\"]\n\013Extern"
  "Entry\022\026\n\016extern_type_id\030\001 \001(\r\022\021\n\textern_"
  "id\030\002 \001(\r\022#\n\005entry\030\003 \001(\0132\024.google.protobu"
  "f.Any\"\274\002\n\nTableEntry\022\020\n\010table_id\030\001 \001(\r\022 "
  "\n\005match\030\002 \003(\0132\021.sdklt.FieldMatch\022\"\n\006acti"
  "on\030\003 \001(\0132\022.sdklt.TableAction\022\020\n\010priority"
  "\030\004 \001(\005\022\037\n\023controller_metadata\030\005 \001(\004B\002\030\001\022"
  "\031\n\021is_default_action\030\010 \001(\010\022\027\n\017idle_timeo"
  "ut_ns\030\t \001(\003\022:\n\023time_since_last_hit\030\n \001(\013"
  "2\035.sdklt.TableEntry.IdleTimeout\022\020\n\010metad"
  "ata\030\013 \001(\014\032!\n\013IdleTimeout\022\022\n\nelapsed_ns\030\001"
  " \001(\003\"\332\003\n\nFieldMatch\022\020\n\010field_id\030\001 \001(\r\022(\n"
  "\005exact\030\002 \001(\0132\027.sdklt.FieldMatch.ExactH\000\022"
  ",\n\007ternary\030\003 \001(\0132\031.sdklt.FieldMatch.Tern"
  "aryH\000\022$\n\003lpm\030\004 \001(\0132\025.sdklt.FieldMatch.LP"
  "MH\000\022(\n\005range\030\006 \001(\0132\027.sdklt.FieldMatch.Ra"
  "ngeH\000\022.\n\010optional\030\007 \001(\0132\032.sdklt.FieldMat"
  "ch.OptionalH\000\022%\n\005other\030d \001(\0132\024.google.pr"
  "otobuf.AnyH\000\032\026\n\005Exact\022\r\n\005value\030\001 \001(\014\032&\n\007"
  "Ternary\022\r\n\005value\030\001 \001(\014\022\014\n\004mask\030\002 \001(\014\032(\n\003"
  "LPM\022\r\n\005value\030\001 \001(\014\022\022\n\nprefix_len\030\002 \001(\005\032\""
  "\n\005Range\022\013\n\003low\030\001 \001(\014\022\014\n\004high\030\002 \001(\014\032\031\n\010Op"
  "tional\022\r\n\005value\030\001 \001(\014B\022\n\020field_match_typ"
  "e\"\301\001\n\013TableAction\022\037\n\006action\030\001 \001(\0132\r.sdkl"
  "t.ActionH\000\022\"\n\030action_profile_member_id\030\002"
  " \001(\rH\000\022!\n\027action_profile_group_id\030\003 \001(\rH"
  "\000\022B\n\031action_profile_action_set\030\004 \001(\0132\035.s"
  "dklt.ActionProfileActionSetH\000B\006\n\004type\"j\n"
  "\006Action\022\021\n\taction_id\030\001 \001(\r\022#\n\006params\030\004 \003"
  "(\0132\023.sdklt.Action.Param\032(\n\005Param\022\020\n\010para"
  "m_id\030\002 \001(\r\022\r\n\005value\030\003 \001(\014\"T\n\026ActionProfi"
  "leActionSet\022:\n\026action_profile_actions\030\001 "
  "\003(\0132\032.sdklt.ActionProfileAction\"S\n\023Actio"
  "nProfileAction\022\035\n\006action\030\001 \001(\0132\r.sdklt.A"
  "ction\022\016\n\006weight\030\002 \001(\005\022\r\n\005watch\030\003 \001(\005\"$\n\007"
  "Uint128\022\014\n\004high\030\001 \001(\004\022\013\n\003low\030\002 \001(\0042\236\002\n\003A"
  "pi\0221\n\007bcmInit\022\022.sdklt.InitRequest\032\020.sdkl"
  "t.InitState\"\000\0224\n\010bcmShell\022\023.sdklt.ShellR"
  "equest\032\021.sdklt.ShellState\"\000\022=\n\013bcmShutdo"
  "wn\022\026.sdklt.ShutDownRequest\032\024.sdklt.ShutD"
  "ownState\"\000\0228\n\topenWrite\022\023.sdklt.WriteReq"
  "uest\032\024.sdklt.WriteResponse\"\000\0225\n\010openRead"
  "\022\022.sdklt.ReadRequest\032\023.sdklt.ReadRespons"
  "e\"\000B$\n\rio.grpc.sdkltB\nSdkLtProtoP\001\242\002\004SDL"
  "Kb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sdklt_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sdklt_2eproto_sccs[27] = {
  &scc_info_Action_sdklt_2eproto.base,
  &scc_info_Action_Param_sdklt_2eproto.base,
  &scc_info_ActionProfileAction_sdklt_2eproto.base,
  &scc_info_ActionProfileActionSet_sdklt_2eproto.base,
  &scc_info_Entity_sdklt_2eproto.base,
  &scc_info_ExternEntry_sdklt_2eproto.base,
  &scc_info_FieldMatch_sdklt_2eproto.base,
  &scc_info_FieldMatch_Exact_sdklt_2eproto.base,
  &scc_info_FieldMatch_LPM_sdklt_2eproto.base,
  &scc_info_FieldMatch_Optional_sdklt_2eproto.base,
  &scc_info_FieldMatch_Range_sdklt_2eproto.base,
  &scc_info_FieldMatch_Ternary_sdklt_2eproto.base,
  &scc_info_InitRequest_sdklt_2eproto.base,
  &scc_info_InitState_sdklt_2eproto.base,
  &scc_info_ReadRequest_sdklt_2eproto.base,
  &scc_info_ReadResponse_sdklt_2eproto.base,
  &scc_info_ShellRequest_sdklt_2eproto.base,
  &scc_info_ShellState_sdklt_2eproto.base,
  &scc_info_ShutDownRequest_sdklt_2eproto.base,
  &scc_info_ShutDownState_sdklt_2eproto.base,
  &scc_info_TableAction_sdklt_2eproto.base,
  &scc_info_TableEntry_sdklt_2eproto.base,
  &scc_info_TableEntry_IdleTimeout_sdklt_2eproto.base,
  &scc_info_Uint128_sdklt_2eproto.base,
  &scc_info_Update_sdklt_2eproto.base,
  &scc_info_WriteRequest_sdklt_2eproto.base,
  &scc_info_WriteResponse_sdklt_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sdklt_2eproto_once;
static bool descriptor_table_sdklt_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdklt_2eproto = {
  &descriptor_table_sdklt_2eproto_initialized, descriptor_table_protodef_sdklt_2eproto, "sdklt.proto", 2689,
  &descriptor_table_sdklt_2eproto_once, descriptor_table_sdklt_2eproto_sccs, descriptor_table_sdklt_2eproto_deps, 27, 1,
  schemas, file_default_instances, TableStruct_sdklt_2eproto::offsets,
  file_level_metadata_sdklt_2eproto, 27, file_level_enum_descriptors_sdklt_2eproto, file_level_service_descriptors_sdklt_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sdklt_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sdklt_2eproto), true);
namespace sdklt {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriteRequest_Atomicity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sdklt_2eproto);
  return file_level_enum_descriptors_sdklt_2eproto[0];
}
bool WriteRequest_Atomicity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WriteRequest_Atomicity WriteRequest::CONTINUE_ON_ERROR;
constexpr WriteRequest_Atomicity WriteRequest::ROLLBACK_ON_ERROR;
constexpr WriteRequest_Atomicity WriteRequest::DATAPLANE_ATOMIC;
constexpr WriteRequest_Atomicity WriteRequest::Atomicity_MIN;
constexpr WriteRequest_Atomicity WriteRequest::Atomicity_MAX;
constexpr int WriteRequest::Atomicity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Update_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sdklt_2eproto);
  return file_level_enum_descriptors_sdklt_2eproto[1];
}
bool Update_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Update_Type Update::UNSPECIFIED;
constexpr Update_Type Update::INSERT;
constexpr Update_Type Update::MODIFY;
constexpr Update_Type Update::DELETE;
constexpr Update_Type Update::TRAVERSE;
constexpr Update_Type Update::Type_MIN;
constexpr Update_Type Update::Type_MAX;
constexpr int Update::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ShellRequest::InitAsDefaultInstance() {
}
class ShellRequest::_Internal {
 public:
};

ShellRequest::ShellRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.ShellRequest)
}
ShellRequest::ShellRequest(const ShellRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cmd().empty()) {
    cmd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  unit_ = from.unit_;
  // @@protoc_insertion_point(copy_constructor:sdklt.ShellRequest)
}

void ShellRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellRequest_sdklt_2eproto.base);
  cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_ = 0u;
}

ShellRequest::~ShellRequest() {
  // @@protoc_insertion_point(destructor:sdklt.ShellRequest)
  SharedDtor();
}

void ShellRequest::SharedDtor() {
  cmd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShellRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellRequest& ShellRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellRequest_sdklt_2eproto.base);
  return *internal_default_instance();
}


void ShellRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.ShellRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_ = 0u;
  _internal_metadata_.Clear();
}

const char* ShellRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cmd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sdklt.ShellRequest.cmd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.ShellRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 unit = 1;
  if (this->unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_unit(), target);
  }

  // string cmd = 2;
  if (this->cmd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cmd().data(), static_cast<int>(this->_internal_cmd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sdklt.ShellRequest.cmd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.ShellRequest)
  return target;
}

size_t ShellRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.ShellRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cmd = 2;
  if (this->cmd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cmd());
  }

  // uint32 unit = 1;
  if (this->unit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.ShellRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.ShellRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.ShellRequest)
    MergeFrom(*source);
  }
}

void ShellRequest::MergeFrom(const ShellRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.ShellRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmd().size() > 0) {

    cmd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  if (from.unit() != 0) {
    _internal_set_unit(from._internal_unit());
  }
}

void ShellRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.ShellRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellRequest::CopyFrom(const ShellRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.ShellRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellRequest::IsInitialized() const {
  return true;
}

void ShellRequest::InternalSwap(ShellRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cmd_.Swap(&other->cmd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(unit_, other->unit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellState::InitAsDefaultInstance() {
}
class ShellState::_Internal {
 public:
};

ShellState::ShellState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.ShellState)
}
ShellState::ShellState(const ShellState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:sdklt.ShellState)
}

void ShellState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellState_sdklt_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

ShellState::~ShellState() {
  // @@protoc_insertion_point(destructor:sdklt.ShellState)
  SharedDtor();
}

void ShellState::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShellState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellState& ShellState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellState_sdklt_2eproto.base);
  return *internal_default_instance();
}


void ShellState::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.ShellState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

const char* ShellState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sdklt.ShellState.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShellState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.ShellState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sdklt.ShellState.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.ShellState)
  return target;
}

size_t ShellState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.ShellState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.ShellState)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.ShellState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.ShellState)
    MergeFrom(*source);
  }
}

void ShellState::MergeFrom(const ShellState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.ShellState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ShellState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.ShellState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellState::CopyFrom(const ShellState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.ShellState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellState::IsInitialized() const {
  return true;
}

void ShellState::InternalSwap(ShellState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InitRequest::InitAsDefaultInstance() {
}
class InitRequest::_Internal {
 public:
};

InitRequest::InitRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.InitRequest)
}
InitRequest::InitRequest(const InitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unit_ = from.unit_;
  // @@protoc_insertion_point(copy_constructor:sdklt.InitRequest)
}

void InitRequest::SharedCtor() {
  unit_ = 0u;
}

InitRequest::~InitRequest() {
  // @@protoc_insertion_point(destructor:sdklt.InitRequest)
  SharedDtor();
}

void InitRequest::SharedDtor() {
}

void InitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitRequest& InitRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitRequest_sdklt_2eproto.base);
  return *internal_default_instance();
}


void InitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.InitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_ = 0u;
  _internal_metadata_.Clear();
}

const char* InitRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.InitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 unit = 1;
  if (this->unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.InitRequest)
  return target;
}

size_t InitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.InitRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 unit = 1;
  if (this->unit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.InitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InitRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.InitRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.InitRequest)
    MergeFrom(*source);
  }
}

void InitRequest::MergeFrom(const InitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.InitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unit() != 0) {
    _internal_set_unit(from._internal_unit());
  }
}

void InitRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRequest::CopyFrom(const InitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRequest::IsInitialized() const {
  return true;
}

void InitRequest::InternalSwap(InitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(unit_, other->unit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InitState::InitAsDefaultInstance() {
}
class InitState::_Internal {
 public:
};

InitState::InitState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.InitState)
}
InitState::InitState(const InitState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:sdklt.InitState)
}

void InitState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitState_sdklt_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

InitState::~InitState() {
  // @@protoc_insertion_point(destructor:sdklt.InitState)
  SharedDtor();
}

void InitState::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitState& InitState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitState_sdklt_2eproto.base);
  return *internal_default_instance();
}


void InitState::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.InitState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

const char* InitState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sdklt.InitState.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.InitState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sdklt.InitState.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.InitState)
  return target;
}

size_t InitState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.InitState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.InitState)
  GOOGLE_DCHECK_NE(&from, this);
  const InitState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.InitState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.InitState)
    MergeFrom(*source);
  }
}

void InitState::MergeFrom(const InitState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.InitState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void InitState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.InitState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitState::CopyFrom(const InitState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.InitState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitState::IsInitialized() const {
  return true;
}

void InitState::InternalSwap(InitState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShutDownRequest::InitAsDefaultInstance() {
}
class ShutDownRequest::_Internal {
 public:
};

ShutDownRequest::ShutDownRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.ShutDownRequest)
}
ShutDownRequest::ShutDownRequest(const ShutDownRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  graceful_ = from.graceful_;
  // @@protoc_insertion_point(copy_constructor:sdklt.ShutDownRequest)
}

void ShutDownRequest::SharedCtor() {
  graceful_ = false;
}

ShutDownRequest::~ShutDownRequest() {
  // @@protoc_insertion_point(destructor:sdklt.ShutDownRequest)
  SharedDtor();
}

void ShutDownRequest::SharedDtor() {
}

void ShutDownRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShutDownRequest& ShutDownRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShutDownRequest_sdklt_2eproto.base);
  return *internal_default_instance();
}


void ShutDownRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.ShutDownRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graceful_ = false;
  _internal_metadata_.Clear();
}

const char* ShutDownRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool graceful = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          graceful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShutDownRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.ShutDownRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool graceful = 1;
  if (this->graceful() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_graceful(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.ShutDownRequest)
  return target;
}

size_t ShutDownRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.ShutDownRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool graceful = 1;
  if (this->graceful() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShutDownRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.ShutDownRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShutDownRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShutDownRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.ShutDownRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.ShutDownRequest)
    MergeFrom(*source);
  }
}

void ShutDownRequest::MergeFrom(const ShutDownRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.ShutDownRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.graceful() != 0) {
    _internal_set_graceful(from._internal_graceful());
  }
}

void ShutDownRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.ShutDownRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutDownRequest::CopyFrom(const ShutDownRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.ShutDownRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutDownRequest::IsInitialized() const {
  return true;
}

void ShutDownRequest::InternalSwap(ShutDownRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(graceful_, other->graceful_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShutDownRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShutDownState::InitAsDefaultInstance() {
}
class ShutDownState::_Internal {
 public:
};

ShutDownState::ShutDownState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.ShutDownState)
}
ShutDownState::ShutDownState(const ShutDownState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:sdklt.ShutDownState)
}

void ShutDownState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShutDownState_sdklt_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

ShutDownState::~ShutDownState() {
  // @@protoc_insertion_point(destructor:sdklt.ShutDownState)
  SharedDtor();
}

void ShutDownState::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShutDownState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShutDownState& ShutDownState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShutDownState_sdklt_2eproto.base);
  return *internal_default_instance();
}


void ShutDownState::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.ShutDownState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

const char* ShutDownState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sdklt.ShutDownState.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShutDownState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.ShutDownState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sdklt.ShutDownState.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.ShutDownState)
  return target;
}

size_t ShutDownState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.ShutDownState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShutDownState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.ShutDownState)
  GOOGLE_DCHECK_NE(&from, this);
  const ShutDownState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShutDownState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.ShutDownState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.ShutDownState)
    MergeFrom(*source);
  }
}

void ShutDownState::MergeFrom(const ShutDownState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.ShutDownState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ShutDownState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.ShutDownState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutDownState::CopyFrom(const ShutDownState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.ShutDownState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutDownState::IsInitialized() const {
  return true;
}

void ShutDownState::InternalSwap(ShutDownState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShutDownState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadRequest::InitAsDefaultInstance() {
}
class ReadRequest::_Internal {
 public:
};

ReadRequest::ReadRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.ReadRequest)
}
ReadRequest::ReadRequest(const ReadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lt_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lt_name().empty()) {
    lt_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lt_name_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&device_id_, &from.device_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_id_) -
    reinterpret_cast<char*>(&device_id_)) + sizeof(role_id_));
  // @@protoc_insertion_point(copy_constructor:sdklt.ReadRequest)
}

void ReadRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadRequest_sdklt_2eproto.base);
  lt_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&device_id_)) + sizeof(role_id_));
}

ReadRequest::~ReadRequest() {
  // @@protoc_insertion_point(destructor:sdklt.ReadRequest)
  SharedDtor();
}

void ReadRequest::SharedDtor() {
  lt_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadRequest& ReadRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadRequest_sdklt_2eproto.base);
  return *internal_default_instance();
}


void ReadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.ReadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lt_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_id_) -
      reinterpret_cast<char*>(&device_id_)) + sizeof(role_id_));
  _internal_metadata_.Clear();
}

const char* ReadRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lt_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_lt_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sdklt.ReadRequest.lt_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sdklt.ReadRequest.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.ReadRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 device_id = 1;
  if (this->device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_device_id(), target);
  }

  // uint64 role_id = 2;
  if (this->role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_role_id(), target);
  }

  // string lt_name = 3;
  if (this->lt_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lt_name().data(), static_cast<int>(this->_internal_lt_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sdklt.ReadRequest.lt_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lt_name(), target);
  }

  // string key = 4;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sdklt.ReadRequest.key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.ReadRequest)
  return target;
}

size_t ReadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.ReadRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lt_name = 3;
  if (this->lt_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lt_name());
  }

  // string key = 4;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // uint64 device_id = 1;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_device_id());
  }

  // uint64 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_role_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.ReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.ReadRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.ReadRequest)
    MergeFrom(*source);
  }
}

void ReadRequest::MergeFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.ReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lt_name().size() > 0) {

    lt_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lt_name_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.device_id() != 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
}

void ReadRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRequest::CopyFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRequest::IsInitialized() const {
  return true;
}

void ReadRequest::InternalSwap(ReadRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lt_name_.Swap(&other->lt_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(device_id_, other->device_id_);
  swap(role_id_, other->role_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadResponse::InitAsDefaultInstance() {
}
class ReadResponse::_Internal {
 public:
};

ReadResponse::ReadResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.ReadResponse)
}
ReadResponse::ReadResponse(const ReadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:sdklt.ReadResponse)
}

void ReadResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadResponse_sdklt_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

ReadResponse::~ReadResponse() {
  // @@protoc_insertion_point(destructor:sdklt.ReadResponse)
  SharedDtor();
}

void ReadResponse::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadResponse& ReadResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadResponse_sdklt_2eproto.base);
  return *internal_default_instance();
}


void ReadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.ReadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

const char* ReadResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sdklt.ReadResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.ReadResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sdklt.ReadResponse.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.ReadResponse)
  return target;
}

size_t ReadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.ReadResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.ReadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.ReadResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.ReadResponse)
    MergeFrom(*source);
  }
}

void ReadResponse::MergeFrom(const ReadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.ReadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ReadResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.ReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadResponse::CopyFrom(const ReadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.ReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResponse::IsInitialized() const {
  return true;
}

void ReadResponse::InternalSwap(ReadResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WriteRequest::InitAsDefaultInstance() {
  ::sdklt::_WriteRequest_default_instance_._instance.get_mutable()->election_id_ = const_cast< ::sdklt::Uint128*>(
      ::sdklt::Uint128::internal_default_instance());
}
class WriteRequest::_Internal {
 public:
  static const ::sdklt::Uint128& election_id(const WriteRequest* msg);
};

const ::sdklt::Uint128&
WriteRequest::_Internal::election_id(const WriteRequest* msg) {
  return *msg->election_id_;
}
WriteRequest::WriteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.WriteRequest)
}
WriteRequest::WriteRequest(const WriteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_election_id()) {
    election_id_ = new ::sdklt::Uint128(*from.election_id_);
  } else {
    election_id_ = nullptr;
  }
  ::memcpy(&device_id_, &from.device_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&atomicity_) -
    reinterpret_cast<char*>(&device_id_)) + sizeof(atomicity_));
  // @@protoc_insertion_point(copy_constructor:sdklt.WriteRequest)
}

void WriteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteRequest_sdklt_2eproto.base);
  ::memset(&election_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atomicity_) -
      reinterpret_cast<char*>(&election_id_)) + sizeof(atomicity_));
}

WriteRequest::~WriteRequest() {
  // @@protoc_insertion_point(destructor:sdklt.WriteRequest)
  SharedDtor();
}

void WriteRequest::SharedDtor() {
  if (this != internal_default_instance()) delete election_id_;
}

void WriteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteRequest& WriteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteRequest_sdklt_2eproto.base);
  return *internal_default_instance();
}


void WriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.WriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  if (GetArenaNoVirtual() == nullptr && election_id_ != nullptr) {
    delete election_id_;
  }
  election_id_ = nullptr;
  ::memset(&device_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atomicity_) -
      reinterpret_cast<char*>(&device_id_)) + sizeof(atomicity_));
  _internal_metadata_.Clear();
}

const char* WriteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sdklt.Uint128 election_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_election_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sdklt.Update updates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .sdklt.WriteRequest.Atomicity atomicity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_atomicity(static_cast<::sdklt::WriteRequest_Atomicity>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.WriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 device_id = 1;
  if (this->device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_device_id(), target);
  }

  // uint64 role_id = 2;
  if (this->role_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_role_id(), target);
  }

  // .sdklt.Uint128 election_id = 3;
  if (this->has_election_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::election_id(this), target, stream);
  }

  // repeated .sdklt.Update updates = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_updates(i), target, stream);
  }

  // .sdklt.WriteRequest.Atomicity atomicity = 5;
  if (this->atomicity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_atomicity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.WriteRequest)
  return target;
}

size_t WriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.WriteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sdklt.Update updates = 4;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .sdklt.Uint128 election_id = 3;
  if (this->has_election_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *election_id_);
  }

  // uint64 device_id = 1;
  if (this->device_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_device_id());
  }

  // uint64 role_id = 2;
  if (this->role_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_role_id());
  }

  // .sdklt.WriteRequest.Atomicity atomicity = 5;
  if (this->atomicity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_atomicity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.WriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.WriteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.WriteRequest)
    MergeFrom(*source);
  }
}

void WriteRequest::MergeFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.WriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
  if (from.has_election_id()) {
    _internal_mutable_election_id()->::sdklt::Uint128::MergeFrom(from._internal_election_id());
  }
  if (from.device_id() != 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.role_id() != 0) {
    _internal_set_role_id(from._internal_role_id());
  }
  if (from.atomicity() != 0) {
    _internal_set_atomicity(from._internal_atomicity());
  }
}

void WriteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.WriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteRequest::CopyFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.WriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteRequest::IsInitialized() const {
  return true;
}

void WriteRequest::InternalSwap(WriteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  updates_.InternalSwap(&other->updates_);
  swap(election_id_, other->election_id_);
  swap(device_id_, other->device_id_);
  swap(role_id_, other->role_id_);
  swap(atomicity_, other->atomicity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WriteResponse::InitAsDefaultInstance() {
}
class WriteResponse::_Internal {
 public:
};

WriteResponse::WriteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.WriteResponse)
}
WriteResponse::WriteResponse(const WriteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:sdklt.WriteResponse)
}

void WriteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteResponse_sdklt_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

WriteResponse::~WriteResponse() {
  // @@protoc_insertion_point(destructor:sdklt.WriteResponse)
  SharedDtor();
}

void WriteResponse::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteResponse& WriteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteResponse_sdklt_2eproto.base);
  return *internal_default_instance();
}


void WriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.WriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

const char* WriteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sdklt.WriteResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.WriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sdklt.WriteResponse.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.WriteResponse)
  return target;
}

size_t WriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.WriteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.WriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.WriteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.WriteResponse)
    MergeFrom(*source);
  }
}

void WriteResponse::MergeFrom(const WriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.WriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void WriteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.WriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteResponse::CopyFrom(const WriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.WriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteResponse::IsInitialized() const {
  return true;
}

void WriteResponse::InternalSwap(WriteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Update::InitAsDefaultInstance() {
  ::sdklt::_Update_default_instance_._instance.get_mutable()->entity_ = const_cast< ::sdklt::Entity*>(
      ::sdklt::Entity::internal_default_instance());
}
class Update::_Internal {
 public:
  static const ::sdklt::Entity& entity(const Update* msg);
};

const ::sdklt::Entity&
Update::_Internal::entity(const Update* msg) {
  return *msg->entity_;
}
Update::Update()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.Update)
}
Update::Update(const Update& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_entity()) {
    entity_ = new ::sdklt::Entity(*from.entity_);
  } else {
    entity_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sdklt.Update)
}

void Update::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Update_sdklt_2eproto.base);
  ::memset(&entity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&entity_)) + sizeof(type_));
}

Update::~Update() {
  // @@protoc_insertion_point(destructor:sdklt.Update)
  SharedDtor();
}

void Update::SharedDtor() {
  if (this != internal_default_instance()) delete entity_;
}

void Update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Update& Update::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Update_sdklt_2eproto.base);
  return *internal_default_instance();
}


void Update::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.Update)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && entity_ != nullptr) {
    delete entity_;
  }
  entity_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* Update::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sdklt.Update.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sdklt::Update_Type>(val));
        } else goto handle_unusual;
        continue;
      // .sdklt.Entity entity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Update::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.Update)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sdklt.Update.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .sdklt.Entity entity = 2;
  if (this->has_entity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::entity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.Update)
  return target;
}

size_t Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.Update)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sdklt.Entity entity = 2;
  if (this->has_entity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_);
  }

  // .sdklt.Update.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Update::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.Update)
  GOOGLE_DCHECK_NE(&from, this);
  const Update* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Update>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.Update)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.Update)
    MergeFrom(*source);
  }
}

void Update::MergeFrom(const Update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.Update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_entity()) {
    _internal_mutable_entity()->::sdklt::Entity::MergeFrom(from._internal_entity());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Update::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Update::CopyFrom(const Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Update::IsInitialized() const {
  return true;
}

void Update::InternalSwap(Update* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(entity_, other->entity_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Update::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Entity::InitAsDefaultInstance() {
  ::sdklt::_Entity_default_instance_.table_entry_ = const_cast< ::sdklt::TableEntry*>(
      ::sdklt::TableEntry::internal_default_instance());
}
class Entity::_Internal {
 public:
  static const ::sdklt::TableEntry& table_entry(const Entity* msg);
};

const ::sdklt::TableEntry&
Entity::_Internal::table_entry(const Entity* msg) {
  return *msg->entity_.table_entry_;
}
void Entity::set_allocated_table_entry(::sdklt::TableEntry* table_entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_entity();
  if (table_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      table_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_entry, submessage_arena);
    }
    set_has_table_entry();
    entity_.table_entry_ = table_entry;
  }
  // @@protoc_insertion_point(field_set_allocated:sdklt.Entity.table_entry)
}
Entity::Entity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.Entity)
}
Entity::Entity(const Entity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_entity();
  switch (from.entity_case()) {
    case kTableEntry: {
      _internal_mutable_table_entry()->::sdklt::TableEntry::MergeFrom(from._internal_table_entry());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sdklt.Entity)
}

void Entity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Entity_sdklt_2eproto.base);
  clear_has_entity();
}

Entity::~Entity() {
  // @@protoc_insertion_point(destructor:sdklt.Entity)
  SharedDtor();
}

void Entity::SharedDtor() {
  if (has_entity()) {
    clear_entity();
  }
}

void Entity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Entity& Entity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Entity_sdklt_2eproto.base);
  return *internal_default_instance();
}


void Entity::clear_entity() {
// @@protoc_insertion_point(one_of_clear_start:sdklt.Entity)
  switch (entity_case()) {
    case kTableEntry: {
      delete entity_.table_entry_;
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTITY_NOT_SET;
}


void Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.Entity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_entity();
  _internal_metadata_.Clear();
}

const char* Entity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sdklt.TableEntry table_entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Entity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.Entity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sdklt.TableEntry table_entry = 2;
  if (_internal_has_table_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::table_entry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.Entity)
  return target;
}

size_t Entity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.Entity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (entity_case()) {
    // .sdklt.TableEntry table_entry = 2;
    case kTableEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entity_.table_entry_);
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.Entity)
  GOOGLE_DCHECK_NE(&from, this);
  const Entity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Entity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.Entity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.Entity)
    MergeFrom(*source);
  }
}

void Entity::MergeFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.Entity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.entity_case()) {
    case kTableEntry: {
      _internal_mutable_table_entry()->::sdklt::TableEntry::MergeFrom(from._internal_table_entry());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
}

void Entity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity::CopyFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {
  return true;
}

void Entity::InternalSwap(Entity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(entity_, other->entity_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Entity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExternEntry::InitAsDefaultInstance() {
  ::sdklt::_ExternEntry_default_instance_._instance.get_mutable()->entry_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class ExternEntry::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& entry(const ExternEntry* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
ExternEntry::_Internal::entry(const ExternEntry* msg) {
  return *msg->entry_;
}
void ExternEntry::clear_entry() {
  if (GetArenaNoVirtual() == nullptr && entry_ != nullptr) {
    delete entry_;
  }
  entry_ = nullptr;
}
ExternEntry::ExternEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.ExternEntry)
}
ExternEntry::ExternEntry(const ExternEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_entry()) {
    entry_ = new PROTOBUF_NAMESPACE_ID::Any(*from.entry_);
  } else {
    entry_ = nullptr;
  }
  ::memcpy(&extern_type_id_, &from.extern_type_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&extern_id_) -
    reinterpret_cast<char*>(&extern_type_id_)) + sizeof(extern_id_));
  // @@protoc_insertion_point(copy_constructor:sdklt.ExternEntry)
}

void ExternEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExternEntry_sdklt_2eproto.base);
  ::memset(&entry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extern_id_) -
      reinterpret_cast<char*>(&entry_)) + sizeof(extern_id_));
}

ExternEntry::~ExternEntry() {
  // @@protoc_insertion_point(destructor:sdklt.ExternEntry)
  SharedDtor();
}

void ExternEntry::SharedDtor() {
  if (this != internal_default_instance()) delete entry_;
}

void ExternEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExternEntry& ExternEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExternEntry_sdklt_2eproto.base);
  return *internal_default_instance();
}


void ExternEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.ExternEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && entry_ != nullptr) {
    delete entry_;
  }
  entry_ = nullptr;
  ::memset(&extern_type_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extern_id_) -
      reinterpret_cast<char*>(&extern_type_id_)) + sizeof(extern_id_));
  _internal_metadata_.Clear();
}

const char* ExternEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 extern_type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          extern_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 extern_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          extern_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any entry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExternEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.ExternEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 extern_type_id = 1;
  if (this->extern_type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extern_type_id(), target);
  }

  // uint32 extern_id = 2;
  if (this->extern_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_extern_id(), target);
  }

  // .google.protobuf.Any entry = 3;
  if (this->has_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::entry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.ExternEntry)
  return target;
}

size_t ExternEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.ExternEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any entry = 3;
  if (this->has_entry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entry_);
  }

  // uint32 extern_type_id = 1;
  if (this->extern_type_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_extern_type_id());
  }

  // uint32 extern_id = 2;
  if (this->extern_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_extern_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExternEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.ExternEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const ExternEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExternEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.ExternEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.ExternEntry)
    MergeFrom(*source);
  }
}

void ExternEntry::MergeFrom(const ExternEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.ExternEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_entry()) {
    _internal_mutable_entry()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_entry());
  }
  if (from.extern_type_id() != 0) {
    _internal_set_extern_type_id(from._internal_extern_type_id());
  }
  if (from.extern_id() != 0) {
    _internal_set_extern_id(from._internal_extern_id());
  }
}

void ExternEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.ExternEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternEntry::CopyFrom(const ExternEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.ExternEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternEntry::IsInitialized() const {
  return true;
}

void ExternEntry::InternalSwap(ExternEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(entry_, other->entry_);
  swap(extern_type_id_, other->extern_type_id_);
  swap(extern_id_, other->extern_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExternEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableEntry_IdleTimeout::InitAsDefaultInstance() {
}
class TableEntry_IdleTimeout::_Internal {
 public:
};

TableEntry_IdleTimeout::TableEntry_IdleTimeout()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.TableEntry.IdleTimeout)
}
TableEntry_IdleTimeout::TableEntry_IdleTimeout(const TableEntry_IdleTimeout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  elapsed_ns_ = from.elapsed_ns_;
  // @@protoc_insertion_point(copy_constructor:sdklt.TableEntry.IdleTimeout)
}

void TableEntry_IdleTimeout::SharedCtor() {
  elapsed_ns_ = PROTOBUF_LONGLONG(0);
}

TableEntry_IdleTimeout::~TableEntry_IdleTimeout() {
  // @@protoc_insertion_point(destructor:sdklt.TableEntry.IdleTimeout)
  SharedDtor();
}

void TableEntry_IdleTimeout::SharedDtor() {
}

void TableEntry_IdleTimeout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableEntry_IdleTimeout& TableEntry_IdleTimeout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableEntry_IdleTimeout_sdklt_2eproto.base);
  return *internal_default_instance();
}


void TableEntry_IdleTimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.TableEntry.IdleTimeout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elapsed_ns_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* TableEntry_IdleTimeout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 elapsed_ns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          elapsed_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableEntry_IdleTimeout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.TableEntry.IdleTimeout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 elapsed_ns = 1;
  if (this->elapsed_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_elapsed_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.TableEntry.IdleTimeout)
  return target;
}

size_t TableEntry_IdleTimeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.TableEntry.IdleTimeout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 elapsed_ns = 1;
  if (this->elapsed_ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_elapsed_ns());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableEntry_IdleTimeout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.TableEntry.IdleTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  const TableEntry_IdleTimeout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableEntry_IdleTimeout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.TableEntry.IdleTimeout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.TableEntry.IdleTimeout)
    MergeFrom(*source);
  }
}

void TableEntry_IdleTimeout::MergeFrom(const TableEntry_IdleTimeout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.TableEntry.IdleTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.elapsed_ns() != 0) {
    _internal_set_elapsed_ns(from._internal_elapsed_ns());
  }
}

void TableEntry_IdleTimeout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.TableEntry.IdleTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableEntry_IdleTimeout::CopyFrom(const TableEntry_IdleTimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.TableEntry.IdleTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableEntry_IdleTimeout::IsInitialized() const {
  return true;
}

void TableEntry_IdleTimeout::InternalSwap(TableEntry_IdleTimeout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(elapsed_ns_, other->elapsed_ns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableEntry_IdleTimeout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableEntry::InitAsDefaultInstance() {
  ::sdklt::_TableEntry_default_instance_._instance.get_mutable()->action_ = const_cast< ::sdklt::TableAction*>(
      ::sdklt::TableAction::internal_default_instance());
  ::sdklt::_TableEntry_default_instance_._instance.get_mutable()->time_since_last_hit_ = const_cast< ::sdklt::TableEntry_IdleTimeout*>(
      ::sdklt::TableEntry_IdleTimeout::internal_default_instance());
}
class TableEntry::_Internal {
 public:
  static const ::sdklt::TableAction& action(const TableEntry* msg);
  static const ::sdklt::TableEntry_IdleTimeout& time_since_last_hit(const TableEntry* msg);
};

const ::sdklt::TableAction&
TableEntry::_Internal::action(const TableEntry* msg) {
  return *msg->action_;
}
const ::sdklt::TableEntry_IdleTimeout&
TableEntry::_Internal::time_since_last_hit(const TableEntry* msg) {
  return *msg->time_since_last_hit_;
}
TableEntry::TableEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.TableEntry)
}
TableEntry::TableEntry(const TableEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      match_(from.match_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata().empty()) {
    metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from._internal_has_action()) {
    action_ = new ::sdklt::TableAction(*from.action_);
  } else {
    action_ = nullptr;
  }
  if (from._internal_has_time_since_last_hit()) {
    time_since_last_hit_ = new ::sdklt::TableEntry_IdleTimeout(*from.time_since_last_hit_);
  } else {
    time_since_last_hit_ = nullptr;
  }
  ::memcpy(&table_id_, &from.table_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_default_action_) -
    reinterpret_cast<char*>(&table_id_)) + sizeof(is_default_action_));
  // @@protoc_insertion_point(copy_constructor:sdklt.TableEntry)
}

void TableEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TableEntry_sdklt_2eproto.base);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_action_) -
      reinterpret_cast<char*>(&action_)) + sizeof(is_default_action_));
}

TableEntry::~TableEntry() {
  // @@protoc_insertion_point(destructor:sdklt.TableEntry)
  SharedDtor();
}

void TableEntry::SharedDtor() {
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete action_;
  if (this != internal_default_instance()) delete time_since_last_hit_;
}

void TableEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableEntry& TableEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableEntry_sdklt_2eproto.base);
  return *internal_default_instance();
}


void TableEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.TableEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_.Clear();
  metadata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && time_since_last_hit_ != nullptr) {
    delete time_since_last_hit_;
  }
  time_since_last_hit_ = nullptr;
  ::memset(&table_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_action_) -
      reinterpret_cast<char*>(&table_id_)) + sizeof(is_default_action_));
  _internal_metadata_.Clear();
}

const char* TableEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sdklt.FieldMatch match = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_match(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .sdklt.TableAction action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 controller_metadata = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          controller_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_default_action = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_default_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 idle_timeout_ns = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          idle_timeout_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sdklt.TableEntry.IdleTimeout time_since_last_hit = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_since_last_hit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes metadata = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.TableEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 table_id = 1;
  if (this->table_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_table_id(), target);
  }

  // repeated .sdklt.FieldMatch match = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_match_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_match(i), target, stream);
  }

  // .sdklt.TableAction action = 3;
  if (this->has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::action(this), target, stream);
  }

  // int32 priority = 4;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_priority(), target);
  }

  // uint64 controller_metadata = 5 [deprecated = true];
  if (this->controller_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_controller_metadata(), target);
  }

  // bool is_default_action = 8;
  if (this->is_default_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_default_action(), target);
  }

  // int64 idle_timeout_ns = 9;
  if (this->idle_timeout_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_idle_timeout_ns(), target);
  }

  // .sdklt.TableEntry.IdleTimeout time_since_last_hit = 10;
  if (this->has_time_since_last_hit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::time_since_last_hit(this), target, stream);
  }

  // bytes metadata = 11;
  if (this->metadata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.TableEntry)
  return target;
}

size_t TableEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.TableEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sdklt.FieldMatch match = 2;
  total_size += 1UL * this->_internal_match_size();
  for (const auto& msg : this->match_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes metadata = 11;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_metadata());
  }

  // .sdklt.TableAction action = 3;
  if (this->has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  // .sdklt.TableEntry.IdleTimeout time_since_last_hit = 10;
  if (this->has_time_since_last_hit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_since_last_hit_);
  }

  // uint32 table_id = 1;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_table_id());
  }

  // int32 priority = 4;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_priority());
  }

  // uint64 controller_metadata = 5 [deprecated = true];
  if (this->controller_metadata() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_controller_metadata());
  }

  // int64 idle_timeout_ns = 9;
  if (this->idle_timeout_ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_idle_timeout_ns());
  }

  // bool is_default_action = 8;
  if (this->is_default_action() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.TableEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const TableEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.TableEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.TableEntry)
    MergeFrom(*source);
  }
}

void TableEntry::MergeFrom(const TableEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.TableEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_.MergeFrom(from.match_);
  if (from.metadata().size() > 0) {

    metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.has_action()) {
    _internal_mutable_action()->::sdklt::TableAction::MergeFrom(from._internal_action());
  }
  if (from.has_time_since_last_hit()) {
    _internal_mutable_time_since_last_hit()->::sdklt::TableEntry_IdleTimeout::MergeFrom(from._internal_time_since_last_hit());
  }
  if (from.table_id() != 0) {
    _internal_set_table_id(from._internal_table_id());
  }
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from.controller_metadata() != 0) {
    _internal_set_controller_metadata(from._internal_controller_metadata());
  }
  if (from.idle_timeout_ns() != 0) {
    _internal_set_idle_timeout_ns(from._internal_idle_timeout_ns());
  }
  if (from.is_default_action() != 0) {
    _internal_set_is_default_action(from._internal_is_default_action());
  }
}

void TableEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.TableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableEntry::CopyFrom(const TableEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.TableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableEntry::IsInitialized() const {
  return true;
}

void TableEntry::InternalSwap(TableEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  match_.InternalSwap(&other->match_);
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(action_, other->action_);
  swap(time_since_last_hit_, other->time_since_last_hit_);
  swap(table_id_, other->table_id_);
  swap(priority_, other->priority_);
  swap(controller_metadata_, other->controller_metadata_);
  swap(idle_timeout_ns_, other->idle_timeout_ns_);
  swap(is_default_action_, other->is_default_action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FieldMatch_Exact::InitAsDefaultInstance() {
}
class FieldMatch_Exact::_Internal {
 public:
};

FieldMatch_Exact::FieldMatch_Exact()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.FieldMatch.Exact)
}
FieldMatch_Exact::FieldMatch_Exact(const FieldMatch_Exact& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:sdklt.FieldMatch.Exact)
}

void FieldMatch_Exact::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldMatch_Exact_sdklt_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FieldMatch_Exact::~FieldMatch_Exact() {
  // @@protoc_insertion_point(destructor:sdklt.FieldMatch.Exact)
  SharedDtor();
}

void FieldMatch_Exact::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FieldMatch_Exact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldMatch_Exact& FieldMatch_Exact::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldMatch_Exact_sdklt_2eproto.base);
  return *internal_default_instance();
}


void FieldMatch_Exact::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.FieldMatch.Exact)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FieldMatch_Exact::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldMatch_Exact::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.FieldMatch.Exact)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.FieldMatch.Exact)
  return target;
}

size_t FieldMatch_Exact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.FieldMatch.Exact)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldMatch_Exact::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.FieldMatch.Exact)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldMatch_Exact* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldMatch_Exact>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.FieldMatch.Exact)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.FieldMatch.Exact)
    MergeFrom(*source);
  }
}

void FieldMatch_Exact::MergeFrom(const FieldMatch_Exact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.FieldMatch.Exact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void FieldMatch_Exact::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.FieldMatch.Exact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldMatch_Exact::CopyFrom(const FieldMatch_Exact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.FieldMatch.Exact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMatch_Exact::IsInitialized() const {
  return true;
}

void FieldMatch_Exact::InternalSwap(FieldMatch_Exact* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldMatch_Exact::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FieldMatch_Ternary::InitAsDefaultInstance() {
}
class FieldMatch_Ternary::_Internal {
 public:
};

FieldMatch_Ternary::FieldMatch_Ternary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.FieldMatch.Ternary)
}
FieldMatch_Ternary::FieldMatch_Ternary(const FieldMatch_Ternary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mask().empty()) {
    mask_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  // @@protoc_insertion_point(copy_constructor:sdklt.FieldMatch.Ternary)
}

void FieldMatch_Ternary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldMatch_Ternary_sdklt_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FieldMatch_Ternary::~FieldMatch_Ternary() {
  // @@protoc_insertion_point(destructor:sdklt.FieldMatch.Ternary)
  SharedDtor();
}

void FieldMatch_Ternary::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FieldMatch_Ternary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldMatch_Ternary& FieldMatch_Ternary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldMatch_Ternary_sdklt_2eproto.base);
  return *internal_default_instance();
}


void FieldMatch_Ternary::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.FieldMatch.Ternary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mask_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FieldMatch_Ternary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldMatch_Ternary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.FieldMatch.Ternary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // bytes mask = 2;
  if (this->mask().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.FieldMatch.Ternary)
  return target;
}

size_t FieldMatch_Ternary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.FieldMatch.Ternary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // bytes mask = 2;
  if (this->mask().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mask());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldMatch_Ternary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.FieldMatch.Ternary)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldMatch_Ternary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldMatch_Ternary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.FieldMatch.Ternary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.FieldMatch.Ternary)
    MergeFrom(*source);
  }
}

void FieldMatch_Ternary::MergeFrom(const FieldMatch_Ternary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.FieldMatch.Ternary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.mask().size() > 0) {

    mask_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
}

void FieldMatch_Ternary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.FieldMatch.Ternary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldMatch_Ternary::CopyFrom(const FieldMatch_Ternary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.FieldMatch.Ternary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMatch_Ternary::IsInitialized() const {
  return true;
}

void FieldMatch_Ternary::InternalSwap(FieldMatch_Ternary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mask_.Swap(&other->mask_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldMatch_Ternary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FieldMatch_LPM::InitAsDefaultInstance() {
}
class FieldMatch_LPM::_Internal {
 public:
};

FieldMatch_LPM::FieldMatch_LPM()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.FieldMatch.LPM)
}
FieldMatch_LPM::FieldMatch_LPM(const FieldMatch_LPM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  prefix_len_ = from.prefix_len_;
  // @@protoc_insertion_point(copy_constructor:sdklt.FieldMatch.LPM)
}

void FieldMatch_LPM::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldMatch_LPM_sdklt_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_len_ = 0;
}

FieldMatch_LPM::~FieldMatch_LPM() {
  // @@protoc_insertion_point(destructor:sdklt.FieldMatch.LPM)
  SharedDtor();
}

void FieldMatch_LPM::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FieldMatch_LPM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldMatch_LPM& FieldMatch_LPM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldMatch_LPM_sdklt_2eproto.base);
  return *internal_default_instance();
}


void FieldMatch_LPM::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.FieldMatch.LPM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_len_ = 0;
  _internal_metadata_.Clear();
}

const char* FieldMatch_LPM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 prefix_len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          prefix_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldMatch_LPM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.FieldMatch.LPM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // int32 prefix_len = 2;
  if (this->prefix_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_prefix_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.FieldMatch.LPM)
  return target;
}

size_t FieldMatch_LPM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.FieldMatch.LPM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // int32 prefix_len = 2;
  if (this->prefix_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prefix_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldMatch_LPM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.FieldMatch.LPM)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldMatch_LPM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldMatch_LPM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.FieldMatch.LPM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.FieldMatch.LPM)
    MergeFrom(*source);
  }
}

void FieldMatch_LPM::MergeFrom(const FieldMatch_LPM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.FieldMatch.LPM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.prefix_len() != 0) {
    _internal_set_prefix_len(from._internal_prefix_len());
  }
}

void FieldMatch_LPM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.FieldMatch.LPM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldMatch_LPM::CopyFrom(const FieldMatch_LPM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.FieldMatch.LPM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMatch_LPM::IsInitialized() const {
  return true;
}

void FieldMatch_LPM::InternalSwap(FieldMatch_LPM* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(prefix_len_, other->prefix_len_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldMatch_LPM::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FieldMatch_Range::InitAsDefaultInstance() {
}
class FieldMatch_Range::_Internal {
 public:
};

FieldMatch_Range::FieldMatch_Range()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.FieldMatch.Range)
}
FieldMatch_Range::FieldMatch_Range(const FieldMatch_Range& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  low_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_low().empty()) {
    low_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.low_);
  }
  high_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_high().empty()) {
    high_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.high_);
  }
  // @@protoc_insertion_point(copy_constructor:sdklt.FieldMatch.Range)
}

void FieldMatch_Range::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldMatch_Range_sdklt_2eproto.base);
  low_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  high_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FieldMatch_Range::~FieldMatch_Range() {
  // @@protoc_insertion_point(destructor:sdklt.FieldMatch.Range)
  SharedDtor();
}

void FieldMatch_Range::SharedDtor() {
  low_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  high_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FieldMatch_Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldMatch_Range& FieldMatch_Range::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldMatch_Range_sdklt_2eproto.base);
  return *internal_default_instance();
}


void FieldMatch_Range::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.FieldMatch.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  low_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  high_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FieldMatch_Range::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes low = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_low();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes high = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_high();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldMatch_Range::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.FieldMatch.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes low = 1;
  if (this->low().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_low(), target);
  }

  // bytes high = 2;
  if (this->high().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_high(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.FieldMatch.Range)
  return target;
}

size_t FieldMatch_Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.FieldMatch.Range)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes low = 1;
  if (this->low().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_low());
  }

  // bytes high = 2;
  if (this->high().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_high());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldMatch_Range::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.FieldMatch.Range)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldMatch_Range* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldMatch_Range>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.FieldMatch.Range)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.FieldMatch.Range)
    MergeFrom(*source);
  }
}

void FieldMatch_Range::MergeFrom(const FieldMatch_Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.FieldMatch.Range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.low().size() > 0) {

    low_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.low_);
  }
  if (from.high().size() > 0) {

    high_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.high_);
  }
}

void FieldMatch_Range::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.FieldMatch.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldMatch_Range::CopyFrom(const FieldMatch_Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.FieldMatch.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMatch_Range::IsInitialized() const {
  return true;
}

void FieldMatch_Range::InternalSwap(FieldMatch_Range* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  low_.Swap(&other->low_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  high_.Swap(&other->high_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldMatch_Range::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FieldMatch_Optional::InitAsDefaultInstance() {
}
class FieldMatch_Optional::_Internal {
 public:
};

FieldMatch_Optional::FieldMatch_Optional()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.FieldMatch.Optional)
}
FieldMatch_Optional::FieldMatch_Optional(const FieldMatch_Optional& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:sdklt.FieldMatch.Optional)
}

void FieldMatch_Optional::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldMatch_Optional_sdklt_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FieldMatch_Optional::~FieldMatch_Optional() {
  // @@protoc_insertion_point(destructor:sdklt.FieldMatch.Optional)
  SharedDtor();
}

void FieldMatch_Optional::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FieldMatch_Optional::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldMatch_Optional& FieldMatch_Optional::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldMatch_Optional_sdklt_2eproto.base);
  return *internal_default_instance();
}


void FieldMatch_Optional::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.FieldMatch.Optional)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FieldMatch_Optional::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldMatch_Optional::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.FieldMatch.Optional)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.FieldMatch.Optional)
  return target;
}

size_t FieldMatch_Optional::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.FieldMatch.Optional)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldMatch_Optional::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.FieldMatch.Optional)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldMatch_Optional* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldMatch_Optional>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.FieldMatch.Optional)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.FieldMatch.Optional)
    MergeFrom(*source);
  }
}

void FieldMatch_Optional::MergeFrom(const FieldMatch_Optional& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.FieldMatch.Optional)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void FieldMatch_Optional::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.FieldMatch.Optional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldMatch_Optional::CopyFrom(const FieldMatch_Optional& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.FieldMatch.Optional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMatch_Optional::IsInitialized() const {
  return true;
}

void FieldMatch_Optional::InternalSwap(FieldMatch_Optional* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldMatch_Optional::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FieldMatch::InitAsDefaultInstance() {
  ::sdklt::_FieldMatch_default_instance_.exact_ = const_cast< ::sdklt::FieldMatch_Exact*>(
      ::sdklt::FieldMatch_Exact::internal_default_instance());
  ::sdklt::_FieldMatch_default_instance_.ternary_ = const_cast< ::sdklt::FieldMatch_Ternary*>(
      ::sdklt::FieldMatch_Ternary::internal_default_instance());
  ::sdklt::_FieldMatch_default_instance_.lpm_ = const_cast< ::sdklt::FieldMatch_LPM*>(
      ::sdklt::FieldMatch_LPM::internal_default_instance());
  ::sdklt::_FieldMatch_default_instance_.range_ = const_cast< ::sdklt::FieldMatch_Range*>(
      ::sdklt::FieldMatch_Range::internal_default_instance());
  ::sdklt::_FieldMatch_default_instance_.optional_ = const_cast< ::sdklt::FieldMatch_Optional*>(
      ::sdklt::FieldMatch_Optional::internal_default_instance());
  ::sdklt::_FieldMatch_default_instance_.other_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class FieldMatch::_Internal {
 public:
  static const ::sdklt::FieldMatch_Exact& exact(const FieldMatch* msg);
  static const ::sdklt::FieldMatch_Ternary& ternary(const FieldMatch* msg);
  static const ::sdklt::FieldMatch_LPM& lpm(const FieldMatch* msg);
  static const ::sdklt::FieldMatch_Range& range(const FieldMatch* msg);
  static const ::sdklt::FieldMatch_Optional& optional(const FieldMatch* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& other(const FieldMatch* msg);
};

const ::sdklt::FieldMatch_Exact&
FieldMatch::_Internal::exact(const FieldMatch* msg) {
  return *msg->field_match_type_.exact_;
}
const ::sdklt::FieldMatch_Ternary&
FieldMatch::_Internal::ternary(const FieldMatch* msg) {
  return *msg->field_match_type_.ternary_;
}
const ::sdklt::FieldMatch_LPM&
FieldMatch::_Internal::lpm(const FieldMatch* msg) {
  return *msg->field_match_type_.lpm_;
}
const ::sdklt::FieldMatch_Range&
FieldMatch::_Internal::range(const FieldMatch* msg) {
  return *msg->field_match_type_.range_;
}
const ::sdklt::FieldMatch_Optional&
FieldMatch::_Internal::optional(const FieldMatch* msg) {
  return *msg->field_match_type_.optional_;
}
const PROTOBUF_NAMESPACE_ID::Any&
FieldMatch::_Internal::other(const FieldMatch* msg) {
  return *msg->field_match_type_.other_;
}
void FieldMatch::set_allocated_exact(::sdklt::FieldMatch_Exact* exact) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_field_match_type();
  if (exact) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exact = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exact, submessage_arena);
    }
    set_has_exact();
    field_match_type_.exact_ = exact;
  }
  // @@protoc_insertion_point(field_set_allocated:sdklt.FieldMatch.exact)
}
void FieldMatch::set_allocated_ternary(::sdklt::FieldMatch_Ternary* ternary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_field_match_type();
  if (ternary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ternary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ternary, submessage_arena);
    }
    set_has_ternary();
    field_match_type_.ternary_ = ternary;
  }
  // @@protoc_insertion_point(field_set_allocated:sdklt.FieldMatch.ternary)
}
void FieldMatch::set_allocated_lpm(::sdklt::FieldMatch_LPM* lpm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_field_match_type();
  if (lpm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lpm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lpm, submessage_arena);
    }
    set_has_lpm();
    field_match_type_.lpm_ = lpm;
  }
  // @@protoc_insertion_point(field_set_allocated:sdklt.FieldMatch.lpm)
}
void FieldMatch::set_allocated_range(::sdklt::FieldMatch_Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_field_match_type();
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    set_has_range();
    field_match_type_.range_ = range;
  }
  // @@protoc_insertion_point(field_set_allocated:sdklt.FieldMatch.range)
}
void FieldMatch::set_allocated_optional(::sdklt::FieldMatch_Optional* optional) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_field_match_type();
  if (optional) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      optional = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional, submessage_arena);
    }
    set_has_optional();
    field_match_type_.optional_ = optional;
  }
  // @@protoc_insertion_point(field_set_allocated:sdklt.FieldMatch.optional)
}
void FieldMatch::set_allocated_other(PROTOBUF_NAMESPACE_ID::Any* other) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_field_match_type();
  if (other) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      other = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other, submessage_arena);
    }
    set_has_other();
    field_match_type_.other_ = other;
  }
  // @@protoc_insertion_point(field_set_allocated:sdklt.FieldMatch.other)
}
void FieldMatch::clear_other() {
  if (_internal_has_other()) {
    delete field_match_type_.other_;
    clear_has_field_match_type();
  }
}
FieldMatch::FieldMatch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.FieldMatch)
}
FieldMatch::FieldMatch(const FieldMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_id_ = from.field_id_;
  clear_has_field_match_type();
  switch (from.field_match_type_case()) {
    case kExact: {
      _internal_mutable_exact()->::sdklt::FieldMatch_Exact::MergeFrom(from._internal_exact());
      break;
    }
    case kTernary: {
      _internal_mutable_ternary()->::sdklt::FieldMatch_Ternary::MergeFrom(from._internal_ternary());
      break;
    }
    case kLpm: {
      _internal_mutable_lpm()->::sdklt::FieldMatch_LPM::MergeFrom(from._internal_lpm());
      break;
    }
    case kRange: {
      _internal_mutable_range()->::sdklt::FieldMatch_Range::MergeFrom(from._internal_range());
      break;
    }
    case kOptional: {
      _internal_mutable_optional()->::sdklt::FieldMatch_Optional::MergeFrom(from._internal_optional());
      break;
    }
    case kOther: {
      _internal_mutable_other()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_other());
      break;
    }
    case FIELD_MATCH_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sdklt.FieldMatch)
}

void FieldMatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldMatch_sdklt_2eproto.base);
  field_id_ = 0u;
  clear_has_field_match_type();
}

FieldMatch::~FieldMatch() {
  // @@protoc_insertion_point(destructor:sdklt.FieldMatch)
  SharedDtor();
}

void FieldMatch::SharedDtor() {
  if (has_field_match_type()) {
    clear_field_match_type();
  }
}

void FieldMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldMatch& FieldMatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldMatch_sdklt_2eproto.base);
  return *internal_default_instance();
}


void FieldMatch::clear_field_match_type() {
// @@protoc_insertion_point(one_of_clear_start:sdklt.FieldMatch)
  switch (field_match_type_case()) {
    case kExact: {
      delete field_match_type_.exact_;
      break;
    }
    case kTernary: {
      delete field_match_type_.ternary_;
      break;
    }
    case kLpm: {
      delete field_match_type_.lpm_;
      break;
    }
    case kRange: {
      delete field_match_type_.range_;
      break;
    }
    case kOptional: {
      delete field_match_type_.optional_;
      break;
    }
    case kOther: {
      delete field_match_type_.other_;
      break;
    }
    case FIELD_MATCH_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FIELD_MATCH_TYPE_NOT_SET;
}


void FieldMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.FieldMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_id_ = 0u;
  clear_field_match_type();
  _internal_metadata_.Clear();
}

const char* FieldMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 field_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          field_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sdklt.FieldMatch.Exact exact = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_exact(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sdklt.FieldMatch.Ternary ternary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ternary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sdklt.FieldMatch.LPM lpm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lpm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sdklt.FieldMatch.Range range = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sdklt.FieldMatch.Optional optional = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any other = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_other(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldMatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.FieldMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 field_id = 1;
  if (this->field_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_field_id(), target);
  }

  // .sdklt.FieldMatch.Exact exact = 2;
  if (_internal_has_exact()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::exact(this), target, stream);
  }

  // .sdklt.FieldMatch.Ternary ternary = 3;
  if (_internal_has_ternary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ternary(this), target, stream);
  }

  // .sdklt.FieldMatch.LPM lpm = 4;
  if (_internal_has_lpm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lpm(this), target, stream);
  }

  // .sdklt.FieldMatch.Range range = 6;
  if (_internal_has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::range(this), target, stream);
  }

  // .sdklt.FieldMatch.Optional optional = 7;
  if (_internal_has_optional()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::optional(this), target, stream);
  }

  // .google.protobuf.Any other = 100;
  if (_internal_has_other()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::other(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.FieldMatch)
  return target;
}

size_t FieldMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.FieldMatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 field_id = 1;
  if (this->field_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_field_id());
  }

  switch (field_match_type_case()) {
    // .sdklt.FieldMatch.Exact exact = 2;
    case kExact: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *field_match_type_.exact_);
      break;
    }
    // .sdklt.FieldMatch.Ternary ternary = 3;
    case kTernary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *field_match_type_.ternary_);
      break;
    }
    // .sdklt.FieldMatch.LPM lpm = 4;
    case kLpm: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *field_match_type_.lpm_);
      break;
    }
    // .sdklt.FieldMatch.Range range = 6;
    case kRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *field_match_type_.range_);
      break;
    }
    // .sdklt.FieldMatch.Optional optional = 7;
    case kOptional: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *field_match_type_.optional_);
      break;
    }
    // .google.protobuf.Any other = 100;
    case kOther: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *field_match_type_.other_);
      break;
    }
    case FIELD_MATCH_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldMatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.FieldMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldMatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.FieldMatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.FieldMatch)
    MergeFrom(*source);
  }
}

void FieldMatch::MergeFrom(const FieldMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.FieldMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field_id() != 0) {
    _internal_set_field_id(from._internal_field_id());
  }
  switch (from.field_match_type_case()) {
    case kExact: {
      _internal_mutable_exact()->::sdklt::FieldMatch_Exact::MergeFrom(from._internal_exact());
      break;
    }
    case kTernary: {
      _internal_mutable_ternary()->::sdklt::FieldMatch_Ternary::MergeFrom(from._internal_ternary());
      break;
    }
    case kLpm: {
      _internal_mutable_lpm()->::sdklt::FieldMatch_LPM::MergeFrom(from._internal_lpm());
      break;
    }
    case kRange: {
      _internal_mutable_range()->::sdklt::FieldMatch_Range::MergeFrom(from._internal_range());
      break;
    }
    case kOptional: {
      _internal_mutable_optional()->::sdklt::FieldMatch_Optional::MergeFrom(from._internal_optional());
      break;
    }
    case kOther: {
      _internal_mutable_other()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_other());
      break;
    }
    case FIELD_MATCH_TYPE_NOT_SET: {
      break;
    }
  }
}

void FieldMatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.FieldMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldMatch::CopyFrom(const FieldMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.FieldMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMatch::IsInitialized() const {
  return true;
}

void FieldMatch::InternalSwap(FieldMatch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(field_id_, other->field_id_);
  swap(field_match_type_, other->field_match_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldMatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableAction::InitAsDefaultInstance() {
  ::sdklt::_TableAction_default_instance_.action_ = const_cast< ::sdklt::Action*>(
      ::sdklt::Action::internal_default_instance());
  ::sdklt::_TableAction_default_instance_.action_profile_member_id_ = 0u;
  ::sdklt::_TableAction_default_instance_.action_profile_group_id_ = 0u;
  ::sdklt::_TableAction_default_instance_.action_profile_action_set_ = const_cast< ::sdklt::ActionProfileActionSet*>(
      ::sdklt::ActionProfileActionSet::internal_default_instance());
}
class TableAction::_Internal {
 public:
  static const ::sdklt::Action& action(const TableAction* msg);
  static const ::sdklt::ActionProfileActionSet& action_profile_action_set(const TableAction* msg);
};

const ::sdklt::Action&
TableAction::_Internal::action(const TableAction* msg) {
  return *msg->type_.action_;
}
const ::sdklt::ActionProfileActionSet&
TableAction::_Internal::action_profile_action_set(const TableAction* msg) {
  return *msg->type_.action_profile_action_set_;
}
void TableAction::set_allocated_action(::sdklt::Action* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    set_has_action();
    type_.action_ = action;
  }
  // @@protoc_insertion_point(field_set_allocated:sdklt.TableAction.action)
}
void TableAction::set_allocated_action_profile_action_set(::sdklt::ActionProfileActionSet* action_profile_action_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (action_profile_action_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action_profile_action_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_profile_action_set, submessage_arena);
    }
    set_has_action_profile_action_set();
    type_.action_profile_action_set_ = action_profile_action_set;
  }
  // @@protoc_insertion_point(field_set_allocated:sdklt.TableAction.action_profile_action_set)
}
TableAction::TableAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.TableAction)
}
TableAction::TableAction(const TableAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kAction: {
      _internal_mutable_action()->::sdklt::Action::MergeFrom(from._internal_action());
      break;
    }
    case kActionProfileMemberId: {
      _internal_set_action_profile_member_id(from._internal_action_profile_member_id());
      break;
    }
    case kActionProfileGroupId: {
      _internal_set_action_profile_group_id(from._internal_action_profile_group_id());
      break;
    }
    case kActionProfileActionSet: {
      _internal_mutable_action_profile_action_set()->::sdklt::ActionProfileActionSet::MergeFrom(from._internal_action_profile_action_set());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sdklt.TableAction)
}

void TableAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TableAction_sdklt_2eproto.base);
  clear_has_type();
}

TableAction::~TableAction() {
  // @@protoc_insertion_point(destructor:sdklt.TableAction)
  SharedDtor();
}

void TableAction::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void TableAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableAction& TableAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableAction_sdklt_2eproto.base);
  return *internal_default_instance();
}


void TableAction::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:sdklt.TableAction)
  switch (type_case()) {
    case kAction: {
      delete type_.action_;
      break;
    }
    case kActionProfileMemberId: {
      // No need to clear
      break;
    }
    case kActionProfileGroupId: {
      // No need to clear
      break;
    }
    case kActionProfileActionSet: {
      delete type_.action_profile_action_set_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void TableAction::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.TableAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

const char* TableAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sdklt.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 action_profile_member_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_action_profile_member_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 action_profile_group_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_action_profile_group_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sdklt.ActionProfileActionSet action_profile_action_set = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_action_profile_action_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.TableAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sdklt.Action action = 1;
  if (_internal_has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action(this), target, stream);
  }

  // uint32 action_profile_member_id = 2;
  if (_internal_has_action_profile_member_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_action_profile_member_id(), target);
  }

  // uint32 action_profile_group_id = 3;
  if (_internal_has_action_profile_group_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_action_profile_group_id(), target);
  }

  // .sdklt.ActionProfileActionSet action_profile_action_set = 4;
  if (_internal_has_action_profile_action_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::action_profile_action_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.TableAction)
  return target;
}

size_t TableAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.TableAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .sdklt.Action action = 1;
    case kAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.action_);
      break;
    }
    // uint32 action_profile_member_id = 2;
    case kActionProfileMemberId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_action_profile_member_id());
      break;
    }
    // uint32 action_profile_group_id = 3;
    case kActionProfileGroupId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_action_profile_group_id());
      break;
    }
    // .sdklt.ActionProfileActionSet action_profile_action_set = 4;
    case kActionProfileActionSet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.action_profile_action_set_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.TableAction)
  GOOGLE_DCHECK_NE(&from, this);
  const TableAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.TableAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.TableAction)
    MergeFrom(*source);
  }
}

void TableAction::MergeFrom(const TableAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.TableAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kAction: {
      _internal_mutable_action()->::sdklt::Action::MergeFrom(from._internal_action());
      break;
    }
    case kActionProfileMemberId: {
      _internal_set_action_profile_member_id(from._internal_action_profile_member_id());
      break;
    }
    case kActionProfileGroupId: {
      _internal_set_action_profile_group_id(from._internal_action_profile_group_id());
      break;
    }
    case kActionProfileActionSet: {
      _internal_mutable_action_profile_action_set()->::sdklt::ActionProfileActionSet::MergeFrom(from._internal_action_profile_action_set());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void TableAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.TableAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableAction::CopyFrom(const TableAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.TableAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableAction::IsInitialized() const {
  return true;
}

void TableAction::InternalSwap(TableAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Action_Param::InitAsDefaultInstance() {
}
class Action_Param::_Internal {
 public:
};

Action_Param::Action_Param()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.Action.Param)
}
Action_Param::Action_Param(const Action_Param& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  param_id_ = from.param_id_;
  // @@protoc_insertion_point(copy_constructor:sdklt.Action.Param)
}

void Action_Param::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Action_Param_sdklt_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param_id_ = 0u;
}

Action_Param::~Action_Param() {
  // @@protoc_insertion_point(destructor:sdklt.Action.Param)
  SharedDtor();
}

void Action_Param::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Action_Param::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Action_Param& Action_Param::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Action_Param_sdklt_2eproto.base);
  return *internal_default_instance();
}


void Action_Param::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.Action.Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* Action_Param::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 param_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          param_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Action_Param::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.Action.Param)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 param_id = 2;
  if (this->param_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_param_id(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.Action.Param)
  return target;
}

size_t Action_Param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.Action.Param)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint32 param_id = 2;
  if (this->param_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_param_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action_Param::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.Action.Param)
  GOOGLE_DCHECK_NE(&from, this);
  const Action_Param* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Action_Param>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.Action.Param)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.Action.Param)
    MergeFrom(*source);
  }
}

void Action_Param::MergeFrom(const Action_Param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.Action.Param)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.param_id() != 0) {
    _internal_set_param_id(from._internal_param_id());
  }
}

void Action_Param::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.Action.Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action_Param::CopyFrom(const Action_Param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.Action.Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action_Param::IsInitialized() const {
  return true;
}

void Action_Param::InternalSwap(Action_Param* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(param_id_, other->param_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Action_Param::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Action::InitAsDefaultInstance() {
}
class Action::_Internal {
 public:
};

Action::Action()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      params_(from.params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_id_ = from.action_id_;
  // @@protoc_insertion_point(copy_constructor:sdklt.Action)
}

void Action::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Action_sdklt_2eproto.base);
  action_id_ = 0u;
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:sdklt.Action)
  SharedDtor();
}

void Action::SharedDtor() {
}

void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Action& Action::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Action_sdklt_2eproto.base);
  return *internal_default_instance();
}


void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  action_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sdklt.Action.Param params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Action::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 action_id = 1;
  if (this->action_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_action_id(), target);
  }

  // repeated .sdklt.Action.Param params = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_params(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.Action)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sdklt.Action.Param params = 4;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 action_id = 1;
  if (this->action_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_action_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const Action* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Action>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.Action)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from.action_id() != 0) {
    _internal_set_action_id(from._internal_action_id());
  }
}

void Action::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  params_.InternalSwap(&other->params_);
  swap(action_id_, other->action_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActionProfileActionSet::InitAsDefaultInstance() {
}
class ActionProfileActionSet::_Internal {
 public:
};

ActionProfileActionSet::ActionProfileActionSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.ActionProfileActionSet)
}
ActionProfileActionSet::ActionProfileActionSet(const ActionProfileActionSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      action_profile_actions_(from.action_profile_actions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sdklt.ActionProfileActionSet)
}

void ActionProfileActionSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActionProfileActionSet_sdklt_2eproto.base);
}

ActionProfileActionSet::~ActionProfileActionSet() {
  // @@protoc_insertion_point(destructor:sdklt.ActionProfileActionSet)
  SharedDtor();
}

void ActionProfileActionSet::SharedDtor() {
}

void ActionProfileActionSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionProfileActionSet& ActionProfileActionSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionProfileActionSet_sdklt_2eproto.base);
  return *internal_default_instance();
}


void ActionProfileActionSet::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.ActionProfileActionSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_profile_actions_.Clear();
  _internal_metadata_.Clear();
}

const char* ActionProfileActionSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sdklt.ActionProfileAction action_profile_actions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_action_profile_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionProfileActionSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.ActionProfileActionSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sdklt.ActionProfileAction action_profile_actions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_action_profile_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_action_profile_actions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.ActionProfileActionSet)
  return target;
}

size_t ActionProfileActionSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.ActionProfileActionSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sdklt.ActionProfileAction action_profile_actions = 1;
  total_size += 1UL * this->_internal_action_profile_actions_size();
  for (const auto& msg : this->action_profile_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionProfileActionSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.ActionProfileActionSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionProfileActionSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActionProfileActionSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.ActionProfileActionSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.ActionProfileActionSet)
    MergeFrom(*source);
  }
}

void ActionProfileActionSet::MergeFrom(const ActionProfileActionSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.ActionProfileActionSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  action_profile_actions_.MergeFrom(from.action_profile_actions_);
}

void ActionProfileActionSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.ActionProfileActionSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionProfileActionSet::CopyFrom(const ActionProfileActionSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.ActionProfileActionSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionProfileActionSet::IsInitialized() const {
  return true;
}

void ActionProfileActionSet::InternalSwap(ActionProfileActionSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  action_profile_actions_.InternalSwap(&other->action_profile_actions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionProfileActionSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActionProfileAction::InitAsDefaultInstance() {
  ::sdklt::_ActionProfileAction_default_instance_._instance.get_mutable()->action_ = const_cast< ::sdklt::Action*>(
      ::sdklt::Action::internal_default_instance());
}
class ActionProfileAction::_Internal {
 public:
  static const ::sdklt::Action& action(const ActionProfileAction* msg);
};

const ::sdklt::Action&
ActionProfileAction::_Internal::action(const ActionProfileAction* msg) {
  return *msg->action_;
}
ActionProfileAction::ActionProfileAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.ActionProfileAction)
}
ActionProfileAction::ActionProfileAction(const ActionProfileAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_action()) {
    action_ = new ::sdklt::Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  ::memcpy(&weight_, &from.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&watch_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(watch_));
  // @@protoc_insertion_point(copy_constructor:sdklt.ActionProfileAction)
}

void ActionProfileAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActionProfileAction_sdklt_2eproto.base);
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&watch_) -
      reinterpret_cast<char*>(&action_)) + sizeof(watch_));
}

ActionProfileAction::~ActionProfileAction() {
  // @@protoc_insertion_point(destructor:sdklt.ActionProfileAction)
  SharedDtor();
}

void ActionProfileAction::SharedDtor() {
  if (this != internal_default_instance()) delete action_;
}

void ActionProfileAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionProfileAction& ActionProfileAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionProfileAction_sdklt_2eproto.base);
  return *internal_default_instance();
}


void ActionProfileAction::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.ActionProfileAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  ::memset(&weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&watch_) -
      reinterpret_cast<char*>(&weight_)) + sizeof(watch_));
  _internal_metadata_.Clear();
}

const char* ActionProfileAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sdklt.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 watch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          watch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionProfileAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.ActionProfileAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sdklt.Action action = 1;
  if (this->has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::action(this), target, stream);
  }

  // int32 weight = 2;
  if (this->weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_weight(), target);
  }

  // int32 watch = 3;
  if (this->watch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_watch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.ActionProfileAction)
  return target;
}

size_t ActionProfileAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.ActionProfileAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sdklt.Action action = 1;
  if (this->has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  // int32 weight = 2;
  if (this->weight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weight());
  }

  // int32 watch = 3;
  if (this->watch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_watch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionProfileAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.ActionProfileAction)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionProfileAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActionProfileAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.ActionProfileAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.ActionProfileAction)
    MergeFrom(*source);
  }
}

void ActionProfileAction::MergeFrom(const ActionProfileAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.ActionProfileAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_action()) {
    _internal_mutable_action()->::sdklt::Action::MergeFrom(from._internal_action());
  }
  if (from.weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  if (from.watch() != 0) {
    _internal_set_watch(from._internal_watch());
  }
}

void ActionProfileAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.ActionProfileAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionProfileAction::CopyFrom(const ActionProfileAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.ActionProfileAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionProfileAction::IsInitialized() const {
  return true;
}

void ActionProfileAction::InternalSwap(ActionProfileAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(action_, other->action_);
  swap(weight_, other->weight_);
  swap(watch_, other->watch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionProfileAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Uint128::InitAsDefaultInstance() {
}
class Uint128::_Internal {
 public:
};

Uint128::Uint128()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdklt.Uint128)
}
Uint128::Uint128(const Uint128& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&high_, &from.high_,
    static_cast<size_t>(reinterpret_cast<char*>(&low_) -
    reinterpret_cast<char*>(&high_)) + sizeof(low_));
  // @@protoc_insertion_point(copy_constructor:sdklt.Uint128)
}

void Uint128::SharedCtor() {
  ::memset(&high_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_) -
      reinterpret_cast<char*>(&high_)) + sizeof(low_));
}

Uint128::~Uint128() {
  // @@protoc_insertion_point(destructor:sdklt.Uint128)
  SharedDtor();
}

void Uint128::SharedDtor() {
}

void Uint128::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Uint128& Uint128::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Uint128_sdklt_2eproto.base);
  return *internal_default_instance();
}


void Uint128::Clear() {
// @@protoc_insertion_point(message_clear_start:sdklt.Uint128)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&high_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_) -
      reinterpret_cast<char*>(&high_)) + sizeof(low_));
  _internal_metadata_.Clear();
}

const char* Uint128::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 high = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 low = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Uint128::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdklt.Uint128)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 high = 1;
  if (this->high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_high(), target);
  }

  // uint64 low = 2;
  if (this->low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_low(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdklt.Uint128)
  return target;
}

size_t Uint128::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdklt.Uint128)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 high = 1;
  if (this->high() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_high());
  }

  // uint64 low = 2;
  if (this->low() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_low());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Uint128::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdklt.Uint128)
  GOOGLE_DCHECK_NE(&from, this);
  const Uint128* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Uint128>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdklt.Uint128)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdklt.Uint128)
    MergeFrom(*source);
  }
}

void Uint128::MergeFrom(const Uint128& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdklt.Uint128)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.high() != 0) {
    _internal_set_high(from._internal_high());
  }
  if (from.low() != 0) {
    _internal_set_low(from._internal_low());
  }
}

void Uint128::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdklt.Uint128)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uint128::CopyFrom(const Uint128& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdklt.Uint128)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uint128::IsInitialized() const {
  return true;
}

void Uint128::InternalSwap(Uint128* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(high_, other->high_);
  swap(low_, other->low_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Uint128::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sdklt
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sdklt::ShellRequest* Arena::CreateMaybeMessage< ::sdklt::ShellRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::ShellRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::ShellState* Arena::CreateMaybeMessage< ::sdklt::ShellState >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::ShellState >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::InitRequest* Arena::CreateMaybeMessage< ::sdklt::InitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::InitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::InitState* Arena::CreateMaybeMessage< ::sdklt::InitState >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::InitState >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::ShutDownRequest* Arena::CreateMaybeMessage< ::sdklt::ShutDownRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::ShutDownRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::ShutDownState* Arena::CreateMaybeMessage< ::sdklt::ShutDownState >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::ShutDownState >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::ReadRequest* Arena::CreateMaybeMessage< ::sdklt::ReadRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::ReadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::ReadResponse* Arena::CreateMaybeMessage< ::sdklt::ReadResponse >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::ReadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::WriteRequest* Arena::CreateMaybeMessage< ::sdklt::WriteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::WriteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::WriteResponse* Arena::CreateMaybeMessage< ::sdklt::WriteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::WriteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::Update* Arena::CreateMaybeMessage< ::sdklt::Update >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::Update >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::Entity* Arena::CreateMaybeMessage< ::sdklt::Entity >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::Entity >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::ExternEntry* Arena::CreateMaybeMessage< ::sdklt::ExternEntry >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::ExternEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::TableEntry_IdleTimeout* Arena::CreateMaybeMessage< ::sdklt::TableEntry_IdleTimeout >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::TableEntry_IdleTimeout >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::TableEntry* Arena::CreateMaybeMessage< ::sdklt::TableEntry >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::TableEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::FieldMatch_Exact* Arena::CreateMaybeMessage< ::sdklt::FieldMatch_Exact >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::FieldMatch_Exact >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::FieldMatch_Ternary* Arena::CreateMaybeMessage< ::sdklt::FieldMatch_Ternary >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::FieldMatch_Ternary >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::FieldMatch_LPM* Arena::CreateMaybeMessage< ::sdklt::FieldMatch_LPM >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::FieldMatch_LPM >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::FieldMatch_Range* Arena::CreateMaybeMessage< ::sdklt::FieldMatch_Range >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::FieldMatch_Range >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::FieldMatch_Optional* Arena::CreateMaybeMessage< ::sdklt::FieldMatch_Optional >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::FieldMatch_Optional >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::FieldMatch* Arena::CreateMaybeMessage< ::sdklt::FieldMatch >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::FieldMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::TableAction* Arena::CreateMaybeMessage< ::sdklt::TableAction >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::TableAction >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::Action_Param* Arena::CreateMaybeMessage< ::sdklt::Action_Param >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::Action_Param >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::Action* Arena::CreateMaybeMessage< ::sdklt::Action >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::ActionProfileActionSet* Arena::CreateMaybeMessage< ::sdklt::ActionProfileActionSet >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::ActionProfileActionSet >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::ActionProfileAction* Arena::CreateMaybeMessage< ::sdklt::ActionProfileAction >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::ActionProfileAction >(arena);
}
template<> PROTOBUF_NOINLINE ::sdklt::Uint128* Arena::CreateMaybeMessage< ::sdklt::Uint128 >(Arena* arena) {
  return Arena::CreateInternal< ::sdklt::Uint128 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
