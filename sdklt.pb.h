// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdklt.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdklt_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdklt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdklt_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdklt_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[27]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdklt_2eproto;
namespace sdklt {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class ActionProfileAction;
class ActionProfileActionDefaultTypeInternal;
extern ActionProfileActionDefaultTypeInternal _ActionProfileAction_default_instance_;
class ActionProfileActionSet;
class ActionProfileActionSetDefaultTypeInternal;
extern ActionProfileActionSetDefaultTypeInternal _ActionProfileActionSet_default_instance_;
class Action_Param;
class Action_ParamDefaultTypeInternal;
extern Action_ParamDefaultTypeInternal _Action_Param_default_instance_;
class Entity;
class EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
class ExternEntry;
class ExternEntryDefaultTypeInternal;
extern ExternEntryDefaultTypeInternal _ExternEntry_default_instance_;
class FieldMatch;
class FieldMatchDefaultTypeInternal;
extern FieldMatchDefaultTypeInternal _FieldMatch_default_instance_;
class FieldMatch_Exact;
class FieldMatch_ExactDefaultTypeInternal;
extern FieldMatch_ExactDefaultTypeInternal _FieldMatch_Exact_default_instance_;
class FieldMatch_LPM;
class FieldMatch_LPMDefaultTypeInternal;
extern FieldMatch_LPMDefaultTypeInternal _FieldMatch_LPM_default_instance_;
class FieldMatch_Optional;
class FieldMatch_OptionalDefaultTypeInternal;
extern FieldMatch_OptionalDefaultTypeInternal _FieldMatch_Optional_default_instance_;
class FieldMatch_Range;
class FieldMatch_RangeDefaultTypeInternal;
extern FieldMatch_RangeDefaultTypeInternal _FieldMatch_Range_default_instance_;
class FieldMatch_Ternary;
class FieldMatch_TernaryDefaultTypeInternal;
extern FieldMatch_TernaryDefaultTypeInternal _FieldMatch_Ternary_default_instance_;
class InitRequest;
class InitRequestDefaultTypeInternal;
extern InitRequestDefaultTypeInternal _InitRequest_default_instance_;
class InitState;
class InitStateDefaultTypeInternal;
extern InitStateDefaultTypeInternal _InitState_default_instance_;
class ReadRequest;
class ReadRequestDefaultTypeInternal;
extern ReadRequestDefaultTypeInternal _ReadRequest_default_instance_;
class ReadResponse;
class ReadResponseDefaultTypeInternal;
extern ReadResponseDefaultTypeInternal _ReadResponse_default_instance_;
class ShellRequest;
class ShellRequestDefaultTypeInternal;
extern ShellRequestDefaultTypeInternal _ShellRequest_default_instance_;
class ShellState;
class ShellStateDefaultTypeInternal;
extern ShellStateDefaultTypeInternal _ShellState_default_instance_;
class ShutDownRequest;
class ShutDownRequestDefaultTypeInternal;
extern ShutDownRequestDefaultTypeInternal _ShutDownRequest_default_instance_;
class ShutDownState;
class ShutDownStateDefaultTypeInternal;
extern ShutDownStateDefaultTypeInternal _ShutDownState_default_instance_;
class TableAction;
class TableActionDefaultTypeInternal;
extern TableActionDefaultTypeInternal _TableAction_default_instance_;
class TableEntry;
class TableEntryDefaultTypeInternal;
extern TableEntryDefaultTypeInternal _TableEntry_default_instance_;
class TableEntry_IdleTimeout;
class TableEntry_IdleTimeoutDefaultTypeInternal;
extern TableEntry_IdleTimeoutDefaultTypeInternal _TableEntry_IdleTimeout_default_instance_;
class Uint128;
class Uint128DefaultTypeInternal;
extern Uint128DefaultTypeInternal _Uint128_default_instance_;
class Update;
class UpdateDefaultTypeInternal;
extern UpdateDefaultTypeInternal _Update_default_instance_;
class WriteRequest;
class WriteRequestDefaultTypeInternal;
extern WriteRequestDefaultTypeInternal _WriteRequest_default_instance_;
class WriteResponse;
class WriteResponseDefaultTypeInternal;
extern WriteResponseDefaultTypeInternal _WriteResponse_default_instance_;
}  // namespace sdklt
PROTOBUF_NAMESPACE_OPEN
template<> ::sdklt::Action* Arena::CreateMaybeMessage<::sdklt::Action>(Arena*);
template<> ::sdklt::ActionProfileAction* Arena::CreateMaybeMessage<::sdklt::ActionProfileAction>(Arena*);
template<> ::sdklt::ActionProfileActionSet* Arena::CreateMaybeMessage<::sdklt::ActionProfileActionSet>(Arena*);
template<> ::sdklt::Action_Param* Arena::CreateMaybeMessage<::sdklt::Action_Param>(Arena*);
template<> ::sdklt::Entity* Arena::CreateMaybeMessage<::sdklt::Entity>(Arena*);
template<> ::sdklt::ExternEntry* Arena::CreateMaybeMessage<::sdklt::ExternEntry>(Arena*);
template<> ::sdklt::FieldMatch* Arena::CreateMaybeMessage<::sdklt::FieldMatch>(Arena*);
template<> ::sdklt::FieldMatch_Exact* Arena::CreateMaybeMessage<::sdklt::FieldMatch_Exact>(Arena*);
template<> ::sdklt::FieldMatch_LPM* Arena::CreateMaybeMessage<::sdklt::FieldMatch_LPM>(Arena*);
template<> ::sdklt::FieldMatch_Optional* Arena::CreateMaybeMessage<::sdklt::FieldMatch_Optional>(Arena*);
template<> ::sdklt::FieldMatch_Range* Arena::CreateMaybeMessage<::sdklt::FieldMatch_Range>(Arena*);
template<> ::sdklt::FieldMatch_Ternary* Arena::CreateMaybeMessage<::sdklt::FieldMatch_Ternary>(Arena*);
template<> ::sdklt::InitRequest* Arena::CreateMaybeMessage<::sdklt::InitRequest>(Arena*);
template<> ::sdklt::InitState* Arena::CreateMaybeMessage<::sdklt::InitState>(Arena*);
template<> ::sdklt::ReadRequest* Arena::CreateMaybeMessage<::sdklt::ReadRequest>(Arena*);
template<> ::sdklt::ReadResponse* Arena::CreateMaybeMessage<::sdklt::ReadResponse>(Arena*);
template<> ::sdklt::ShellRequest* Arena::CreateMaybeMessage<::sdklt::ShellRequest>(Arena*);
template<> ::sdklt::ShellState* Arena::CreateMaybeMessage<::sdklt::ShellState>(Arena*);
template<> ::sdklt::ShutDownRequest* Arena::CreateMaybeMessage<::sdklt::ShutDownRequest>(Arena*);
template<> ::sdklt::ShutDownState* Arena::CreateMaybeMessage<::sdklt::ShutDownState>(Arena*);
template<> ::sdklt::TableAction* Arena::CreateMaybeMessage<::sdklt::TableAction>(Arena*);
template<> ::sdklt::TableEntry* Arena::CreateMaybeMessage<::sdklt::TableEntry>(Arena*);
template<> ::sdklt::TableEntry_IdleTimeout* Arena::CreateMaybeMessage<::sdklt::TableEntry_IdleTimeout>(Arena*);
template<> ::sdklt::Uint128* Arena::CreateMaybeMessage<::sdklt::Uint128>(Arena*);
template<> ::sdklt::Update* Arena::CreateMaybeMessage<::sdklt::Update>(Arena*);
template<> ::sdklt::WriteRequest* Arena::CreateMaybeMessage<::sdklt::WriteRequest>(Arena*);
template<> ::sdklt::WriteResponse* Arena::CreateMaybeMessage<::sdklt::WriteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sdklt {

enum WriteRequest_Atomicity : int {
  WriteRequest_Atomicity_CONTINUE_ON_ERROR = 0,
  WriteRequest_Atomicity_ROLLBACK_ON_ERROR = 1,
  WriteRequest_Atomicity_DATAPLANE_ATOMIC = 2,
  WriteRequest_Atomicity_WriteRequest_Atomicity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WriteRequest_Atomicity_WriteRequest_Atomicity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WriteRequest_Atomicity_IsValid(int value);
constexpr WriteRequest_Atomicity WriteRequest_Atomicity_Atomicity_MIN = WriteRequest_Atomicity_CONTINUE_ON_ERROR;
constexpr WriteRequest_Atomicity WriteRequest_Atomicity_Atomicity_MAX = WriteRequest_Atomicity_DATAPLANE_ATOMIC;
constexpr int WriteRequest_Atomicity_Atomicity_ARRAYSIZE = WriteRequest_Atomicity_Atomicity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriteRequest_Atomicity_descriptor();
template<typename T>
inline const std::string& WriteRequest_Atomicity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WriteRequest_Atomicity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WriteRequest_Atomicity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WriteRequest_Atomicity_descriptor(), enum_t_value);
}
inline bool WriteRequest_Atomicity_Parse(
    const std::string& name, WriteRequest_Atomicity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WriteRequest_Atomicity>(
    WriteRequest_Atomicity_descriptor(), name, value);
}
enum Update_Type : int {
  Update_Type_UNSPECIFIED = 0,
  Update_Type_INSERT = 1,
  Update_Type_MODIFY = 2,
  Update_Type_DELETE = 3,
  Update_Type_TRAVERSE = 4,
  Update_Type_Update_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Update_Type_Update_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Update_Type_IsValid(int value);
constexpr Update_Type Update_Type_Type_MIN = Update_Type_UNSPECIFIED;
constexpr Update_Type Update_Type_Type_MAX = Update_Type_TRAVERSE;
constexpr int Update_Type_Type_ARRAYSIZE = Update_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Update_Type_descriptor();
template<typename T>
inline const std::string& Update_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Update_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Update_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Update_Type_descriptor(), enum_t_value);
}
inline bool Update_Type_Parse(
    const std::string& name, Update_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Update_Type>(
    Update_Type_descriptor(), name, value);
}
// ===================================================================

class ShellRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.ShellRequest) */ {
 public:
  ShellRequest();
  virtual ~ShellRequest();

  ShellRequest(const ShellRequest& from);
  ShellRequest(ShellRequest&& from) noexcept
    : ShellRequest() {
    *this = ::std::move(from);
  }

  inline ShellRequest& operator=(const ShellRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShellRequest& operator=(ShellRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShellRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShellRequest* internal_default_instance() {
    return reinterpret_cast<const ShellRequest*>(
               &_ShellRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ShellRequest& a, ShellRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShellRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShellRequest* New() const final {
    return CreateMaybeMessage<ShellRequest>(nullptr);
  }

  ShellRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShellRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShellRequest& from);
  void MergeFrom(const ShellRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShellRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.ShellRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 2,
    kUnitFieldNumber = 1,
  };
  // string cmd = 2;
  void clear_cmd();
  const std::string& cmd() const;
  void set_cmd(const std::string& value);
  void set_cmd(std::string&& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  std::string* mutable_cmd();
  std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);
  private:
  const std::string& _internal_cmd() const;
  void _internal_set_cmd(const std::string& value);
  std::string* _internal_mutable_cmd();
  public:

  // uint32 unit = 1;
  void clear_unit();
  ::PROTOBUF_NAMESPACE_ID::uint32 unit() const;
  void set_unit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unit() const;
  void _internal_set_unit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:sdklt.ShellRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class ShellState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.ShellState) */ {
 public:
  ShellState();
  virtual ~ShellState();

  ShellState(const ShellState& from);
  ShellState(ShellState&& from) noexcept
    : ShellState() {
    *this = ::std::move(from);
  }

  inline ShellState& operator=(const ShellState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShellState& operator=(ShellState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShellState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShellState* internal_default_instance() {
    return reinterpret_cast<const ShellState*>(
               &_ShellState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ShellState& a, ShellState& b) {
    a.Swap(&b);
  }
  inline void Swap(ShellState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShellState* New() const final {
    return CreateMaybeMessage<ShellState>(nullptr);
  }

  ShellState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShellState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShellState& from);
  void MergeFrom(const ShellState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShellState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.ShellState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sdklt.ShellState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class InitRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.InitRequest) */ {
 public:
  InitRequest();
  virtual ~InitRequest();

  InitRequest(const InitRequest& from);
  InitRequest(InitRequest&& from) noexcept
    : InitRequest() {
    *this = ::std::move(from);
  }

  inline InitRequest& operator=(const InitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitRequest& operator=(InitRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitRequest* internal_default_instance() {
    return reinterpret_cast<const InitRequest*>(
               &_InitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InitRequest& a, InitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InitRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitRequest* New() const final {
    return CreateMaybeMessage<InitRequest>(nullptr);
  }

  InitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitRequest& from);
  void MergeFrom(const InitRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.InitRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitFieldNumber = 1,
  };
  // uint32 unit = 1;
  void clear_unit();
  ::PROTOBUF_NAMESPACE_ID::uint32 unit() const;
  void set_unit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unit() const;
  void _internal_set_unit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:sdklt.InitRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class InitState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.InitState) */ {
 public:
  InitState();
  virtual ~InitState();

  InitState(const InitState& from);
  InitState(InitState&& from) noexcept
    : InitState() {
    *this = ::std::move(from);
  }

  inline InitState& operator=(const InitState& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitState& operator=(InitState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitState* internal_default_instance() {
    return reinterpret_cast<const InitState*>(
               &_InitState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InitState& a, InitState& b) {
    a.Swap(&b);
  }
  inline void Swap(InitState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitState* New() const final {
    return CreateMaybeMessage<InitState>(nullptr);
  }

  InitState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitState& from);
  void MergeFrom(const InitState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.InitState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sdklt.InitState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class ShutDownRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.ShutDownRequest) */ {
 public:
  ShutDownRequest();
  virtual ~ShutDownRequest();

  ShutDownRequest(const ShutDownRequest& from);
  ShutDownRequest(ShutDownRequest&& from) noexcept
    : ShutDownRequest() {
    *this = ::std::move(from);
  }

  inline ShutDownRequest& operator=(const ShutDownRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutDownRequest& operator=(ShutDownRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShutDownRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShutDownRequest* internal_default_instance() {
    return reinterpret_cast<const ShutDownRequest*>(
               &_ShutDownRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ShutDownRequest& a, ShutDownRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShutDownRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShutDownRequest* New() const final {
    return CreateMaybeMessage<ShutDownRequest>(nullptr);
  }

  ShutDownRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShutDownRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShutDownRequest& from);
  void MergeFrom(const ShutDownRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShutDownRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.ShutDownRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGracefulFieldNumber = 1,
  };
  // bool graceful = 1;
  void clear_graceful();
  bool graceful() const;
  void set_graceful(bool value);
  private:
  bool _internal_graceful() const;
  void _internal_set_graceful(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sdklt.ShutDownRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool graceful_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class ShutDownState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.ShutDownState) */ {
 public:
  ShutDownState();
  virtual ~ShutDownState();

  ShutDownState(const ShutDownState& from);
  ShutDownState(ShutDownState&& from) noexcept
    : ShutDownState() {
    *this = ::std::move(from);
  }

  inline ShutDownState& operator=(const ShutDownState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutDownState& operator=(ShutDownState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShutDownState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShutDownState* internal_default_instance() {
    return reinterpret_cast<const ShutDownState*>(
               &_ShutDownState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ShutDownState& a, ShutDownState& b) {
    a.Swap(&b);
  }
  inline void Swap(ShutDownState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShutDownState* New() const final {
    return CreateMaybeMessage<ShutDownState>(nullptr);
  }

  ShutDownState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShutDownState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShutDownState& from);
  void MergeFrom(const ShutDownState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShutDownState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.ShutDownState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sdklt.ShutDownState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class ReadRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.ReadRequest) */ {
 public:
  ReadRequest();
  virtual ~ReadRequest();

  ReadRequest(const ReadRequest& from);
  ReadRequest(ReadRequest&& from) noexcept
    : ReadRequest() {
    *this = ::std::move(from);
  }

  inline ReadRequest& operator=(const ReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRequest& operator=(ReadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadRequest* internal_default_instance() {
    return reinterpret_cast<const ReadRequest*>(
               &_ReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReadRequest& a, ReadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRequest* New() const final {
    return CreateMaybeMessage<ReadRequest>(nullptr);
  }

  ReadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRequest& from);
  void MergeFrom(const ReadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.ReadRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLtNameFieldNumber = 3,
    kKeyFieldNumber = 4,
    kDeviceIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
  };
  // string lt_name = 3;
  void clear_lt_name();
  const std::string& lt_name() const;
  void set_lt_name(const std::string& value);
  void set_lt_name(std::string&& value);
  void set_lt_name(const char* value);
  void set_lt_name(const char* value, size_t size);
  std::string* mutable_lt_name();
  std::string* release_lt_name();
  void set_allocated_lt_name(std::string* lt_name);
  private:
  const std::string& _internal_lt_name() const;
  void _internal_set_lt_name(const std::string& value);
  std::string* _internal_mutable_lt_name();
  public:

  // string key = 4;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint64 device_id = 1;
  void clear_device_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 device_id() const;
  void set_device_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_device_id() const;
  void _internal_set_device_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 role_id = 2;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:sdklt.ReadRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lt_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 device_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class ReadResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.ReadResponse) */ {
 public:
  ReadResponse();
  virtual ~ReadResponse();

  ReadResponse(const ReadResponse& from);
  ReadResponse(ReadResponse&& from) noexcept
    : ReadResponse() {
    *this = ::std::move(from);
  }

  inline ReadResponse& operator=(const ReadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadResponse& operator=(ReadResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadResponse* internal_default_instance() {
    return reinterpret_cast<const ReadResponse*>(
               &_ReadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReadResponse& a, ReadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadResponse* New() const final {
    return CreateMaybeMessage<ReadResponse>(nullptr);
  }

  ReadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadResponse& from);
  void MergeFrom(const ReadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.ReadResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sdklt.ReadResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class WriteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.WriteRequest) */ {
 public:
  WriteRequest();
  virtual ~WriteRequest();

  WriteRequest(const WriteRequest& from);
  WriteRequest(WriteRequest&& from) noexcept
    : WriteRequest() {
    *this = ::std::move(from);
  }

  inline WriteRequest& operator=(const WriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteRequest& operator=(WriteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteRequest* internal_default_instance() {
    return reinterpret_cast<const WriteRequest*>(
               &_WriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WriteRequest& a, WriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteRequest* New() const final {
    return CreateMaybeMessage<WriteRequest>(nullptr);
  }

  WriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteRequest& from);
  void MergeFrom(const WriteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.WriteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef WriteRequest_Atomicity Atomicity;
  static constexpr Atomicity CONTINUE_ON_ERROR =
    WriteRequest_Atomicity_CONTINUE_ON_ERROR;
  static constexpr Atomicity ROLLBACK_ON_ERROR =
    WriteRequest_Atomicity_ROLLBACK_ON_ERROR;
  static constexpr Atomicity DATAPLANE_ATOMIC =
    WriteRequest_Atomicity_DATAPLANE_ATOMIC;
  static inline bool Atomicity_IsValid(int value) {
    return WriteRequest_Atomicity_IsValid(value);
  }
  static constexpr Atomicity Atomicity_MIN =
    WriteRequest_Atomicity_Atomicity_MIN;
  static constexpr Atomicity Atomicity_MAX =
    WriteRequest_Atomicity_Atomicity_MAX;
  static constexpr int Atomicity_ARRAYSIZE =
    WriteRequest_Atomicity_Atomicity_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Atomicity_descriptor() {
    return WriteRequest_Atomicity_descriptor();
  }
  template<typename T>
  static inline const std::string& Atomicity_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Atomicity>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Atomicity_Name.");
    return WriteRequest_Atomicity_Name(enum_t_value);
  }
  static inline bool Atomicity_Parse(const std::string& name,
      Atomicity* value) {
    return WriteRequest_Atomicity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 4,
    kElectionIdFieldNumber = 3,
    kDeviceIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
    kAtomicityFieldNumber = 5,
  };
  // repeated .sdklt.Update updates = 4;
  int updates_size() const;
  private:
  int _internal_updates_size() const;
  public:
  void clear_updates();
  ::sdklt::Update* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::Update >*
      mutable_updates();
  private:
  const ::sdklt::Update& _internal_updates(int index) const;
  ::sdklt::Update* _internal_add_updates();
  public:
  const ::sdklt::Update& updates(int index) const;
  ::sdklt::Update* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::Update >&
      updates() const;

  // .sdklt.Uint128 election_id = 3;
  bool has_election_id() const;
  private:
  bool _internal_has_election_id() const;
  public:
  void clear_election_id();
  const ::sdklt::Uint128& election_id() const;
  ::sdklt::Uint128* release_election_id();
  ::sdklt::Uint128* mutable_election_id();
  void set_allocated_election_id(::sdklt::Uint128* election_id);
  private:
  const ::sdklt::Uint128& _internal_election_id() const;
  ::sdklt::Uint128* _internal_mutable_election_id();
  public:

  // uint64 device_id = 1;
  void clear_device_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 device_id() const;
  void set_device_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_device_id() const;
  void _internal_set_device_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 role_id = 2;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .sdklt.WriteRequest.Atomicity atomicity = 5;
  void clear_atomicity();
  ::sdklt::WriteRequest_Atomicity atomicity() const;
  void set_atomicity(::sdklt::WriteRequest_Atomicity value);
  private:
  ::sdklt::WriteRequest_Atomicity _internal_atomicity() const;
  void _internal_set_atomicity(::sdklt::WriteRequest_Atomicity value);
  public:

  // @@protoc_insertion_point(class_scope:sdklt.WriteRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::Update > updates_;
  ::sdklt::Uint128* election_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 device_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 role_id_;
  int atomicity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class WriteResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.WriteResponse) */ {
 public:
  WriteResponse();
  virtual ~WriteResponse();

  WriteResponse(const WriteResponse& from);
  WriteResponse(WriteResponse&& from) noexcept
    : WriteResponse() {
    *this = ::std::move(from);
  }

  inline WriteResponse& operator=(const WriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteResponse& operator=(WriteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteResponse* internal_default_instance() {
    return reinterpret_cast<const WriteResponse*>(
               &_WriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(WriteResponse& a, WriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteResponse* New() const final {
    return CreateMaybeMessage<WriteResponse>(nullptr);
  }

  WriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteResponse& from);
  void MergeFrom(const WriteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.WriteResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sdklt.WriteResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class Update :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.Update) */ {
 public:
  Update();
  virtual ~Update();

  Update(const Update& from);
  Update(Update&& from) noexcept
    : Update() {
    *this = ::std::move(from);
  }

  inline Update& operator=(const Update& from) {
    CopyFrom(from);
    return *this;
  }
  inline Update& operator=(Update&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Update& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Update* internal_default_instance() {
    return reinterpret_cast<const Update*>(
               &_Update_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Update& a, Update& b) {
    a.Swap(&b);
  }
  inline void Swap(Update* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Update* New() const final {
    return CreateMaybeMessage<Update>(nullptr);
  }

  Update* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Update>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Update& from);
  void MergeFrom(const Update& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Update* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.Update";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Update_Type Type;
  static constexpr Type UNSPECIFIED =
    Update_Type_UNSPECIFIED;
  static constexpr Type INSERT =
    Update_Type_INSERT;
  static constexpr Type MODIFY =
    Update_Type_MODIFY;
  static constexpr Type DELETE =
    Update_Type_DELETE;
  static constexpr Type TRAVERSE =
    Update_Type_TRAVERSE;
  static inline bool Type_IsValid(int value) {
    return Update_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Update_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Update_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Update_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Update_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Update_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Update_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntityFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .sdklt.Entity entity = 2;
  bool has_entity() const;
  private:
  bool _internal_has_entity() const;
  public:
  void clear_entity();
  const ::sdklt::Entity& entity() const;
  ::sdklt::Entity* release_entity();
  ::sdklt::Entity* mutable_entity();
  void set_allocated_entity(::sdklt::Entity* entity);
  private:
  const ::sdklt::Entity& _internal_entity() const;
  ::sdklt::Entity* _internal_mutable_entity();
  public:

  // .sdklt.Update.Type type = 1;
  void clear_type();
  ::sdklt::Update_Type type() const;
  void set_type(::sdklt::Update_Type value);
  private:
  ::sdklt::Update_Type _internal_type() const;
  void _internal_set_type(::sdklt::Update_Type value);
  public:

  // @@protoc_insertion_point(class_scope:sdklt.Update)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sdklt::Entity* entity_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class Entity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.Entity) */ {
 public:
  Entity();
  virtual ~Entity();

  Entity(const Entity& from);
  Entity(Entity&& from) noexcept
    : Entity() {
    *this = ::std::move(from);
  }

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entity& operator=(Entity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entity& default_instance();

  enum EntityCase {
    kTableEntry = 2,
    ENTITY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
               &_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Entity& a, Entity& b) {
    a.Swap(&b);
  }
  inline void Swap(Entity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Entity* New() const final {
    return CreateMaybeMessage<Entity>(nullptr);
  }

  Entity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.Entity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableEntryFieldNumber = 2,
  };
  // .sdklt.TableEntry table_entry = 2;
  bool has_table_entry() const;
  private:
  bool _internal_has_table_entry() const;
  public:
  void clear_table_entry();
  const ::sdklt::TableEntry& table_entry() const;
  ::sdklt::TableEntry* release_table_entry();
  ::sdklt::TableEntry* mutable_table_entry();
  void set_allocated_table_entry(::sdklt::TableEntry* table_entry);
  private:
  const ::sdklt::TableEntry& _internal_table_entry() const;
  ::sdklt::TableEntry* _internal_mutable_table_entry();
  public:

  void clear_entity();
  EntityCase entity_case() const;
  // @@protoc_insertion_point(class_scope:sdklt.Entity)
 private:
  class _Internal;
  void set_has_table_entry();

  inline bool has_entity() const;
  inline void clear_has_entity();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union EntityUnion {
    EntityUnion() {}
    ::sdklt::TableEntry* table_entry_;
  } entity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class ExternEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.ExternEntry) */ {
 public:
  ExternEntry();
  virtual ~ExternEntry();

  ExternEntry(const ExternEntry& from);
  ExternEntry(ExternEntry&& from) noexcept
    : ExternEntry() {
    *this = ::std::move(from);
  }

  inline ExternEntry& operator=(const ExternEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExternEntry& operator=(ExternEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExternEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExternEntry* internal_default_instance() {
    return reinterpret_cast<const ExternEntry*>(
               &_ExternEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ExternEntry& a, ExternEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ExternEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExternEntry* New() const final {
    return CreateMaybeMessage<ExternEntry>(nullptr);
  }

  ExternEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExternEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExternEntry& from);
  void MergeFrom(const ExternEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.ExternEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 3,
    kExternTypeIdFieldNumber = 1,
    kExternIdFieldNumber = 2,
  };
  // .google.protobuf.Any entry = 3;
  bool has_entry() const;
  private:
  bool _internal_has_entry() const;
  public:
  void clear_entry();
  const PROTOBUF_NAMESPACE_ID::Any& entry() const;
  PROTOBUF_NAMESPACE_ID::Any* release_entry();
  PROTOBUF_NAMESPACE_ID::Any* mutable_entry();
  void set_allocated_entry(PROTOBUF_NAMESPACE_ID::Any* entry);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_entry() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_entry();
  public:

  // uint32 extern_type_id = 1;
  void clear_extern_type_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 extern_type_id() const;
  void set_extern_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_extern_type_id() const;
  void _internal_set_extern_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 extern_id = 2;
  void clear_extern_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 extern_id() const;
  void set_extern_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_extern_id() const;
  void _internal_set_extern_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:sdklt.ExternEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Any* entry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 extern_type_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 extern_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class TableEntry_IdleTimeout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.TableEntry.IdleTimeout) */ {
 public:
  TableEntry_IdleTimeout();
  virtual ~TableEntry_IdleTimeout();

  TableEntry_IdleTimeout(const TableEntry_IdleTimeout& from);
  TableEntry_IdleTimeout(TableEntry_IdleTimeout&& from) noexcept
    : TableEntry_IdleTimeout() {
    *this = ::std::move(from);
  }

  inline TableEntry_IdleTimeout& operator=(const TableEntry_IdleTimeout& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableEntry_IdleTimeout& operator=(TableEntry_IdleTimeout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableEntry_IdleTimeout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableEntry_IdleTimeout* internal_default_instance() {
    return reinterpret_cast<const TableEntry_IdleTimeout*>(
               &_TableEntry_IdleTimeout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TableEntry_IdleTimeout& a, TableEntry_IdleTimeout& b) {
    a.Swap(&b);
  }
  inline void Swap(TableEntry_IdleTimeout* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableEntry_IdleTimeout* New() const final {
    return CreateMaybeMessage<TableEntry_IdleTimeout>(nullptr);
  }

  TableEntry_IdleTimeout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableEntry_IdleTimeout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableEntry_IdleTimeout& from);
  void MergeFrom(const TableEntry_IdleTimeout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableEntry_IdleTimeout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.TableEntry.IdleTimeout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElapsedNsFieldNumber = 1,
  };
  // int64 elapsed_ns = 1;
  void clear_elapsed_ns();
  ::PROTOBUF_NAMESPACE_ID::int64 elapsed_ns() const;
  void set_elapsed_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_elapsed_ns() const;
  void _internal_set_elapsed_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:sdklt.TableEntry.IdleTimeout)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 elapsed_ns_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class TableEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.TableEntry) */ {
 public:
  TableEntry();
  virtual ~TableEntry();

  TableEntry(const TableEntry& from);
  TableEntry(TableEntry&& from) noexcept
    : TableEntry() {
    *this = ::std::move(from);
  }

  inline TableEntry& operator=(const TableEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableEntry& operator=(TableEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableEntry* internal_default_instance() {
    return reinterpret_cast<const TableEntry*>(
               &_TableEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TableEntry& a, TableEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(TableEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableEntry* New() const final {
    return CreateMaybeMessage<TableEntry>(nullptr);
  }

  TableEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableEntry& from);
  void MergeFrom(const TableEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.TableEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TableEntry_IdleTimeout IdleTimeout;

  // accessors -------------------------------------------------------

  enum : int {
    kMatchFieldNumber = 2,
    kMetadataFieldNumber = 11,
    kActionFieldNumber = 3,
    kTimeSinceLastHitFieldNumber = 10,
    kTableIdFieldNumber = 1,
    kPriorityFieldNumber = 4,
    kControllerMetadataFieldNumber = 5,
    kIdleTimeoutNsFieldNumber = 9,
    kIsDefaultActionFieldNumber = 8,
  };
  // repeated .sdklt.FieldMatch match = 2;
  int match_size() const;
  private:
  int _internal_match_size() const;
  public:
  void clear_match();
  ::sdklt::FieldMatch* mutable_match(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::FieldMatch >*
      mutable_match();
  private:
  const ::sdklt::FieldMatch& _internal_match(int index) const;
  ::sdklt::FieldMatch* _internal_add_match();
  public:
  const ::sdklt::FieldMatch& match(int index) const;
  ::sdklt::FieldMatch* add_match();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::FieldMatch >&
      match() const;

  // bytes metadata = 11;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const void* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // .sdklt.TableAction action = 3;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::sdklt::TableAction& action() const;
  ::sdklt::TableAction* release_action();
  ::sdklt::TableAction* mutable_action();
  void set_allocated_action(::sdklt::TableAction* action);
  private:
  const ::sdklt::TableAction& _internal_action() const;
  ::sdklt::TableAction* _internal_mutable_action();
  public:

  // .sdklt.TableEntry.IdleTimeout time_since_last_hit = 10;
  bool has_time_since_last_hit() const;
  private:
  bool _internal_has_time_since_last_hit() const;
  public:
  void clear_time_since_last_hit();
  const ::sdklt::TableEntry_IdleTimeout& time_since_last_hit() const;
  ::sdklt::TableEntry_IdleTimeout* release_time_since_last_hit();
  ::sdklt::TableEntry_IdleTimeout* mutable_time_since_last_hit();
  void set_allocated_time_since_last_hit(::sdklt::TableEntry_IdleTimeout* time_since_last_hit);
  private:
  const ::sdklt::TableEntry_IdleTimeout& _internal_time_since_last_hit() const;
  ::sdklt::TableEntry_IdleTimeout* _internal_mutable_time_since_last_hit();
  public:

  // uint32 table_id = 1;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 priority = 4;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 controller_metadata = 5 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_controller_metadata();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint64 controller_metadata() const;
  PROTOBUF_DEPRECATED void set_controller_metadata(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_controller_metadata() const;
  void _internal_set_controller_metadata(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 idle_timeout_ns = 9;
  void clear_idle_timeout_ns();
  ::PROTOBUF_NAMESPACE_ID::int64 idle_timeout_ns() const;
  void set_idle_timeout_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_idle_timeout_ns() const;
  void _internal_set_idle_timeout_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_default_action = 8;
  void clear_is_default_action();
  bool is_default_action() const;
  void set_is_default_action(bool value);
  private:
  bool _internal_is_default_action() const;
  void _internal_set_is_default_action(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sdklt.TableEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::FieldMatch > match_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::sdklt::TableAction* action_;
  ::sdklt::TableEntry_IdleTimeout* time_since_last_hit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 table_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  ::PROTOBUF_NAMESPACE_ID::uint64 controller_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 idle_timeout_ns_;
  bool is_default_action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class FieldMatch_Exact :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.FieldMatch.Exact) */ {
 public:
  FieldMatch_Exact();
  virtual ~FieldMatch_Exact();

  FieldMatch_Exact(const FieldMatch_Exact& from);
  FieldMatch_Exact(FieldMatch_Exact&& from) noexcept
    : FieldMatch_Exact() {
    *this = ::std::move(from);
  }

  inline FieldMatch_Exact& operator=(const FieldMatch_Exact& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldMatch_Exact& operator=(FieldMatch_Exact&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldMatch_Exact& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldMatch_Exact* internal_default_instance() {
    return reinterpret_cast<const FieldMatch_Exact*>(
               &_FieldMatch_Exact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(FieldMatch_Exact& a, FieldMatch_Exact& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldMatch_Exact* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldMatch_Exact* New() const final {
    return CreateMaybeMessage<FieldMatch_Exact>(nullptr);
  }

  FieldMatch_Exact* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldMatch_Exact>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldMatch_Exact& from);
  void MergeFrom(const FieldMatch_Exact& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldMatch_Exact* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.FieldMatch.Exact";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:sdklt.FieldMatch.Exact)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class FieldMatch_Ternary :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.FieldMatch.Ternary) */ {
 public:
  FieldMatch_Ternary();
  virtual ~FieldMatch_Ternary();

  FieldMatch_Ternary(const FieldMatch_Ternary& from);
  FieldMatch_Ternary(FieldMatch_Ternary&& from) noexcept
    : FieldMatch_Ternary() {
    *this = ::std::move(from);
  }

  inline FieldMatch_Ternary& operator=(const FieldMatch_Ternary& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldMatch_Ternary& operator=(FieldMatch_Ternary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldMatch_Ternary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldMatch_Ternary* internal_default_instance() {
    return reinterpret_cast<const FieldMatch_Ternary*>(
               &_FieldMatch_Ternary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(FieldMatch_Ternary& a, FieldMatch_Ternary& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldMatch_Ternary* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldMatch_Ternary* New() const final {
    return CreateMaybeMessage<FieldMatch_Ternary>(nullptr);
  }

  FieldMatch_Ternary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldMatch_Ternary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldMatch_Ternary& from);
  void MergeFrom(const FieldMatch_Ternary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldMatch_Ternary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.FieldMatch.Ternary";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kMaskFieldNumber = 2,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bytes mask = 2;
  void clear_mask();
  const std::string& mask() const;
  void set_mask(const std::string& value);
  void set_mask(std::string&& value);
  void set_mask(const char* value);
  void set_mask(const void* value, size_t size);
  std::string* mutable_mask();
  std::string* release_mask();
  void set_allocated_mask(std::string* mask);
  private:
  const std::string& _internal_mask() const;
  void _internal_set_mask(const std::string& value);
  std::string* _internal_mutable_mask();
  public:

  // @@protoc_insertion_point(class_scope:sdklt.FieldMatch.Ternary)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class FieldMatch_LPM :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.FieldMatch.LPM) */ {
 public:
  FieldMatch_LPM();
  virtual ~FieldMatch_LPM();

  FieldMatch_LPM(const FieldMatch_LPM& from);
  FieldMatch_LPM(FieldMatch_LPM&& from) noexcept
    : FieldMatch_LPM() {
    *this = ::std::move(from);
  }

  inline FieldMatch_LPM& operator=(const FieldMatch_LPM& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldMatch_LPM& operator=(FieldMatch_LPM&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldMatch_LPM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldMatch_LPM* internal_default_instance() {
    return reinterpret_cast<const FieldMatch_LPM*>(
               &_FieldMatch_LPM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(FieldMatch_LPM& a, FieldMatch_LPM& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldMatch_LPM* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldMatch_LPM* New() const final {
    return CreateMaybeMessage<FieldMatch_LPM>(nullptr);
  }

  FieldMatch_LPM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldMatch_LPM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldMatch_LPM& from);
  void MergeFrom(const FieldMatch_LPM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldMatch_LPM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.FieldMatch.LPM";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kPrefixLenFieldNumber = 2,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 prefix_len = 2;
  void clear_prefix_len();
  ::PROTOBUF_NAMESPACE_ID::int32 prefix_len() const;
  void set_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prefix_len() const;
  void _internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sdklt.FieldMatch.LPM)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 prefix_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class FieldMatch_Range :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.FieldMatch.Range) */ {
 public:
  FieldMatch_Range();
  virtual ~FieldMatch_Range();

  FieldMatch_Range(const FieldMatch_Range& from);
  FieldMatch_Range(FieldMatch_Range&& from) noexcept
    : FieldMatch_Range() {
    *this = ::std::move(from);
  }

  inline FieldMatch_Range& operator=(const FieldMatch_Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldMatch_Range& operator=(FieldMatch_Range&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldMatch_Range& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldMatch_Range* internal_default_instance() {
    return reinterpret_cast<const FieldMatch_Range*>(
               &_FieldMatch_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(FieldMatch_Range& a, FieldMatch_Range& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldMatch_Range* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldMatch_Range* New() const final {
    return CreateMaybeMessage<FieldMatch_Range>(nullptr);
  }

  FieldMatch_Range* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldMatch_Range>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldMatch_Range& from);
  void MergeFrom(const FieldMatch_Range& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldMatch_Range* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.FieldMatch.Range";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowFieldNumber = 1,
    kHighFieldNumber = 2,
  };
  // bytes low = 1;
  void clear_low();
  const std::string& low() const;
  void set_low(const std::string& value);
  void set_low(std::string&& value);
  void set_low(const char* value);
  void set_low(const void* value, size_t size);
  std::string* mutable_low();
  std::string* release_low();
  void set_allocated_low(std::string* low);
  private:
  const std::string& _internal_low() const;
  void _internal_set_low(const std::string& value);
  std::string* _internal_mutable_low();
  public:

  // bytes high = 2;
  void clear_high();
  const std::string& high() const;
  void set_high(const std::string& value);
  void set_high(std::string&& value);
  void set_high(const char* value);
  void set_high(const void* value, size_t size);
  std::string* mutable_high();
  std::string* release_high();
  void set_allocated_high(std::string* high);
  private:
  const std::string& _internal_high() const;
  void _internal_set_high(const std::string& value);
  std::string* _internal_mutable_high();
  public:

  // @@protoc_insertion_point(class_scope:sdklt.FieldMatch.Range)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr low_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr high_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class FieldMatch_Optional :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.FieldMatch.Optional) */ {
 public:
  FieldMatch_Optional();
  virtual ~FieldMatch_Optional();

  FieldMatch_Optional(const FieldMatch_Optional& from);
  FieldMatch_Optional(FieldMatch_Optional&& from) noexcept
    : FieldMatch_Optional() {
    *this = ::std::move(from);
  }

  inline FieldMatch_Optional& operator=(const FieldMatch_Optional& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldMatch_Optional& operator=(FieldMatch_Optional&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldMatch_Optional& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldMatch_Optional* internal_default_instance() {
    return reinterpret_cast<const FieldMatch_Optional*>(
               &_FieldMatch_Optional_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(FieldMatch_Optional& a, FieldMatch_Optional& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldMatch_Optional* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldMatch_Optional* New() const final {
    return CreateMaybeMessage<FieldMatch_Optional>(nullptr);
  }

  FieldMatch_Optional* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldMatch_Optional>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldMatch_Optional& from);
  void MergeFrom(const FieldMatch_Optional& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldMatch_Optional* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.FieldMatch.Optional";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:sdklt.FieldMatch.Optional)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class FieldMatch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.FieldMatch) */ {
 public:
  FieldMatch();
  virtual ~FieldMatch();

  FieldMatch(const FieldMatch& from);
  FieldMatch(FieldMatch&& from) noexcept
    : FieldMatch() {
    *this = ::std::move(from);
  }

  inline FieldMatch& operator=(const FieldMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldMatch& operator=(FieldMatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldMatch& default_instance();

  enum FieldMatchTypeCase {
    kExact = 2,
    kTernary = 3,
    kLpm = 4,
    kRange = 6,
    kOptional = 7,
    kOther = 100,
    FIELD_MATCH_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldMatch* internal_default_instance() {
    return reinterpret_cast<const FieldMatch*>(
               &_FieldMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(FieldMatch& a, FieldMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldMatch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldMatch* New() const final {
    return CreateMaybeMessage<FieldMatch>(nullptr);
  }

  FieldMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldMatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldMatch& from);
  void MergeFrom(const FieldMatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldMatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.FieldMatch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FieldMatch_Exact Exact;
  typedef FieldMatch_Ternary Ternary;
  typedef FieldMatch_LPM LPM;
  typedef FieldMatch_Range Range;
  typedef FieldMatch_Optional Optional;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldIdFieldNumber = 1,
    kExactFieldNumber = 2,
    kTernaryFieldNumber = 3,
    kLpmFieldNumber = 4,
    kRangeFieldNumber = 6,
    kOptionalFieldNumber = 7,
    kOtherFieldNumber = 100,
  };
  // uint32 field_id = 1;
  void clear_field_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 field_id() const;
  void set_field_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_field_id() const;
  void _internal_set_field_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .sdklt.FieldMatch.Exact exact = 2;
  bool has_exact() const;
  private:
  bool _internal_has_exact() const;
  public:
  void clear_exact();
  const ::sdklt::FieldMatch_Exact& exact() const;
  ::sdklt::FieldMatch_Exact* release_exact();
  ::sdklt::FieldMatch_Exact* mutable_exact();
  void set_allocated_exact(::sdklt::FieldMatch_Exact* exact);
  private:
  const ::sdklt::FieldMatch_Exact& _internal_exact() const;
  ::sdklt::FieldMatch_Exact* _internal_mutable_exact();
  public:

  // .sdklt.FieldMatch.Ternary ternary = 3;
  bool has_ternary() const;
  private:
  bool _internal_has_ternary() const;
  public:
  void clear_ternary();
  const ::sdklt::FieldMatch_Ternary& ternary() const;
  ::sdklt::FieldMatch_Ternary* release_ternary();
  ::sdklt::FieldMatch_Ternary* mutable_ternary();
  void set_allocated_ternary(::sdklt::FieldMatch_Ternary* ternary);
  private:
  const ::sdklt::FieldMatch_Ternary& _internal_ternary() const;
  ::sdklt::FieldMatch_Ternary* _internal_mutable_ternary();
  public:

  // .sdklt.FieldMatch.LPM lpm = 4;
  bool has_lpm() const;
  private:
  bool _internal_has_lpm() const;
  public:
  void clear_lpm();
  const ::sdklt::FieldMatch_LPM& lpm() const;
  ::sdklt::FieldMatch_LPM* release_lpm();
  ::sdklt::FieldMatch_LPM* mutable_lpm();
  void set_allocated_lpm(::sdklt::FieldMatch_LPM* lpm);
  private:
  const ::sdklt::FieldMatch_LPM& _internal_lpm() const;
  ::sdklt::FieldMatch_LPM* _internal_mutable_lpm();
  public:

  // .sdklt.FieldMatch.Range range = 6;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::sdklt::FieldMatch_Range& range() const;
  ::sdklt::FieldMatch_Range* release_range();
  ::sdklt::FieldMatch_Range* mutable_range();
  void set_allocated_range(::sdklt::FieldMatch_Range* range);
  private:
  const ::sdklt::FieldMatch_Range& _internal_range() const;
  ::sdklt::FieldMatch_Range* _internal_mutable_range();
  public:

  // .sdklt.FieldMatch.Optional optional = 7;
  bool has_optional() const;
  private:
  bool _internal_has_optional() const;
  public:
  void clear_optional();
  const ::sdklt::FieldMatch_Optional& optional() const;
  ::sdklt::FieldMatch_Optional* release_optional();
  ::sdklt::FieldMatch_Optional* mutable_optional();
  void set_allocated_optional(::sdklt::FieldMatch_Optional* optional);
  private:
  const ::sdklt::FieldMatch_Optional& _internal_optional() const;
  ::sdklt::FieldMatch_Optional* _internal_mutable_optional();
  public:

  // .google.protobuf.Any other = 100;
  bool has_other() const;
  private:
  bool _internal_has_other() const;
  public:
  void clear_other();
  const PROTOBUF_NAMESPACE_ID::Any& other() const;
  PROTOBUF_NAMESPACE_ID::Any* release_other();
  PROTOBUF_NAMESPACE_ID::Any* mutable_other();
  void set_allocated_other(PROTOBUF_NAMESPACE_ID::Any* other);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_other() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_other();
  public:

  void clear_field_match_type();
  FieldMatchTypeCase field_match_type_case() const;
  // @@protoc_insertion_point(class_scope:sdklt.FieldMatch)
 private:
  class _Internal;
  void set_has_exact();
  void set_has_ternary();
  void set_has_lpm();
  void set_has_range();
  void set_has_optional();
  void set_has_other();

  inline bool has_field_match_type() const;
  inline void clear_has_field_match_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 field_id_;
  union FieldMatchTypeUnion {
    FieldMatchTypeUnion() {}
    ::sdklt::FieldMatch_Exact* exact_;
    ::sdklt::FieldMatch_Ternary* ternary_;
    ::sdklt::FieldMatch_LPM* lpm_;
    ::sdklt::FieldMatch_Range* range_;
    ::sdklt::FieldMatch_Optional* optional_;
    PROTOBUF_NAMESPACE_ID::Any* other_;
  } field_match_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class TableAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.TableAction) */ {
 public:
  TableAction();
  virtual ~TableAction();

  TableAction(const TableAction& from);
  TableAction(TableAction&& from) noexcept
    : TableAction() {
    *this = ::std::move(from);
  }

  inline TableAction& operator=(const TableAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableAction& operator=(TableAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableAction& default_instance();

  enum TypeCase {
    kAction = 1,
    kActionProfileMemberId = 2,
    kActionProfileGroupId = 3,
    kActionProfileActionSet = 4,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableAction* internal_default_instance() {
    return reinterpret_cast<const TableAction*>(
               &_TableAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TableAction& a, TableAction& b) {
    a.Swap(&b);
  }
  inline void Swap(TableAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableAction* New() const final {
    return CreateMaybeMessage<TableAction>(nullptr);
  }

  TableAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableAction& from);
  void MergeFrom(const TableAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.TableAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kActionProfileMemberIdFieldNumber = 2,
    kActionProfileGroupIdFieldNumber = 3,
    kActionProfileActionSetFieldNumber = 4,
  };
  // .sdklt.Action action = 1;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::sdklt::Action& action() const;
  ::sdklt::Action* release_action();
  ::sdklt::Action* mutable_action();
  void set_allocated_action(::sdklt::Action* action);
  private:
  const ::sdklt::Action& _internal_action() const;
  ::sdklt::Action* _internal_mutable_action();
  public:

  // uint32 action_profile_member_id = 2;
  private:
  bool _internal_has_action_profile_member_id() const;
  public:
  void clear_action_profile_member_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 action_profile_member_id() const;
  void set_action_profile_member_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_action_profile_member_id() const;
  void _internal_set_action_profile_member_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 action_profile_group_id = 3;
  private:
  bool _internal_has_action_profile_group_id() const;
  public:
  void clear_action_profile_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 action_profile_group_id() const;
  void set_action_profile_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_action_profile_group_id() const;
  void _internal_set_action_profile_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .sdklt.ActionProfileActionSet action_profile_action_set = 4;
  bool has_action_profile_action_set() const;
  private:
  bool _internal_has_action_profile_action_set() const;
  public:
  void clear_action_profile_action_set();
  const ::sdklt::ActionProfileActionSet& action_profile_action_set() const;
  ::sdklt::ActionProfileActionSet* release_action_profile_action_set();
  ::sdklt::ActionProfileActionSet* mutable_action_profile_action_set();
  void set_allocated_action_profile_action_set(::sdklt::ActionProfileActionSet* action_profile_action_set);
  private:
  const ::sdklt::ActionProfileActionSet& _internal_action_profile_action_set() const;
  ::sdklt::ActionProfileActionSet* _internal_mutable_action_profile_action_set();
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:sdklt.TableAction)
 private:
  class _Internal;
  void set_has_action();
  void set_has_action_profile_member_id();
  void set_has_action_profile_group_id();
  void set_has_action_profile_action_set();

  inline bool has_type() const;
  inline void clear_has_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::sdklt::Action* action_;
    ::PROTOBUF_NAMESPACE_ID::uint32 action_profile_member_id_;
    ::PROTOBUF_NAMESPACE_ID::uint32 action_profile_group_id_;
    ::sdklt::ActionProfileActionSet* action_profile_action_set_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class Action_Param :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.Action.Param) */ {
 public:
  Action_Param();
  virtual ~Action_Param();

  Action_Param(const Action_Param& from);
  Action_Param(Action_Param&& from) noexcept
    : Action_Param() {
    *this = ::std::move(from);
  }

  inline Action_Param& operator=(const Action_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action_Param& operator=(Action_Param&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Action_Param& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action_Param* internal_default_instance() {
    return reinterpret_cast<const Action_Param*>(
               &_Action_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Action_Param& a, Action_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(Action_Param* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action_Param* New() const final {
    return CreateMaybeMessage<Action_Param>(nullptr);
  }

  Action_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action_Param& from);
  void MergeFrom(const Action_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.Action.Param";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kParamIdFieldNumber = 2,
  };
  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 param_id = 2;
  void clear_param_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 param_id() const;
  void set_param_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_param_id() const;
  void _internal_set_param_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:sdklt.Action.Param)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 param_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class Action :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.Action) */ {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Action& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return CreateMaybeMessage<Action>(nullptr);
  }

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.Action";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Action_Param Param;

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 4,
    kActionIdFieldNumber = 1,
  };
  // repeated .sdklt.Action.Param params = 4;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::sdklt::Action_Param* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::Action_Param >*
      mutable_params();
  private:
  const ::sdklt::Action_Param& _internal_params(int index) const;
  ::sdklt::Action_Param* _internal_add_params();
  public:
  const ::sdklt::Action_Param& params(int index) const;
  ::sdklt::Action_Param* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::Action_Param >&
      params() const;

  // uint32 action_id = 1;
  void clear_action_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 action_id() const;
  void set_action_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_action_id() const;
  void _internal_set_action_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:sdklt.Action)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::Action_Param > params_;
  ::PROTOBUF_NAMESPACE_ID::uint32 action_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class ActionProfileActionSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.ActionProfileActionSet) */ {
 public:
  ActionProfileActionSet();
  virtual ~ActionProfileActionSet();

  ActionProfileActionSet(const ActionProfileActionSet& from);
  ActionProfileActionSet(ActionProfileActionSet&& from) noexcept
    : ActionProfileActionSet() {
    *this = ::std::move(from);
  }

  inline ActionProfileActionSet& operator=(const ActionProfileActionSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionProfileActionSet& operator=(ActionProfileActionSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionProfileActionSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionProfileActionSet* internal_default_instance() {
    return reinterpret_cast<const ActionProfileActionSet*>(
               &_ActionProfileActionSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ActionProfileActionSet& a, ActionProfileActionSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionProfileActionSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionProfileActionSet* New() const final {
    return CreateMaybeMessage<ActionProfileActionSet>(nullptr);
  }

  ActionProfileActionSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionProfileActionSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionProfileActionSet& from);
  void MergeFrom(const ActionProfileActionSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionProfileActionSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.ActionProfileActionSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionProfileActionsFieldNumber = 1,
  };
  // repeated .sdklt.ActionProfileAction action_profile_actions = 1;
  int action_profile_actions_size() const;
  private:
  int _internal_action_profile_actions_size() const;
  public:
  void clear_action_profile_actions();
  ::sdklt::ActionProfileAction* mutable_action_profile_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::ActionProfileAction >*
      mutable_action_profile_actions();
  private:
  const ::sdklt::ActionProfileAction& _internal_action_profile_actions(int index) const;
  ::sdklt::ActionProfileAction* _internal_add_action_profile_actions();
  public:
  const ::sdklt::ActionProfileAction& action_profile_actions(int index) const;
  ::sdklt::ActionProfileAction* add_action_profile_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::ActionProfileAction >&
      action_profile_actions() const;

  // @@protoc_insertion_point(class_scope:sdklt.ActionProfileActionSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::ActionProfileAction > action_profile_actions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class ActionProfileAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.ActionProfileAction) */ {
 public:
  ActionProfileAction();
  virtual ~ActionProfileAction();

  ActionProfileAction(const ActionProfileAction& from);
  ActionProfileAction(ActionProfileAction&& from) noexcept
    : ActionProfileAction() {
    *this = ::std::move(from);
  }

  inline ActionProfileAction& operator=(const ActionProfileAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionProfileAction& operator=(ActionProfileAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionProfileAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionProfileAction* internal_default_instance() {
    return reinterpret_cast<const ActionProfileAction*>(
               &_ActionProfileAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ActionProfileAction& a, ActionProfileAction& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionProfileAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionProfileAction* New() const final {
    return CreateMaybeMessage<ActionProfileAction>(nullptr);
  }

  ActionProfileAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionProfileAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionProfileAction& from);
  void MergeFrom(const ActionProfileAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionProfileAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.ActionProfileAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kWeightFieldNumber = 2,
    kWatchFieldNumber = 3,
  };
  // .sdklt.Action action = 1;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::sdklt::Action& action() const;
  ::sdklt::Action* release_action();
  ::sdklt::Action* mutable_action();
  void set_allocated_action(::sdklt::Action* action);
  private:
  const ::sdklt::Action& _internal_action() const;
  ::sdklt::Action* _internal_mutable_action();
  public:

  // int32 weight = 2;
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::int32 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 watch = 3;
  void clear_watch();
  ::PROTOBUF_NAMESPACE_ID::int32 watch() const;
  void set_watch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_watch() const;
  void _internal_set_watch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sdklt.ActionProfileAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sdklt::Action* action_;
  ::PROTOBUF_NAMESPACE_ID::int32 weight_;
  ::PROTOBUF_NAMESPACE_ID::int32 watch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// -------------------------------------------------------------------

class Uint128 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdklt.Uint128) */ {
 public:
  Uint128();
  virtual ~Uint128();

  Uint128(const Uint128& from);
  Uint128(Uint128&& from) noexcept
    : Uint128() {
    *this = ::std::move(from);
  }

  inline Uint128& operator=(const Uint128& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uint128& operator=(Uint128&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Uint128& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Uint128* internal_default_instance() {
    return reinterpret_cast<const Uint128*>(
               &_Uint128_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Uint128& a, Uint128& b) {
    a.Swap(&b);
  }
  inline void Swap(Uint128* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Uint128* New() const final {
    return CreateMaybeMessage<Uint128>(nullptr);
  }

  Uint128* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Uint128>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Uint128& from);
  void MergeFrom(const Uint128& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uint128* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdklt.Uint128";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdklt_2eproto);
    return ::descriptor_table_sdklt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighFieldNumber = 1,
    kLowFieldNumber = 2,
  };
  // uint64 high = 1;
  void clear_high();
  ::PROTOBUF_NAMESPACE_ID::uint64 high() const;
  void set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_high() const;
  void _internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 low = 2;
  void clear_low();
  ::PROTOBUF_NAMESPACE_ID::uint64 low() const;
  void set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_low() const;
  void _internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:sdklt.Uint128)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 high_;
  ::PROTOBUF_NAMESPACE_ID::uint64 low_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdklt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ShellRequest

// uint32 unit = 1;
inline void ShellRequest::clear_unit() {
  unit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShellRequest::_internal_unit() const {
  return unit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShellRequest::unit() const {
  // @@protoc_insertion_point(field_get:sdklt.ShellRequest.unit)
  return _internal_unit();
}
inline void ShellRequest::_internal_set_unit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  unit_ = value;
}
inline void ShellRequest::set_unit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:sdklt.ShellRequest.unit)
}

// string cmd = 2;
inline void ShellRequest::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ShellRequest::cmd() const {
  // @@protoc_insertion_point(field_get:sdklt.ShellRequest.cmd)
  return _internal_cmd();
}
inline void ShellRequest::set_cmd(const std::string& value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:sdklt.ShellRequest.cmd)
}
inline std::string* ShellRequest::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable:sdklt.ShellRequest.cmd)
  return _internal_mutable_cmd();
}
inline const std::string& ShellRequest::_internal_cmd() const {
  return cmd_.GetNoArena();
}
inline void ShellRequest::_internal_set_cmd(const std::string& value) {
  
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ShellRequest::set_cmd(std::string&& value) {
  
  cmd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdklt.ShellRequest.cmd)
}
inline void ShellRequest::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdklt.ShellRequest.cmd)
}
inline void ShellRequest::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdklt.ShellRequest.cmd)
}
inline std::string* ShellRequest::_internal_mutable_cmd() {
  
  return cmd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ShellRequest::release_cmd() {
  // @@protoc_insertion_point(field_release:sdklt.ShellRequest.cmd)
  
  return cmd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ShellRequest::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:sdklt.ShellRequest.cmd)
}

// -------------------------------------------------------------------

// ShellState

// string message = 1;
inline void ShellState::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ShellState::message() const {
  // @@protoc_insertion_point(field_get:sdklt.ShellState.message)
  return _internal_message();
}
inline void ShellState::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:sdklt.ShellState.message)
}
inline std::string* ShellState::mutable_message() {
  // @@protoc_insertion_point(field_mutable:sdklt.ShellState.message)
  return _internal_mutable_message();
}
inline const std::string& ShellState::_internal_message() const {
  return message_.GetNoArena();
}
inline void ShellState::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ShellState::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdklt.ShellState.message)
}
inline void ShellState::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdklt.ShellState.message)
}
inline void ShellState::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdklt.ShellState.message)
}
inline std::string* ShellState::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ShellState::release_message() {
  // @@protoc_insertion_point(field_release:sdklt.ShellState.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ShellState::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:sdklt.ShellState.message)
}

// bool success = 2;
inline void ShellState::clear_success() {
  success_ = false;
}
inline bool ShellState::_internal_success() const {
  return success_;
}
inline bool ShellState::success() const {
  // @@protoc_insertion_point(field_get:sdklt.ShellState.success)
  return _internal_success();
}
inline void ShellState::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ShellState::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sdklt.ShellState.success)
}

// -------------------------------------------------------------------

// InitRequest

// uint32 unit = 1;
inline void InitRequest::clear_unit() {
  unit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InitRequest::_internal_unit() const {
  return unit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InitRequest::unit() const {
  // @@protoc_insertion_point(field_get:sdklt.InitRequest.unit)
  return _internal_unit();
}
inline void InitRequest::_internal_set_unit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  unit_ = value;
}
inline void InitRequest::set_unit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:sdklt.InitRequest.unit)
}

// -------------------------------------------------------------------

// InitState

// string message = 1;
inline void InitState::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InitState::message() const {
  // @@protoc_insertion_point(field_get:sdklt.InitState.message)
  return _internal_message();
}
inline void InitState::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:sdklt.InitState.message)
}
inline std::string* InitState::mutable_message() {
  // @@protoc_insertion_point(field_mutable:sdklt.InitState.message)
  return _internal_mutable_message();
}
inline const std::string& InitState::_internal_message() const {
  return message_.GetNoArena();
}
inline void InitState::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InitState::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdklt.InitState.message)
}
inline void InitState::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdklt.InitState.message)
}
inline void InitState::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdklt.InitState.message)
}
inline std::string* InitState::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InitState::release_message() {
  // @@protoc_insertion_point(field_release:sdklt.InitState.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InitState::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:sdklt.InitState.message)
}

// bool success = 2;
inline void InitState::clear_success() {
  success_ = false;
}
inline bool InitState::_internal_success() const {
  return success_;
}
inline bool InitState::success() const {
  // @@protoc_insertion_point(field_get:sdklt.InitState.success)
  return _internal_success();
}
inline void InitState::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void InitState::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sdklt.InitState.success)
}

// -------------------------------------------------------------------

// ShutDownRequest

// bool graceful = 1;
inline void ShutDownRequest::clear_graceful() {
  graceful_ = false;
}
inline bool ShutDownRequest::_internal_graceful() const {
  return graceful_;
}
inline bool ShutDownRequest::graceful() const {
  // @@protoc_insertion_point(field_get:sdklt.ShutDownRequest.graceful)
  return _internal_graceful();
}
inline void ShutDownRequest::_internal_set_graceful(bool value) {
  
  graceful_ = value;
}
inline void ShutDownRequest::set_graceful(bool value) {
  _internal_set_graceful(value);
  // @@protoc_insertion_point(field_set:sdklt.ShutDownRequest.graceful)
}

// -------------------------------------------------------------------

// ShutDownState

// string message = 1;
inline void ShutDownState::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ShutDownState::message() const {
  // @@protoc_insertion_point(field_get:sdklt.ShutDownState.message)
  return _internal_message();
}
inline void ShutDownState::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:sdklt.ShutDownState.message)
}
inline std::string* ShutDownState::mutable_message() {
  // @@protoc_insertion_point(field_mutable:sdklt.ShutDownState.message)
  return _internal_mutable_message();
}
inline const std::string& ShutDownState::_internal_message() const {
  return message_.GetNoArena();
}
inline void ShutDownState::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ShutDownState::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdklt.ShutDownState.message)
}
inline void ShutDownState::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdklt.ShutDownState.message)
}
inline void ShutDownState::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdklt.ShutDownState.message)
}
inline std::string* ShutDownState::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ShutDownState::release_message() {
  // @@protoc_insertion_point(field_release:sdklt.ShutDownState.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ShutDownState::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:sdklt.ShutDownState.message)
}

// bool success = 2;
inline void ShutDownState::clear_success() {
  success_ = false;
}
inline bool ShutDownState::_internal_success() const {
  return success_;
}
inline bool ShutDownState::success() const {
  // @@protoc_insertion_point(field_get:sdklt.ShutDownState.success)
  return _internal_success();
}
inline void ShutDownState::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ShutDownState::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sdklt.ShutDownState.success)
}

// -------------------------------------------------------------------

// ReadRequest

// uint64 device_id = 1;
inline void ReadRequest::clear_device_id() {
  device_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadRequest::_internal_device_id() const {
  return device_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadRequest::device_id() const {
  // @@protoc_insertion_point(field_get:sdklt.ReadRequest.device_id)
  return _internal_device_id();
}
inline void ReadRequest::_internal_set_device_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  device_id_ = value;
}
inline void ReadRequest::set_device_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:sdklt.ReadRequest.device_id)
}

// uint64 role_id = 2;
inline void ReadRequest::clear_role_id() {
  role_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadRequest::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadRequest::role_id() const {
  // @@protoc_insertion_point(field_get:sdklt.ReadRequest.role_id)
  return _internal_role_id();
}
inline void ReadRequest::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  role_id_ = value;
}
inline void ReadRequest::set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:sdklt.ReadRequest.role_id)
}

// string lt_name = 3;
inline void ReadRequest::clear_lt_name() {
  lt_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadRequest::lt_name() const {
  // @@protoc_insertion_point(field_get:sdklt.ReadRequest.lt_name)
  return _internal_lt_name();
}
inline void ReadRequest::set_lt_name(const std::string& value) {
  _internal_set_lt_name(value);
  // @@protoc_insertion_point(field_set:sdklt.ReadRequest.lt_name)
}
inline std::string* ReadRequest::mutable_lt_name() {
  // @@protoc_insertion_point(field_mutable:sdklt.ReadRequest.lt_name)
  return _internal_mutable_lt_name();
}
inline const std::string& ReadRequest::_internal_lt_name() const {
  return lt_name_.GetNoArena();
}
inline void ReadRequest::_internal_set_lt_name(const std::string& value) {
  
  lt_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReadRequest::set_lt_name(std::string&& value) {
  
  lt_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdklt.ReadRequest.lt_name)
}
inline void ReadRequest::set_lt_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lt_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdklt.ReadRequest.lt_name)
}
inline void ReadRequest::set_lt_name(const char* value, size_t size) {
  
  lt_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdklt.ReadRequest.lt_name)
}
inline std::string* ReadRequest::_internal_mutable_lt_name() {
  
  return lt_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadRequest::release_lt_name() {
  // @@protoc_insertion_point(field_release:sdklt.ReadRequest.lt_name)
  
  return lt_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRequest::set_allocated_lt_name(std::string* lt_name) {
  if (lt_name != nullptr) {
    
  } else {
    
  }
  lt_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lt_name);
  // @@protoc_insertion_point(field_set_allocated:sdklt.ReadRequest.lt_name)
}

// string key = 4;
inline void ReadRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadRequest::key() const {
  // @@protoc_insertion_point(field_get:sdklt.ReadRequest.key)
  return _internal_key();
}
inline void ReadRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:sdklt.ReadRequest.key)
}
inline std::string* ReadRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:sdklt.ReadRequest.key)
  return _internal_mutable_key();
}
inline const std::string& ReadRequest::_internal_key() const {
  return key_.GetNoArena();
}
inline void ReadRequest::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReadRequest::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdklt.ReadRequest.key)
}
inline void ReadRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdklt.ReadRequest.key)
}
inline void ReadRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdklt.ReadRequest.key)
}
inline std::string* ReadRequest::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadRequest::release_key() {
  // @@protoc_insertion_point(field_release:sdklt.ReadRequest.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:sdklt.ReadRequest.key)
}

// -------------------------------------------------------------------

// ReadResponse

// string message = 1;
inline void ReadResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadResponse::message() const {
  // @@protoc_insertion_point(field_get:sdklt.ReadResponse.message)
  return _internal_message();
}
inline void ReadResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:sdklt.ReadResponse.message)
}
inline std::string* ReadResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:sdklt.ReadResponse.message)
  return _internal_mutable_message();
}
inline const std::string& ReadResponse::_internal_message() const {
  return message_.GetNoArena();
}
inline void ReadResponse::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReadResponse::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdklt.ReadResponse.message)
}
inline void ReadResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdklt.ReadResponse.message)
}
inline void ReadResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdklt.ReadResponse.message)
}
inline std::string* ReadResponse::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadResponse::release_message() {
  // @@protoc_insertion_point(field_release:sdklt.ReadResponse.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:sdklt.ReadResponse.message)
}

// bool success = 2;
inline void ReadResponse::clear_success() {
  success_ = false;
}
inline bool ReadResponse::_internal_success() const {
  return success_;
}
inline bool ReadResponse::success() const {
  // @@protoc_insertion_point(field_get:sdklt.ReadResponse.success)
  return _internal_success();
}
inline void ReadResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ReadResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sdklt.ReadResponse.success)
}

// -------------------------------------------------------------------

// WriteRequest

// uint64 device_id = 1;
inline void WriteRequest::clear_device_id() {
  device_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteRequest::_internal_device_id() const {
  return device_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteRequest::device_id() const {
  // @@protoc_insertion_point(field_get:sdklt.WriteRequest.device_id)
  return _internal_device_id();
}
inline void WriteRequest::_internal_set_device_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  device_id_ = value;
}
inline void WriteRequest::set_device_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:sdklt.WriteRequest.device_id)
}

// uint64 role_id = 2;
inline void WriteRequest::clear_role_id() {
  role_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteRequest::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteRequest::role_id() const {
  // @@protoc_insertion_point(field_get:sdklt.WriteRequest.role_id)
  return _internal_role_id();
}
inline void WriteRequest::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  role_id_ = value;
}
inline void WriteRequest::set_role_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:sdklt.WriteRequest.role_id)
}

// .sdklt.Uint128 election_id = 3;
inline bool WriteRequest::_internal_has_election_id() const {
  return this != internal_default_instance() && election_id_ != nullptr;
}
inline bool WriteRequest::has_election_id() const {
  return _internal_has_election_id();
}
inline void WriteRequest::clear_election_id() {
  if (GetArenaNoVirtual() == nullptr && election_id_ != nullptr) {
    delete election_id_;
  }
  election_id_ = nullptr;
}
inline const ::sdklt::Uint128& WriteRequest::_internal_election_id() const {
  const ::sdklt::Uint128* p = election_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sdklt::Uint128*>(
      &::sdklt::_Uint128_default_instance_);
}
inline const ::sdklt::Uint128& WriteRequest::election_id() const {
  // @@protoc_insertion_point(field_get:sdklt.WriteRequest.election_id)
  return _internal_election_id();
}
inline ::sdklt::Uint128* WriteRequest::release_election_id() {
  // @@protoc_insertion_point(field_release:sdklt.WriteRequest.election_id)
  
  ::sdklt::Uint128* temp = election_id_;
  election_id_ = nullptr;
  return temp;
}
inline ::sdklt::Uint128* WriteRequest::_internal_mutable_election_id() {
  
  if (election_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::sdklt::Uint128>(GetArenaNoVirtual());
    election_id_ = p;
  }
  return election_id_;
}
inline ::sdklt::Uint128* WriteRequest::mutable_election_id() {
  // @@protoc_insertion_point(field_mutable:sdklt.WriteRequest.election_id)
  return _internal_mutable_election_id();
}
inline void WriteRequest::set_allocated_election_id(::sdklt::Uint128* election_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete election_id_;
  }
  if (election_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      election_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, election_id, submessage_arena);
    }
    
  } else {
    
  }
  election_id_ = election_id;
  // @@protoc_insertion_point(field_set_allocated:sdklt.WriteRequest.election_id)
}

// repeated .sdklt.Update updates = 4;
inline int WriteRequest::_internal_updates_size() const {
  return updates_.size();
}
inline int WriteRequest::updates_size() const {
  return _internal_updates_size();
}
inline void WriteRequest::clear_updates() {
  updates_.Clear();
}
inline ::sdklt::Update* WriteRequest::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:sdklt.WriteRequest.updates)
  return updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::Update >*
WriteRequest::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:sdklt.WriteRequest.updates)
  return &updates_;
}
inline const ::sdklt::Update& WriteRequest::_internal_updates(int index) const {
  return updates_.Get(index);
}
inline const ::sdklt::Update& WriteRequest::updates(int index) const {
  // @@protoc_insertion_point(field_get:sdklt.WriteRequest.updates)
  return _internal_updates(index);
}
inline ::sdklt::Update* WriteRequest::_internal_add_updates() {
  return updates_.Add();
}
inline ::sdklt::Update* WriteRequest::add_updates() {
  // @@protoc_insertion_point(field_add:sdklt.WriteRequest.updates)
  return _internal_add_updates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::Update >&
WriteRequest::updates() const {
  // @@protoc_insertion_point(field_list:sdklt.WriteRequest.updates)
  return updates_;
}

// .sdklt.WriteRequest.Atomicity atomicity = 5;
inline void WriteRequest::clear_atomicity() {
  atomicity_ = 0;
}
inline ::sdklt::WriteRequest_Atomicity WriteRequest::_internal_atomicity() const {
  return static_cast< ::sdklt::WriteRequest_Atomicity >(atomicity_);
}
inline ::sdklt::WriteRequest_Atomicity WriteRequest::atomicity() const {
  // @@protoc_insertion_point(field_get:sdklt.WriteRequest.atomicity)
  return _internal_atomicity();
}
inline void WriteRequest::_internal_set_atomicity(::sdklt::WriteRequest_Atomicity value) {
  
  atomicity_ = value;
}
inline void WriteRequest::set_atomicity(::sdklt::WriteRequest_Atomicity value) {
  _internal_set_atomicity(value);
  // @@protoc_insertion_point(field_set:sdklt.WriteRequest.atomicity)
}

// -------------------------------------------------------------------

// WriteResponse

// string message = 1;
inline void WriteResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WriteResponse::message() const {
  // @@protoc_insertion_point(field_get:sdklt.WriteResponse.message)
  return _internal_message();
}
inline void WriteResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:sdklt.WriteResponse.message)
}
inline std::string* WriteResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:sdklt.WriteResponse.message)
  return _internal_mutable_message();
}
inline const std::string& WriteResponse::_internal_message() const {
  return message_.GetNoArena();
}
inline void WriteResponse::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WriteResponse::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdklt.WriteResponse.message)
}
inline void WriteResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdklt.WriteResponse.message)
}
inline void WriteResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdklt.WriteResponse.message)
}
inline std::string* WriteResponse::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WriteResponse::release_message() {
  // @@protoc_insertion_point(field_release:sdklt.WriteResponse.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WriteResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:sdklt.WriteResponse.message)
}

// bool success = 2;
inline void WriteResponse::clear_success() {
  success_ = false;
}
inline bool WriteResponse::_internal_success() const {
  return success_;
}
inline bool WriteResponse::success() const {
  // @@protoc_insertion_point(field_get:sdklt.WriteResponse.success)
  return _internal_success();
}
inline void WriteResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void WriteResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sdklt.WriteResponse.success)
}

// -------------------------------------------------------------------

// Update

// .sdklt.Update.Type type = 1;
inline void Update::clear_type() {
  type_ = 0;
}
inline ::sdklt::Update_Type Update::_internal_type() const {
  return static_cast< ::sdklt::Update_Type >(type_);
}
inline ::sdklt::Update_Type Update::type() const {
  // @@protoc_insertion_point(field_get:sdklt.Update.type)
  return _internal_type();
}
inline void Update::_internal_set_type(::sdklt::Update_Type value) {
  
  type_ = value;
}
inline void Update::set_type(::sdklt::Update_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sdklt.Update.type)
}

// .sdklt.Entity entity = 2;
inline bool Update::_internal_has_entity() const {
  return this != internal_default_instance() && entity_ != nullptr;
}
inline bool Update::has_entity() const {
  return _internal_has_entity();
}
inline void Update::clear_entity() {
  if (GetArenaNoVirtual() == nullptr && entity_ != nullptr) {
    delete entity_;
  }
  entity_ = nullptr;
}
inline const ::sdklt::Entity& Update::_internal_entity() const {
  const ::sdklt::Entity* p = entity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sdklt::Entity*>(
      &::sdklt::_Entity_default_instance_);
}
inline const ::sdklt::Entity& Update::entity() const {
  // @@protoc_insertion_point(field_get:sdklt.Update.entity)
  return _internal_entity();
}
inline ::sdklt::Entity* Update::release_entity() {
  // @@protoc_insertion_point(field_release:sdklt.Update.entity)
  
  ::sdklt::Entity* temp = entity_;
  entity_ = nullptr;
  return temp;
}
inline ::sdklt::Entity* Update::_internal_mutable_entity() {
  
  if (entity_ == nullptr) {
    auto* p = CreateMaybeMessage<::sdklt::Entity>(GetArenaNoVirtual());
    entity_ = p;
  }
  return entity_;
}
inline ::sdklt::Entity* Update::mutable_entity() {
  // @@protoc_insertion_point(field_mutable:sdklt.Update.entity)
  return _internal_mutable_entity();
}
inline void Update::set_allocated_entity(::sdklt::Entity* entity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete entity_;
  }
  if (entity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      entity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity, submessage_arena);
    }
    
  } else {
    
  }
  entity_ = entity;
  // @@protoc_insertion_point(field_set_allocated:sdklt.Update.entity)
}

// -------------------------------------------------------------------

// Entity

// .sdklt.TableEntry table_entry = 2;
inline bool Entity::_internal_has_table_entry() const {
  return entity_case() == kTableEntry;
}
inline bool Entity::has_table_entry() const {
  return _internal_has_table_entry();
}
inline void Entity::set_has_table_entry() {
  _oneof_case_[0] = kTableEntry;
}
inline void Entity::clear_table_entry() {
  if (_internal_has_table_entry()) {
    delete entity_.table_entry_;
    clear_has_entity();
  }
}
inline ::sdklt::TableEntry* Entity::release_table_entry() {
  // @@protoc_insertion_point(field_release:sdklt.Entity.table_entry)
  if (_internal_has_table_entry()) {
    clear_has_entity();
      ::sdklt::TableEntry* temp = entity_.table_entry_;
    entity_.table_entry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sdklt::TableEntry& Entity::_internal_table_entry() const {
  return _internal_has_table_entry()
      ? *entity_.table_entry_
      : *reinterpret_cast< ::sdklt::TableEntry*>(&::sdklt::_TableEntry_default_instance_);
}
inline const ::sdklt::TableEntry& Entity::table_entry() const {
  // @@protoc_insertion_point(field_get:sdklt.Entity.table_entry)
  return _internal_table_entry();
}
inline ::sdklt::TableEntry* Entity::_internal_mutable_table_entry() {
  if (!_internal_has_table_entry()) {
    clear_entity();
    set_has_table_entry();
    entity_.table_entry_ = CreateMaybeMessage< ::sdklt::TableEntry >(
        GetArenaNoVirtual());
  }
  return entity_.table_entry_;
}
inline ::sdklt::TableEntry* Entity::mutable_table_entry() {
  // @@protoc_insertion_point(field_mutable:sdklt.Entity.table_entry)
  return _internal_mutable_table_entry();
}

inline bool Entity::has_entity() const {
  return entity_case() != ENTITY_NOT_SET;
}
inline void Entity::clear_has_entity() {
  _oneof_case_[0] = ENTITY_NOT_SET;
}
inline Entity::EntityCase Entity::entity_case() const {
  return Entity::EntityCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExternEntry

// uint32 extern_type_id = 1;
inline void ExternEntry::clear_extern_type_id() {
  extern_type_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExternEntry::_internal_extern_type_id() const {
  return extern_type_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExternEntry::extern_type_id() const {
  // @@protoc_insertion_point(field_get:sdklt.ExternEntry.extern_type_id)
  return _internal_extern_type_id();
}
inline void ExternEntry::_internal_set_extern_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  extern_type_id_ = value;
}
inline void ExternEntry::set_extern_type_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_extern_type_id(value);
  // @@protoc_insertion_point(field_set:sdklt.ExternEntry.extern_type_id)
}

// uint32 extern_id = 2;
inline void ExternEntry::clear_extern_id() {
  extern_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExternEntry::_internal_extern_id() const {
  return extern_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExternEntry::extern_id() const {
  // @@protoc_insertion_point(field_get:sdklt.ExternEntry.extern_id)
  return _internal_extern_id();
}
inline void ExternEntry::_internal_set_extern_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  extern_id_ = value;
}
inline void ExternEntry::set_extern_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_extern_id(value);
  // @@protoc_insertion_point(field_set:sdklt.ExternEntry.extern_id)
}

// .google.protobuf.Any entry = 3;
inline bool ExternEntry::_internal_has_entry() const {
  return this != internal_default_instance() && entry_ != nullptr;
}
inline bool ExternEntry::has_entry() const {
  return _internal_has_entry();
}
inline const PROTOBUF_NAMESPACE_ID::Any& ExternEntry::_internal_entry() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = entry_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ExternEntry::entry() const {
  // @@protoc_insertion_point(field_get:sdklt.ExternEntry.entry)
  return _internal_entry();
}
inline PROTOBUF_NAMESPACE_ID::Any* ExternEntry::release_entry() {
  // @@protoc_insertion_point(field_release:sdklt.ExternEntry.entry)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = entry_;
  entry_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ExternEntry::_internal_mutable_entry() {
  
  if (entry_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    entry_ = p;
  }
  return entry_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ExternEntry::mutable_entry() {
  // @@protoc_insertion_point(field_mutable:sdklt.ExternEntry.entry)
  return _internal_mutable_entry();
}
inline void ExternEntry::set_allocated_entry(PROTOBUF_NAMESPACE_ID::Any* entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entry_);
  }
  if (entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entry, submessage_arena);
    }
    
  } else {
    
  }
  entry_ = entry;
  // @@protoc_insertion_point(field_set_allocated:sdklt.ExternEntry.entry)
}

// -------------------------------------------------------------------

// TableEntry_IdleTimeout

// int64 elapsed_ns = 1;
inline void TableEntry_IdleTimeout::clear_elapsed_ns() {
  elapsed_ns_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TableEntry_IdleTimeout::_internal_elapsed_ns() const {
  return elapsed_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TableEntry_IdleTimeout::elapsed_ns() const {
  // @@protoc_insertion_point(field_get:sdklt.TableEntry.IdleTimeout.elapsed_ns)
  return _internal_elapsed_ns();
}
inline void TableEntry_IdleTimeout::_internal_set_elapsed_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  elapsed_ns_ = value;
}
inline void TableEntry_IdleTimeout::set_elapsed_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_elapsed_ns(value);
  // @@protoc_insertion_point(field_set:sdklt.TableEntry.IdleTimeout.elapsed_ns)
}

// -------------------------------------------------------------------

// TableEntry

// uint32 table_id = 1;
inline void TableEntry::clear_table_id() {
  table_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableEntry::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableEntry::table_id() const {
  // @@protoc_insertion_point(field_get:sdklt.TableEntry.table_id)
  return _internal_table_id();
}
inline void TableEntry::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  table_id_ = value;
}
inline void TableEntry::set_table_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:sdklt.TableEntry.table_id)
}

// repeated .sdklt.FieldMatch match = 2;
inline int TableEntry::_internal_match_size() const {
  return match_.size();
}
inline int TableEntry::match_size() const {
  return _internal_match_size();
}
inline void TableEntry::clear_match() {
  match_.Clear();
}
inline ::sdklt::FieldMatch* TableEntry::mutable_match(int index) {
  // @@protoc_insertion_point(field_mutable:sdklt.TableEntry.match)
  return match_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::FieldMatch >*
TableEntry::mutable_match() {
  // @@protoc_insertion_point(field_mutable_list:sdklt.TableEntry.match)
  return &match_;
}
inline const ::sdklt::FieldMatch& TableEntry::_internal_match(int index) const {
  return match_.Get(index);
}
inline const ::sdklt::FieldMatch& TableEntry::match(int index) const {
  // @@protoc_insertion_point(field_get:sdklt.TableEntry.match)
  return _internal_match(index);
}
inline ::sdklt::FieldMatch* TableEntry::_internal_add_match() {
  return match_.Add();
}
inline ::sdklt::FieldMatch* TableEntry::add_match() {
  // @@protoc_insertion_point(field_add:sdklt.TableEntry.match)
  return _internal_add_match();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::FieldMatch >&
TableEntry::match() const {
  // @@protoc_insertion_point(field_list:sdklt.TableEntry.match)
  return match_;
}

// .sdklt.TableAction action = 3;
inline bool TableEntry::_internal_has_action() const {
  return this != internal_default_instance() && action_ != nullptr;
}
inline bool TableEntry::has_action() const {
  return _internal_has_action();
}
inline void TableEntry::clear_action() {
  if (GetArenaNoVirtual() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
}
inline const ::sdklt::TableAction& TableEntry::_internal_action() const {
  const ::sdklt::TableAction* p = action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sdklt::TableAction*>(
      &::sdklt::_TableAction_default_instance_);
}
inline const ::sdklt::TableAction& TableEntry::action() const {
  // @@protoc_insertion_point(field_get:sdklt.TableEntry.action)
  return _internal_action();
}
inline ::sdklt::TableAction* TableEntry::release_action() {
  // @@protoc_insertion_point(field_release:sdklt.TableEntry.action)
  
  ::sdklt::TableAction* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::sdklt::TableAction* TableEntry::_internal_mutable_action() {
  
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::sdklt::TableAction>(GetArenaNoVirtual());
    action_ = p;
  }
  return action_;
}
inline ::sdklt::TableAction* TableEntry::mutable_action() {
  // @@protoc_insertion_point(field_mutable:sdklt.TableEntry.action)
  return _internal_mutable_action();
}
inline void TableEntry::set_allocated_action(::sdklt::TableAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    
  } else {
    
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:sdklt.TableEntry.action)
}

// int32 priority = 4;
inline void TableEntry::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableEntry::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableEntry::priority() const {
  // @@protoc_insertion_point(field_get:sdklt.TableEntry.priority)
  return _internal_priority();
}
inline void TableEntry::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void TableEntry::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:sdklt.TableEntry.priority)
}

// uint64 controller_metadata = 5 [deprecated = true];
inline void TableEntry::clear_controller_metadata() {
  controller_metadata_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TableEntry::_internal_controller_metadata() const {
  return controller_metadata_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TableEntry::controller_metadata() const {
  // @@protoc_insertion_point(field_get:sdklt.TableEntry.controller_metadata)
  return _internal_controller_metadata();
}
inline void TableEntry::_internal_set_controller_metadata(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  controller_metadata_ = value;
}
inline void TableEntry::set_controller_metadata(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_controller_metadata(value);
  // @@protoc_insertion_point(field_set:sdklt.TableEntry.controller_metadata)
}

// bool is_default_action = 8;
inline void TableEntry::clear_is_default_action() {
  is_default_action_ = false;
}
inline bool TableEntry::_internal_is_default_action() const {
  return is_default_action_;
}
inline bool TableEntry::is_default_action() const {
  // @@protoc_insertion_point(field_get:sdklt.TableEntry.is_default_action)
  return _internal_is_default_action();
}
inline void TableEntry::_internal_set_is_default_action(bool value) {
  
  is_default_action_ = value;
}
inline void TableEntry::set_is_default_action(bool value) {
  _internal_set_is_default_action(value);
  // @@protoc_insertion_point(field_set:sdklt.TableEntry.is_default_action)
}

// int64 idle_timeout_ns = 9;
inline void TableEntry::clear_idle_timeout_ns() {
  idle_timeout_ns_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TableEntry::_internal_idle_timeout_ns() const {
  return idle_timeout_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TableEntry::idle_timeout_ns() const {
  // @@protoc_insertion_point(field_get:sdklt.TableEntry.idle_timeout_ns)
  return _internal_idle_timeout_ns();
}
inline void TableEntry::_internal_set_idle_timeout_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  idle_timeout_ns_ = value;
}
inline void TableEntry::set_idle_timeout_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_idle_timeout_ns(value);
  // @@protoc_insertion_point(field_set:sdklt.TableEntry.idle_timeout_ns)
}

// .sdklt.TableEntry.IdleTimeout time_since_last_hit = 10;
inline bool TableEntry::_internal_has_time_since_last_hit() const {
  return this != internal_default_instance() && time_since_last_hit_ != nullptr;
}
inline bool TableEntry::has_time_since_last_hit() const {
  return _internal_has_time_since_last_hit();
}
inline void TableEntry::clear_time_since_last_hit() {
  if (GetArenaNoVirtual() == nullptr && time_since_last_hit_ != nullptr) {
    delete time_since_last_hit_;
  }
  time_since_last_hit_ = nullptr;
}
inline const ::sdklt::TableEntry_IdleTimeout& TableEntry::_internal_time_since_last_hit() const {
  const ::sdklt::TableEntry_IdleTimeout* p = time_since_last_hit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sdklt::TableEntry_IdleTimeout*>(
      &::sdklt::_TableEntry_IdleTimeout_default_instance_);
}
inline const ::sdklt::TableEntry_IdleTimeout& TableEntry::time_since_last_hit() const {
  // @@protoc_insertion_point(field_get:sdklt.TableEntry.time_since_last_hit)
  return _internal_time_since_last_hit();
}
inline ::sdklt::TableEntry_IdleTimeout* TableEntry::release_time_since_last_hit() {
  // @@protoc_insertion_point(field_release:sdklt.TableEntry.time_since_last_hit)
  
  ::sdklt::TableEntry_IdleTimeout* temp = time_since_last_hit_;
  time_since_last_hit_ = nullptr;
  return temp;
}
inline ::sdklt::TableEntry_IdleTimeout* TableEntry::_internal_mutable_time_since_last_hit() {
  
  if (time_since_last_hit_ == nullptr) {
    auto* p = CreateMaybeMessage<::sdklt::TableEntry_IdleTimeout>(GetArenaNoVirtual());
    time_since_last_hit_ = p;
  }
  return time_since_last_hit_;
}
inline ::sdklt::TableEntry_IdleTimeout* TableEntry::mutable_time_since_last_hit() {
  // @@protoc_insertion_point(field_mutable:sdklt.TableEntry.time_since_last_hit)
  return _internal_mutable_time_since_last_hit();
}
inline void TableEntry::set_allocated_time_since_last_hit(::sdklt::TableEntry_IdleTimeout* time_since_last_hit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_since_last_hit_;
  }
  if (time_since_last_hit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_since_last_hit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_since_last_hit, submessage_arena);
    }
    
  } else {
    
  }
  time_since_last_hit_ = time_since_last_hit;
  // @@protoc_insertion_point(field_set_allocated:sdklt.TableEntry.time_since_last_hit)
}

// bytes metadata = 11;
inline void TableEntry::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TableEntry::metadata() const {
  // @@protoc_insertion_point(field_get:sdklt.TableEntry.metadata)
  return _internal_metadata();
}
inline void TableEntry::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:sdklt.TableEntry.metadata)
}
inline std::string* TableEntry::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:sdklt.TableEntry.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& TableEntry::_internal_metadata() const {
  return metadata_.GetNoArena();
}
inline void TableEntry::_internal_set_metadata(const std::string& value) {
  
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TableEntry::set_metadata(std::string&& value) {
  
  metadata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdklt.TableEntry.metadata)
}
inline void TableEntry::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdklt.TableEntry.metadata)
}
inline void TableEntry::set_metadata(const void* value, size_t size) {
  
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdklt.TableEntry.metadata)
}
inline std::string* TableEntry::_internal_mutable_metadata() {
  
  return metadata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TableEntry::release_metadata() {
  // @@protoc_insertion_point(field_release:sdklt.TableEntry.metadata)
  
  return metadata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TableEntry::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:sdklt.TableEntry.metadata)
}

// -------------------------------------------------------------------

// FieldMatch_Exact

// bytes value = 1;
inline void FieldMatch_Exact::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FieldMatch_Exact::value() const {
  // @@protoc_insertion_point(field_get:sdklt.FieldMatch.Exact.value)
  return _internal_value();
}
inline void FieldMatch_Exact::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:sdklt.FieldMatch.Exact.value)
}
inline std::string* FieldMatch_Exact::mutable_value() {
  // @@protoc_insertion_point(field_mutable:sdklt.FieldMatch.Exact.value)
  return _internal_mutable_value();
}
inline const std::string& FieldMatch_Exact::_internal_value() const {
  return value_.GetNoArena();
}
inline void FieldMatch_Exact::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FieldMatch_Exact::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdklt.FieldMatch.Exact.value)
}
inline void FieldMatch_Exact::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdklt.FieldMatch.Exact.value)
}
inline void FieldMatch_Exact::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdklt.FieldMatch.Exact.value)
}
inline std::string* FieldMatch_Exact::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FieldMatch_Exact::release_value() {
  // @@protoc_insertion_point(field_release:sdklt.FieldMatch.Exact.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FieldMatch_Exact::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:sdklt.FieldMatch.Exact.value)
}

// -------------------------------------------------------------------

// FieldMatch_Ternary

// bytes value = 1;
inline void FieldMatch_Ternary::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FieldMatch_Ternary::value() const {
  // @@protoc_insertion_point(field_get:sdklt.FieldMatch.Ternary.value)
  return _internal_value();
}
inline void FieldMatch_Ternary::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:sdklt.FieldMatch.Ternary.value)
}
inline std::string* FieldMatch_Ternary::mutable_value() {
  // @@protoc_insertion_point(field_mutable:sdklt.FieldMatch.Ternary.value)
  return _internal_mutable_value();
}
inline const std::string& FieldMatch_Ternary::_internal_value() const {
  return value_.GetNoArena();
}
inline void FieldMatch_Ternary::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FieldMatch_Ternary::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdklt.FieldMatch.Ternary.value)
}
inline void FieldMatch_Ternary::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdklt.FieldMatch.Ternary.value)
}
inline void FieldMatch_Ternary::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdklt.FieldMatch.Ternary.value)
}
inline std::string* FieldMatch_Ternary::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FieldMatch_Ternary::release_value() {
  // @@protoc_insertion_point(field_release:sdklt.FieldMatch.Ternary.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FieldMatch_Ternary::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:sdklt.FieldMatch.Ternary.value)
}

// bytes mask = 2;
inline void FieldMatch_Ternary::clear_mask() {
  mask_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FieldMatch_Ternary::mask() const {
  // @@protoc_insertion_point(field_get:sdklt.FieldMatch.Ternary.mask)
  return _internal_mask();
}
inline void FieldMatch_Ternary::set_mask(const std::string& value) {
  _internal_set_mask(value);
  // @@protoc_insertion_point(field_set:sdklt.FieldMatch.Ternary.mask)
}
inline std::string* FieldMatch_Ternary::mutable_mask() {
  // @@protoc_insertion_point(field_mutable:sdklt.FieldMatch.Ternary.mask)
  return _internal_mutable_mask();
}
inline const std::string& FieldMatch_Ternary::_internal_mask() const {
  return mask_.GetNoArena();
}
inline void FieldMatch_Ternary::_internal_set_mask(const std::string& value) {
  
  mask_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FieldMatch_Ternary::set_mask(std::string&& value) {
  
  mask_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdklt.FieldMatch.Ternary.mask)
}
inline void FieldMatch_Ternary::set_mask(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mask_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdklt.FieldMatch.Ternary.mask)
}
inline void FieldMatch_Ternary::set_mask(const void* value, size_t size) {
  
  mask_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdklt.FieldMatch.Ternary.mask)
}
inline std::string* FieldMatch_Ternary::_internal_mutable_mask() {
  
  return mask_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FieldMatch_Ternary::release_mask() {
  // @@protoc_insertion_point(field_release:sdklt.FieldMatch.Ternary.mask)
  
  return mask_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FieldMatch_Ternary::set_allocated_mask(std::string* mask) {
  if (mask != nullptr) {
    
  } else {
    
  }
  mask_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mask);
  // @@protoc_insertion_point(field_set_allocated:sdklt.FieldMatch.Ternary.mask)
}

// -------------------------------------------------------------------

// FieldMatch_LPM

// bytes value = 1;
inline void FieldMatch_LPM::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FieldMatch_LPM::value() const {
  // @@protoc_insertion_point(field_get:sdklt.FieldMatch.LPM.value)
  return _internal_value();
}
inline void FieldMatch_LPM::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:sdklt.FieldMatch.LPM.value)
}
inline std::string* FieldMatch_LPM::mutable_value() {
  // @@protoc_insertion_point(field_mutable:sdklt.FieldMatch.LPM.value)
  return _internal_mutable_value();
}
inline const std::string& FieldMatch_LPM::_internal_value() const {
  return value_.GetNoArena();
}
inline void FieldMatch_LPM::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FieldMatch_LPM::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdklt.FieldMatch.LPM.value)
}
inline void FieldMatch_LPM::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdklt.FieldMatch.LPM.value)
}
inline void FieldMatch_LPM::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdklt.FieldMatch.LPM.value)
}
inline std::string* FieldMatch_LPM::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FieldMatch_LPM::release_value() {
  // @@protoc_insertion_point(field_release:sdklt.FieldMatch.LPM.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FieldMatch_LPM::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:sdklt.FieldMatch.LPM.value)
}

// int32 prefix_len = 2;
inline void FieldMatch_LPM::clear_prefix_len() {
  prefix_len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldMatch_LPM::_internal_prefix_len() const {
  return prefix_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldMatch_LPM::prefix_len() const {
  // @@protoc_insertion_point(field_get:sdklt.FieldMatch.LPM.prefix_len)
  return _internal_prefix_len();
}
inline void FieldMatch_LPM::_internal_set_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prefix_len_ = value;
}
inline void FieldMatch_LPM::set_prefix_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prefix_len(value);
  // @@protoc_insertion_point(field_set:sdklt.FieldMatch.LPM.prefix_len)
}

// -------------------------------------------------------------------

// FieldMatch_Range

// bytes low = 1;
inline void FieldMatch_Range::clear_low() {
  low_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FieldMatch_Range::low() const {
  // @@protoc_insertion_point(field_get:sdklt.FieldMatch.Range.low)
  return _internal_low();
}
inline void FieldMatch_Range::set_low(const std::string& value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:sdklt.FieldMatch.Range.low)
}
inline std::string* FieldMatch_Range::mutable_low() {
  // @@protoc_insertion_point(field_mutable:sdklt.FieldMatch.Range.low)
  return _internal_mutable_low();
}
inline const std::string& FieldMatch_Range::_internal_low() const {
  return low_.GetNoArena();
}
inline void FieldMatch_Range::_internal_set_low(const std::string& value) {
  
  low_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FieldMatch_Range::set_low(std::string&& value) {
  
  low_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdklt.FieldMatch.Range.low)
}
inline void FieldMatch_Range::set_low(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  low_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdklt.FieldMatch.Range.low)
}
inline void FieldMatch_Range::set_low(const void* value, size_t size) {
  
  low_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdklt.FieldMatch.Range.low)
}
inline std::string* FieldMatch_Range::_internal_mutable_low() {
  
  return low_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FieldMatch_Range::release_low() {
  // @@protoc_insertion_point(field_release:sdklt.FieldMatch.Range.low)
  
  return low_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FieldMatch_Range::set_allocated_low(std::string* low) {
  if (low != nullptr) {
    
  } else {
    
  }
  low_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), low);
  // @@protoc_insertion_point(field_set_allocated:sdklt.FieldMatch.Range.low)
}

// bytes high = 2;
inline void FieldMatch_Range::clear_high() {
  high_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FieldMatch_Range::high() const {
  // @@protoc_insertion_point(field_get:sdklt.FieldMatch.Range.high)
  return _internal_high();
}
inline void FieldMatch_Range::set_high(const std::string& value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:sdklt.FieldMatch.Range.high)
}
inline std::string* FieldMatch_Range::mutable_high() {
  // @@protoc_insertion_point(field_mutable:sdklt.FieldMatch.Range.high)
  return _internal_mutable_high();
}
inline const std::string& FieldMatch_Range::_internal_high() const {
  return high_.GetNoArena();
}
inline void FieldMatch_Range::_internal_set_high(const std::string& value) {
  
  high_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FieldMatch_Range::set_high(std::string&& value) {
  
  high_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdklt.FieldMatch.Range.high)
}
inline void FieldMatch_Range::set_high(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  high_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdklt.FieldMatch.Range.high)
}
inline void FieldMatch_Range::set_high(const void* value, size_t size) {
  
  high_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdklt.FieldMatch.Range.high)
}
inline std::string* FieldMatch_Range::_internal_mutable_high() {
  
  return high_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FieldMatch_Range::release_high() {
  // @@protoc_insertion_point(field_release:sdklt.FieldMatch.Range.high)
  
  return high_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FieldMatch_Range::set_allocated_high(std::string* high) {
  if (high != nullptr) {
    
  } else {
    
  }
  high_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), high);
  // @@protoc_insertion_point(field_set_allocated:sdklt.FieldMatch.Range.high)
}

// -------------------------------------------------------------------

// FieldMatch_Optional

// bytes value = 1;
inline void FieldMatch_Optional::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FieldMatch_Optional::value() const {
  // @@protoc_insertion_point(field_get:sdklt.FieldMatch.Optional.value)
  return _internal_value();
}
inline void FieldMatch_Optional::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:sdklt.FieldMatch.Optional.value)
}
inline std::string* FieldMatch_Optional::mutable_value() {
  // @@protoc_insertion_point(field_mutable:sdklt.FieldMatch.Optional.value)
  return _internal_mutable_value();
}
inline const std::string& FieldMatch_Optional::_internal_value() const {
  return value_.GetNoArena();
}
inline void FieldMatch_Optional::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FieldMatch_Optional::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdklt.FieldMatch.Optional.value)
}
inline void FieldMatch_Optional::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdklt.FieldMatch.Optional.value)
}
inline void FieldMatch_Optional::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdklt.FieldMatch.Optional.value)
}
inline std::string* FieldMatch_Optional::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FieldMatch_Optional::release_value() {
  // @@protoc_insertion_point(field_release:sdklt.FieldMatch.Optional.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FieldMatch_Optional::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:sdklt.FieldMatch.Optional.value)
}

// -------------------------------------------------------------------

// FieldMatch

// uint32 field_id = 1;
inline void FieldMatch::clear_field_id() {
  field_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FieldMatch::_internal_field_id() const {
  return field_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FieldMatch::field_id() const {
  // @@protoc_insertion_point(field_get:sdklt.FieldMatch.field_id)
  return _internal_field_id();
}
inline void FieldMatch::_internal_set_field_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  field_id_ = value;
}
inline void FieldMatch::set_field_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_field_id(value);
  // @@protoc_insertion_point(field_set:sdklt.FieldMatch.field_id)
}

// .sdklt.FieldMatch.Exact exact = 2;
inline bool FieldMatch::_internal_has_exact() const {
  return field_match_type_case() == kExact;
}
inline bool FieldMatch::has_exact() const {
  return _internal_has_exact();
}
inline void FieldMatch::set_has_exact() {
  _oneof_case_[0] = kExact;
}
inline void FieldMatch::clear_exact() {
  if (_internal_has_exact()) {
    delete field_match_type_.exact_;
    clear_has_field_match_type();
  }
}
inline ::sdklt::FieldMatch_Exact* FieldMatch::release_exact() {
  // @@protoc_insertion_point(field_release:sdklt.FieldMatch.exact)
  if (_internal_has_exact()) {
    clear_has_field_match_type();
      ::sdklt::FieldMatch_Exact* temp = field_match_type_.exact_;
    field_match_type_.exact_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sdklt::FieldMatch_Exact& FieldMatch::_internal_exact() const {
  return _internal_has_exact()
      ? *field_match_type_.exact_
      : *reinterpret_cast< ::sdklt::FieldMatch_Exact*>(&::sdklt::_FieldMatch_Exact_default_instance_);
}
inline const ::sdklt::FieldMatch_Exact& FieldMatch::exact() const {
  // @@protoc_insertion_point(field_get:sdklt.FieldMatch.exact)
  return _internal_exact();
}
inline ::sdklt::FieldMatch_Exact* FieldMatch::_internal_mutable_exact() {
  if (!_internal_has_exact()) {
    clear_field_match_type();
    set_has_exact();
    field_match_type_.exact_ = CreateMaybeMessage< ::sdklt::FieldMatch_Exact >(
        GetArenaNoVirtual());
  }
  return field_match_type_.exact_;
}
inline ::sdklt::FieldMatch_Exact* FieldMatch::mutable_exact() {
  // @@protoc_insertion_point(field_mutable:sdklt.FieldMatch.exact)
  return _internal_mutable_exact();
}

// .sdklt.FieldMatch.Ternary ternary = 3;
inline bool FieldMatch::_internal_has_ternary() const {
  return field_match_type_case() == kTernary;
}
inline bool FieldMatch::has_ternary() const {
  return _internal_has_ternary();
}
inline void FieldMatch::set_has_ternary() {
  _oneof_case_[0] = kTernary;
}
inline void FieldMatch::clear_ternary() {
  if (_internal_has_ternary()) {
    delete field_match_type_.ternary_;
    clear_has_field_match_type();
  }
}
inline ::sdklt::FieldMatch_Ternary* FieldMatch::release_ternary() {
  // @@protoc_insertion_point(field_release:sdklt.FieldMatch.ternary)
  if (_internal_has_ternary()) {
    clear_has_field_match_type();
      ::sdklt::FieldMatch_Ternary* temp = field_match_type_.ternary_;
    field_match_type_.ternary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sdklt::FieldMatch_Ternary& FieldMatch::_internal_ternary() const {
  return _internal_has_ternary()
      ? *field_match_type_.ternary_
      : *reinterpret_cast< ::sdklt::FieldMatch_Ternary*>(&::sdklt::_FieldMatch_Ternary_default_instance_);
}
inline const ::sdklt::FieldMatch_Ternary& FieldMatch::ternary() const {
  // @@protoc_insertion_point(field_get:sdklt.FieldMatch.ternary)
  return _internal_ternary();
}
inline ::sdklt::FieldMatch_Ternary* FieldMatch::_internal_mutable_ternary() {
  if (!_internal_has_ternary()) {
    clear_field_match_type();
    set_has_ternary();
    field_match_type_.ternary_ = CreateMaybeMessage< ::sdklt::FieldMatch_Ternary >(
        GetArenaNoVirtual());
  }
  return field_match_type_.ternary_;
}
inline ::sdklt::FieldMatch_Ternary* FieldMatch::mutable_ternary() {
  // @@protoc_insertion_point(field_mutable:sdklt.FieldMatch.ternary)
  return _internal_mutable_ternary();
}

// .sdklt.FieldMatch.LPM lpm = 4;
inline bool FieldMatch::_internal_has_lpm() const {
  return field_match_type_case() == kLpm;
}
inline bool FieldMatch::has_lpm() const {
  return _internal_has_lpm();
}
inline void FieldMatch::set_has_lpm() {
  _oneof_case_[0] = kLpm;
}
inline void FieldMatch::clear_lpm() {
  if (_internal_has_lpm()) {
    delete field_match_type_.lpm_;
    clear_has_field_match_type();
  }
}
inline ::sdklt::FieldMatch_LPM* FieldMatch::release_lpm() {
  // @@protoc_insertion_point(field_release:sdklt.FieldMatch.lpm)
  if (_internal_has_lpm()) {
    clear_has_field_match_type();
      ::sdklt::FieldMatch_LPM* temp = field_match_type_.lpm_;
    field_match_type_.lpm_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sdklt::FieldMatch_LPM& FieldMatch::_internal_lpm() const {
  return _internal_has_lpm()
      ? *field_match_type_.lpm_
      : *reinterpret_cast< ::sdklt::FieldMatch_LPM*>(&::sdklt::_FieldMatch_LPM_default_instance_);
}
inline const ::sdklt::FieldMatch_LPM& FieldMatch::lpm() const {
  // @@protoc_insertion_point(field_get:sdklt.FieldMatch.lpm)
  return _internal_lpm();
}
inline ::sdklt::FieldMatch_LPM* FieldMatch::_internal_mutable_lpm() {
  if (!_internal_has_lpm()) {
    clear_field_match_type();
    set_has_lpm();
    field_match_type_.lpm_ = CreateMaybeMessage< ::sdklt::FieldMatch_LPM >(
        GetArenaNoVirtual());
  }
  return field_match_type_.lpm_;
}
inline ::sdklt::FieldMatch_LPM* FieldMatch::mutable_lpm() {
  // @@protoc_insertion_point(field_mutable:sdklt.FieldMatch.lpm)
  return _internal_mutable_lpm();
}

// .sdklt.FieldMatch.Range range = 6;
inline bool FieldMatch::_internal_has_range() const {
  return field_match_type_case() == kRange;
}
inline bool FieldMatch::has_range() const {
  return _internal_has_range();
}
inline void FieldMatch::set_has_range() {
  _oneof_case_[0] = kRange;
}
inline void FieldMatch::clear_range() {
  if (_internal_has_range()) {
    delete field_match_type_.range_;
    clear_has_field_match_type();
  }
}
inline ::sdklt::FieldMatch_Range* FieldMatch::release_range() {
  // @@protoc_insertion_point(field_release:sdklt.FieldMatch.range)
  if (_internal_has_range()) {
    clear_has_field_match_type();
      ::sdklt::FieldMatch_Range* temp = field_match_type_.range_;
    field_match_type_.range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sdklt::FieldMatch_Range& FieldMatch::_internal_range() const {
  return _internal_has_range()
      ? *field_match_type_.range_
      : *reinterpret_cast< ::sdklt::FieldMatch_Range*>(&::sdklt::_FieldMatch_Range_default_instance_);
}
inline const ::sdklt::FieldMatch_Range& FieldMatch::range() const {
  // @@protoc_insertion_point(field_get:sdklt.FieldMatch.range)
  return _internal_range();
}
inline ::sdklt::FieldMatch_Range* FieldMatch::_internal_mutable_range() {
  if (!_internal_has_range()) {
    clear_field_match_type();
    set_has_range();
    field_match_type_.range_ = CreateMaybeMessage< ::sdklt::FieldMatch_Range >(
        GetArenaNoVirtual());
  }
  return field_match_type_.range_;
}
inline ::sdklt::FieldMatch_Range* FieldMatch::mutable_range() {
  // @@protoc_insertion_point(field_mutable:sdklt.FieldMatch.range)
  return _internal_mutable_range();
}

// .sdklt.FieldMatch.Optional optional = 7;
inline bool FieldMatch::_internal_has_optional() const {
  return field_match_type_case() == kOptional;
}
inline bool FieldMatch::has_optional() const {
  return _internal_has_optional();
}
inline void FieldMatch::set_has_optional() {
  _oneof_case_[0] = kOptional;
}
inline void FieldMatch::clear_optional() {
  if (_internal_has_optional()) {
    delete field_match_type_.optional_;
    clear_has_field_match_type();
  }
}
inline ::sdklt::FieldMatch_Optional* FieldMatch::release_optional() {
  // @@protoc_insertion_point(field_release:sdklt.FieldMatch.optional)
  if (_internal_has_optional()) {
    clear_has_field_match_type();
      ::sdklt::FieldMatch_Optional* temp = field_match_type_.optional_;
    field_match_type_.optional_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sdklt::FieldMatch_Optional& FieldMatch::_internal_optional() const {
  return _internal_has_optional()
      ? *field_match_type_.optional_
      : *reinterpret_cast< ::sdklt::FieldMatch_Optional*>(&::sdklt::_FieldMatch_Optional_default_instance_);
}
inline const ::sdklt::FieldMatch_Optional& FieldMatch::optional() const {
  // @@protoc_insertion_point(field_get:sdklt.FieldMatch.optional)
  return _internal_optional();
}
inline ::sdklt::FieldMatch_Optional* FieldMatch::_internal_mutable_optional() {
  if (!_internal_has_optional()) {
    clear_field_match_type();
    set_has_optional();
    field_match_type_.optional_ = CreateMaybeMessage< ::sdklt::FieldMatch_Optional >(
        GetArenaNoVirtual());
  }
  return field_match_type_.optional_;
}
inline ::sdklt::FieldMatch_Optional* FieldMatch::mutable_optional() {
  // @@protoc_insertion_point(field_mutable:sdklt.FieldMatch.optional)
  return _internal_mutable_optional();
}

// .google.protobuf.Any other = 100;
inline bool FieldMatch::_internal_has_other() const {
  return field_match_type_case() == kOther;
}
inline bool FieldMatch::has_other() const {
  return _internal_has_other();
}
inline void FieldMatch::set_has_other() {
  _oneof_case_[0] = kOther;
}
inline PROTOBUF_NAMESPACE_ID::Any* FieldMatch::release_other() {
  // @@protoc_insertion_point(field_release:sdklt.FieldMatch.other)
  if (_internal_has_other()) {
    clear_has_field_match_type();
      PROTOBUF_NAMESPACE_ID::Any* temp = field_match_type_.other_;
    field_match_type_.other_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Any& FieldMatch::_internal_other() const {
  return _internal_has_other()
      ? *field_match_type_.other_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Any*>(&PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& FieldMatch::other() const {
  // @@protoc_insertion_point(field_get:sdklt.FieldMatch.other)
  return _internal_other();
}
inline PROTOBUF_NAMESPACE_ID::Any* FieldMatch::_internal_mutable_other() {
  if (!_internal_has_other()) {
    clear_field_match_type();
    set_has_other();
    field_match_type_.other_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Any >(
        GetArenaNoVirtual());
  }
  return field_match_type_.other_;
}
inline PROTOBUF_NAMESPACE_ID::Any* FieldMatch::mutable_other() {
  // @@protoc_insertion_point(field_mutable:sdklt.FieldMatch.other)
  return _internal_mutable_other();
}

inline bool FieldMatch::has_field_match_type() const {
  return field_match_type_case() != FIELD_MATCH_TYPE_NOT_SET;
}
inline void FieldMatch::clear_has_field_match_type() {
  _oneof_case_[0] = FIELD_MATCH_TYPE_NOT_SET;
}
inline FieldMatch::FieldMatchTypeCase FieldMatch::field_match_type_case() const {
  return FieldMatch::FieldMatchTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TableAction

// .sdklt.Action action = 1;
inline bool TableAction::_internal_has_action() const {
  return type_case() == kAction;
}
inline bool TableAction::has_action() const {
  return _internal_has_action();
}
inline void TableAction::set_has_action() {
  _oneof_case_[0] = kAction;
}
inline void TableAction::clear_action() {
  if (_internal_has_action()) {
    delete type_.action_;
    clear_has_type();
  }
}
inline ::sdklt::Action* TableAction::release_action() {
  // @@protoc_insertion_point(field_release:sdklt.TableAction.action)
  if (_internal_has_action()) {
    clear_has_type();
      ::sdklt::Action* temp = type_.action_;
    type_.action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sdklt::Action& TableAction::_internal_action() const {
  return _internal_has_action()
      ? *type_.action_
      : *reinterpret_cast< ::sdklt::Action*>(&::sdklt::_Action_default_instance_);
}
inline const ::sdklt::Action& TableAction::action() const {
  // @@protoc_insertion_point(field_get:sdklt.TableAction.action)
  return _internal_action();
}
inline ::sdklt::Action* TableAction::_internal_mutable_action() {
  if (!_internal_has_action()) {
    clear_type();
    set_has_action();
    type_.action_ = CreateMaybeMessage< ::sdklt::Action >(
        GetArenaNoVirtual());
  }
  return type_.action_;
}
inline ::sdklt::Action* TableAction::mutable_action() {
  // @@protoc_insertion_point(field_mutable:sdklt.TableAction.action)
  return _internal_mutable_action();
}

// uint32 action_profile_member_id = 2;
inline bool TableAction::_internal_has_action_profile_member_id() const {
  return type_case() == kActionProfileMemberId;
}
inline void TableAction::set_has_action_profile_member_id() {
  _oneof_case_[0] = kActionProfileMemberId;
}
inline void TableAction::clear_action_profile_member_id() {
  if (_internal_has_action_profile_member_id()) {
    type_.action_profile_member_id_ = 0u;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableAction::_internal_action_profile_member_id() const {
  if (_internal_has_action_profile_member_id()) {
    return type_.action_profile_member_id_;
  }
  return 0u;
}
inline void TableAction::_internal_set_action_profile_member_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_action_profile_member_id()) {
    clear_type();
    set_has_action_profile_member_id();
  }
  type_.action_profile_member_id_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableAction::action_profile_member_id() const {
  // @@protoc_insertion_point(field_get:sdklt.TableAction.action_profile_member_id)
  return _internal_action_profile_member_id();
}
inline void TableAction::set_action_profile_member_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_action_profile_member_id(value);
  // @@protoc_insertion_point(field_set:sdklt.TableAction.action_profile_member_id)
}

// uint32 action_profile_group_id = 3;
inline bool TableAction::_internal_has_action_profile_group_id() const {
  return type_case() == kActionProfileGroupId;
}
inline void TableAction::set_has_action_profile_group_id() {
  _oneof_case_[0] = kActionProfileGroupId;
}
inline void TableAction::clear_action_profile_group_id() {
  if (_internal_has_action_profile_group_id()) {
    type_.action_profile_group_id_ = 0u;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableAction::_internal_action_profile_group_id() const {
  if (_internal_has_action_profile_group_id()) {
    return type_.action_profile_group_id_;
  }
  return 0u;
}
inline void TableAction::_internal_set_action_profile_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_action_profile_group_id()) {
    clear_type();
    set_has_action_profile_group_id();
  }
  type_.action_profile_group_id_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TableAction::action_profile_group_id() const {
  // @@protoc_insertion_point(field_get:sdklt.TableAction.action_profile_group_id)
  return _internal_action_profile_group_id();
}
inline void TableAction::set_action_profile_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_action_profile_group_id(value);
  // @@protoc_insertion_point(field_set:sdklt.TableAction.action_profile_group_id)
}

// .sdklt.ActionProfileActionSet action_profile_action_set = 4;
inline bool TableAction::_internal_has_action_profile_action_set() const {
  return type_case() == kActionProfileActionSet;
}
inline bool TableAction::has_action_profile_action_set() const {
  return _internal_has_action_profile_action_set();
}
inline void TableAction::set_has_action_profile_action_set() {
  _oneof_case_[0] = kActionProfileActionSet;
}
inline void TableAction::clear_action_profile_action_set() {
  if (_internal_has_action_profile_action_set()) {
    delete type_.action_profile_action_set_;
    clear_has_type();
  }
}
inline ::sdklt::ActionProfileActionSet* TableAction::release_action_profile_action_set() {
  // @@protoc_insertion_point(field_release:sdklt.TableAction.action_profile_action_set)
  if (_internal_has_action_profile_action_set()) {
    clear_has_type();
      ::sdklt::ActionProfileActionSet* temp = type_.action_profile_action_set_;
    type_.action_profile_action_set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sdklt::ActionProfileActionSet& TableAction::_internal_action_profile_action_set() const {
  return _internal_has_action_profile_action_set()
      ? *type_.action_profile_action_set_
      : *reinterpret_cast< ::sdklt::ActionProfileActionSet*>(&::sdklt::_ActionProfileActionSet_default_instance_);
}
inline const ::sdklt::ActionProfileActionSet& TableAction::action_profile_action_set() const {
  // @@protoc_insertion_point(field_get:sdklt.TableAction.action_profile_action_set)
  return _internal_action_profile_action_set();
}
inline ::sdklt::ActionProfileActionSet* TableAction::_internal_mutable_action_profile_action_set() {
  if (!_internal_has_action_profile_action_set()) {
    clear_type();
    set_has_action_profile_action_set();
    type_.action_profile_action_set_ = CreateMaybeMessage< ::sdklt::ActionProfileActionSet >(
        GetArenaNoVirtual());
  }
  return type_.action_profile_action_set_;
}
inline ::sdklt::ActionProfileActionSet* TableAction::mutable_action_profile_action_set() {
  // @@protoc_insertion_point(field_mutable:sdklt.TableAction.action_profile_action_set)
  return _internal_mutable_action_profile_action_set();
}

inline bool TableAction::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void TableAction::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline TableAction::TypeCase TableAction::type_case() const {
  return TableAction::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Action_Param

// uint32 param_id = 2;
inline void Action_Param::clear_param_id() {
  param_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Action_Param::_internal_param_id() const {
  return param_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Action_Param::param_id() const {
  // @@protoc_insertion_point(field_get:sdklt.Action.Param.param_id)
  return _internal_param_id();
}
inline void Action_Param::_internal_set_param_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  param_id_ = value;
}
inline void Action_Param::set_param_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_param_id(value);
  // @@protoc_insertion_point(field_set:sdklt.Action.Param.param_id)
}

// bytes value = 3;
inline void Action_Param::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Action_Param::value() const {
  // @@protoc_insertion_point(field_get:sdklt.Action.Param.value)
  return _internal_value();
}
inline void Action_Param::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:sdklt.Action.Param.value)
}
inline std::string* Action_Param::mutable_value() {
  // @@protoc_insertion_point(field_mutable:sdklt.Action.Param.value)
  return _internal_mutable_value();
}
inline const std::string& Action_Param::_internal_value() const {
  return value_.GetNoArena();
}
inline void Action_Param::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Action_Param::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sdklt.Action.Param.value)
}
inline void Action_Param::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sdklt.Action.Param.value)
}
inline void Action_Param::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sdklt.Action.Param.value)
}
inline std::string* Action_Param::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Action_Param::release_value() {
  // @@protoc_insertion_point(field_release:sdklt.Action.Param.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Action_Param::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:sdklt.Action.Param.value)
}

// -------------------------------------------------------------------

// Action

// uint32 action_id = 1;
inline void Action::clear_action_id() {
  action_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Action::_internal_action_id() const {
  return action_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Action::action_id() const {
  // @@protoc_insertion_point(field_get:sdklt.Action.action_id)
  return _internal_action_id();
}
inline void Action::_internal_set_action_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  action_id_ = value;
}
inline void Action::set_action_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:sdklt.Action.action_id)
}

// repeated .sdklt.Action.Param params = 4;
inline int Action::_internal_params_size() const {
  return params_.size();
}
inline int Action::params_size() const {
  return _internal_params_size();
}
inline void Action::clear_params() {
  params_.Clear();
}
inline ::sdklt::Action_Param* Action::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:sdklt.Action.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::Action_Param >*
Action::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:sdklt.Action.params)
  return &params_;
}
inline const ::sdklt::Action_Param& Action::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::sdklt::Action_Param& Action::params(int index) const {
  // @@protoc_insertion_point(field_get:sdklt.Action.params)
  return _internal_params(index);
}
inline ::sdklt::Action_Param* Action::_internal_add_params() {
  return params_.Add();
}
inline ::sdklt::Action_Param* Action::add_params() {
  // @@protoc_insertion_point(field_add:sdklt.Action.params)
  return _internal_add_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::Action_Param >&
Action::params() const {
  // @@protoc_insertion_point(field_list:sdklt.Action.params)
  return params_;
}

// -------------------------------------------------------------------

// ActionProfileActionSet

// repeated .sdklt.ActionProfileAction action_profile_actions = 1;
inline int ActionProfileActionSet::_internal_action_profile_actions_size() const {
  return action_profile_actions_.size();
}
inline int ActionProfileActionSet::action_profile_actions_size() const {
  return _internal_action_profile_actions_size();
}
inline void ActionProfileActionSet::clear_action_profile_actions() {
  action_profile_actions_.Clear();
}
inline ::sdklt::ActionProfileAction* ActionProfileActionSet::mutable_action_profile_actions(int index) {
  // @@protoc_insertion_point(field_mutable:sdklt.ActionProfileActionSet.action_profile_actions)
  return action_profile_actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::ActionProfileAction >*
ActionProfileActionSet::mutable_action_profile_actions() {
  // @@protoc_insertion_point(field_mutable_list:sdklt.ActionProfileActionSet.action_profile_actions)
  return &action_profile_actions_;
}
inline const ::sdklt::ActionProfileAction& ActionProfileActionSet::_internal_action_profile_actions(int index) const {
  return action_profile_actions_.Get(index);
}
inline const ::sdklt::ActionProfileAction& ActionProfileActionSet::action_profile_actions(int index) const {
  // @@protoc_insertion_point(field_get:sdklt.ActionProfileActionSet.action_profile_actions)
  return _internal_action_profile_actions(index);
}
inline ::sdklt::ActionProfileAction* ActionProfileActionSet::_internal_add_action_profile_actions() {
  return action_profile_actions_.Add();
}
inline ::sdklt::ActionProfileAction* ActionProfileActionSet::add_action_profile_actions() {
  // @@protoc_insertion_point(field_add:sdklt.ActionProfileActionSet.action_profile_actions)
  return _internal_add_action_profile_actions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sdklt::ActionProfileAction >&
ActionProfileActionSet::action_profile_actions() const {
  // @@protoc_insertion_point(field_list:sdklt.ActionProfileActionSet.action_profile_actions)
  return action_profile_actions_;
}

// -------------------------------------------------------------------

// ActionProfileAction

// .sdklt.Action action = 1;
inline bool ActionProfileAction::_internal_has_action() const {
  return this != internal_default_instance() && action_ != nullptr;
}
inline bool ActionProfileAction::has_action() const {
  return _internal_has_action();
}
inline void ActionProfileAction::clear_action() {
  if (GetArenaNoVirtual() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
}
inline const ::sdklt::Action& ActionProfileAction::_internal_action() const {
  const ::sdklt::Action* p = action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sdklt::Action*>(
      &::sdklt::_Action_default_instance_);
}
inline const ::sdklt::Action& ActionProfileAction::action() const {
  // @@protoc_insertion_point(field_get:sdklt.ActionProfileAction.action)
  return _internal_action();
}
inline ::sdklt::Action* ActionProfileAction::release_action() {
  // @@protoc_insertion_point(field_release:sdklt.ActionProfileAction.action)
  
  ::sdklt::Action* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::sdklt::Action* ActionProfileAction::_internal_mutable_action() {
  
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::sdklt::Action>(GetArenaNoVirtual());
    action_ = p;
  }
  return action_;
}
inline ::sdklt::Action* ActionProfileAction::mutable_action() {
  // @@protoc_insertion_point(field_mutable:sdklt.ActionProfileAction.action)
  return _internal_mutable_action();
}
inline void ActionProfileAction::set_allocated_action(::sdklt::Action* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    
  } else {
    
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:sdklt.ActionProfileAction.action)
}

// int32 weight = 2;
inline void ActionProfileAction::clear_weight() {
  weight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionProfileAction::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionProfileAction::weight() const {
  // @@protoc_insertion_point(field_get:sdklt.ActionProfileAction.weight)
  return _internal_weight();
}
inline void ActionProfileAction::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weight_ = value;
}
inline void ActionProfileAction::set_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:sdklt.ActionProfileAction.weight)
}

// int32 watch = 3;
inline void ActionProfileAction::clear_watch() {
  watch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionProfileAction::_internal_watch() const {
  return watch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionProfileAction::watch() const {
  // @@protoc_insertion_point(field_get:sdklt.ActionProfileAction.watch)
  return _internal_watch();
}
inline void ActionProfileAction::_internal_set_watch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  watch_ = value;
}
inline void ActionProfileAction::set_watch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_watch(value);
  // @@protoc_insertion_point(field_set:sdklt.ActionProfileAction.watch)
}

// -------------------------------------------------------------------

// Uint128

// uint64 high = 1;
inline void Uint128::clear_high() {
  high_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Uint128::_internal_high() const {
  return high_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Uint128::high() const {
  // @@protoc_insertion_point(field_get:sdklt.Uint128.high)
  return _internal_high();
}
inline void Uint128::_internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  high_ = value;
}
inline void Uint128::set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:sdklt.Uint128.high)
}

// uint64 low = 2;
inline void Uint128::clear_low() {
  low_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Uint128::_internal_low() const {
  return low_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Uint128::low() const {
  // @@protoc_insertion_point(field_get:sdklt.Uint128.low)
  return _internal_low();
}
inline void Uint128::_internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  low_ = value;
}
inline void Uint128::set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:sdklt.Uint128.low)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sdklt

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sdklt::WriteRequest_Atomicity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sdklt::WriteRequest_Atomicity>() {
  return ::sdklt::WriteRequest_Atomicity_descriptor();
}
template <> struct is_proto_enum< ::sdklt::Update_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sdklt::Update_Type>() {
  return ::sdklt::Update_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdklt_2eproto
