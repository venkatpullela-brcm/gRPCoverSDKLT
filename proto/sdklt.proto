
syntax = "proto3";

import "google/protobuf/any.proto";
//import "google/rpc/status.proto";

option java_multiple_files=true;
option java_package = "io.grpc.sdklt";
option java_outer_classname = "SdkLtProto";
option objc_class_prefix= "SDLK";

package sdklt;

service Api {
    rpc bcmInit(InitRequest) returns (InitState) {}
    rpc bcmShell(ShellRequest) returns (ShellState) {}
    rpc bcmShutdown(ShutDownRequest) returns (ShutDownState) {}
    // Write the table based on
    rpc openWrite(WriteRequest) returns (WriteResponse) {}
    rpc openRead(ReadRequest) returns (ReadResponse) {}
}

//---------------------------------BCM library related -----------------------

message ShellRequest {
    uint32 unit = 1;
    string cmd = 2;
}

message ShellState {
    string message = 1;
    bool success = 2;
}

message InitRequest {
    uint32 unit = 1;
}

message InitState {
    string message = 1;
    bool success = 2;
}

message ShutDownRequest {
    bool graceful = 1;
}

message ShutDownState {
    string message = 1;
    bool success = 2;
}

// ---------------------------------------------------------------------

message ReadRequest {
    uint64 device_id = 1;
    uint64 role_id = 2;
    string lt_name = 3;
    string key = 4;
}

message ReadResponse {
    string message = 1;
    bool success = 2;
}


message WriteRequest {
  uint64 device_id = 1;
  uint64 role_id = 2;
  Uint128 election_id = 3;
  // The write batch, comprising a list of Update operations. The P4Runtime
  // server may arbitrarily reorder messages within a batch to maximize
  // performance.
  repeated Update updates = 4;
  enum Atomicity {
    // Required. This is the default behavior. The batch is processed in a
    // non-atomic manner from a data plane point of view. Each operation within
    // the batch must be attempted even if one or more encounter errors.
    // Every data plane packet is guaranteed to be processed according to
    // table contents as they are between two individual operations of the
    // batch, but there could be several packets processed that see each of
    // these intermediate stages.
    CONTINUE_ON_ERROR = 0;
    // Optional. Operations within the batch are committed to data plane until
    // an error is encountered. At this point, the operations must be rolled
    // back such that both software and data plane state is consistent with the
    // state before the batch was attempted. The resulting behavior is
    // all-or-none, except the batch is not atomic from a data plane point of
    // view. Every data plane packet is guaranteed to be processed according to
    // table contents as they are between two individual operations of the
    // batch, but there could be several packets processed that see each of
    // these intermediate stages.
    ROLLBACK_ON_ERROR = 1;
    // Optional. Every data plane packet is guaranteed to be processed according
    // to table contents before the batch began, or after the batch completed
    // and the operations were programmed to the hardware.
    // The batch is therefore treated as a transaction. 
    DATAPLANE_ATOMIC = 2;
  }
  Atomicity atomicity = 5;
}

message WriteResponse {
    string message = 1;
    bool success = 2;
}

message Update {
  enum Type {
    UNSPECIFIED = 0;
    INSERT = 1;
    MODIFY = 2;
    DELETE = 3;
    TRAVERSE = 4;
  }
  Type type = 1;
  Entity entity = 2;
}

message Entity {
  oneof entity {
    //ExternEntry extern_entry = 1;
    TableEntry table_entry = 2;
    //ActionProfileMember action_profile_member = 3;
    //ActionProfileGroup action_profile_group = 4;
    //MeterEntry meter_entry = 5;
    //DirectMeterEntry direct_meter_entry = 6;
    //CounterEntry counter_entry = 7;
    //DirectCounterEntry direct_counter_entry = 8;
    //PacketReplicationEngineEntry packet_replication_engine_entry = 9;
    //ValueSetEntry value_set_entry = 10;
    //RegisterEntry register_entry = 11;
    //DigestEntry digest_entry = 12;
  }
}

message ExternEntry {
  // the extern_type_id is unique for a given architecture and must be in the
  // range [0x81, 0xfe].
  uint32 extern_type_id = 1;
  uint32 extern_id = 2;  // id of the instance
  .google.protobuf.Any entry = 3;
}

message TableEntry {
  uint32 table_id = 1;
  repeated FieldMatch match = 2;
  TableAction action = 3;
  // Should only be set if the match implies a TCAM lookup, i.e. at least one of
  // the match fields is Optional, Ternary or Range.  A higher number indicates
  // higher priority.  Only a highest priority entry that matches the packet
  // must be selected.  Multiple entries in the same table with the same
  // priority value are permitted.  See Section "TableEntry" in the
  // specification for details of the behavior.
  int32 priority = 4;
  // Metadata (cookie) opaque to the target. There is no requirement of where
  // this is stored, as long as it is returned with the rest of the entry in
  // a Read RPC. This is deprecated in favor of the more flexible metadata
  // field.
  uint64 controller_metadata = 5 [deprecated=true];
  // meter_config and counter_data are convenience fields that enable the
  // controller to configure the direct resources associated with the table at
  // the same time as a match-action entry is inserted or modified.
  // Table write:
  //   - If the table does not contain a direct resource, then setting the
  //     corresponding direct resource field in any table write operation will
  //     return an error.
  //   - When inserting a new table entry, leaving these fields unset means that
  //     the direct resources of this table (if any) will assume default values.
  //     For counters, the default value is 0, and for meters, the default value
  //     is always green.
  //   - When updating a table entry, leaving meter_config unset will reset the
  //     meter (if any) to its default configuration, while leaving counter_data
  //     unset means that the counter (if any) will not be updated.
  // Table read:
  //   - If the table does not contain a direct resource, then the corresponding
  //     field will not be set in the read table entry.
  //   - If meter_config is unset in the request, or if the meter has a default
  //     configuration, meter_config will not be set in the response.
  //   - If counter_data is unset in the request, it will be unset in the
  //     response as well.
  
  //MeterConfig meter_config = 6;
  //CounterData counter_data = 7;
  // Set to true if the table entry is being used to update the non-const
  // default action of the table. If true, the "match" field must be empty and
  // the "action" field must be populated with a valid direct action.
  bool is_default_action = 8;
  // The TTL for the entry, in nanoseconds. A value of 0 means that the table
  // entry never "expires".
  int64 idle_timeout_ns = 9;
  message IdleTimeout {
    // Time elapsed - in nanoseconds - since the table entry was last "hit" as
    // part of a data plane table lookup.
    int64 elapsed_ns = 1;
  }
  // Table write: this field should be left unset.
  // Table read: if the table supports idle timeout and time_since_last_hit is
  // set in the request, this field will be set in the response.
  IdleTimeout time_since_last_hit = 10;
  // Arbitrary metadata from the controller that is opaque to the target.
  bytes metadata = 11;
}

// field_match_type ::= exact | ternary | lpm | range | optional
message FieldMatch {
  uint32 field_id = 1;

  // Matches can be performed on arbitrarily-large inputs; the protobuf type
  // 'bytes' is used to model arbitrarily-large values.
  message Exact {
    bytes value = 1;
  }
  message Ternary {
    bytes value = 1;
    bytes mask = 2;
  }
  message LPM {
    bytes value = 1;
    int32 prefix_len = 2;  // in bits
  }
  // A Range is logically a set that contains all values numerically between
  // 'low' and 'high' inclusively.
  message Range {
    bytes low = 1;
    bytes high = 2;
  }
  // If the Optional match should be a wildcard, the FieldMatch must be omitted.
  // Otherwise, this behaves like an exact match.
  message Optional {
    bytes value = 1;
  }

  oneof field_match_type {
    Exact exact = 2;
    Ternary ternary = 3;
    LPM lpm = 4;
    Range range = 6;
    Optional optional = 7;
    // Architecture-specific match value; it corresponds to the other_match_type
    // in the P4Info MatchField message.
    .google.protobuf.Any other = 100;
  }
}

// table_actions ::= action_specification | action_profile_specification
message TableAction {
  oneof type {
    Action action = 1;
    uint32 action_profile_member_id = 2;
    uint32 action_profile_group_id = 3;
    ActionProfileActionSet action_profile_action_set = 4;
  }
}

message Action {
  uint32 action_id = 1;
  message Param {
    uint32 param_id = 2;
    bytes value = 3;
  }
  repeated Param params = 4;
}

message ActionProfileActionSet {
  repeated ActionProfileAction action_profile_actions = 1;
}

message ActionProfileAction {
  Action action = 1;
  int32 weight = 2;
  int32 watch = 3;
}

message Uint128 {
  // Highest 64 bits of a 128 bit number.
  uint64 high = 1;
  // Lowest 64 bits of a 128 bit number.
  uint64 low = 2;
}